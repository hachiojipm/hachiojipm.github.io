<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm 日めくりテックトーク</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.11">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-12-22T03:15:32+09:00</updated>
<entry>
<title type="text">話題のHHVM（HiphopVM）を手軽に試す</title>
<link href="http://hachiojipm.github.io/entry/2013-12-22-hhvm.html" />
<author>
<name>uzulla</name>
</author>
<content><![CDATA[<h1>話題のHHVM（HiphopVM）を手軽に試す</h1>

<p>「PHP…誰得…」</p>

<p>Hachioji.pm #36のLTを焼き直し、さらに相変わらず自分のブログにリンクするというやっつけぶりです。</p>

<p>以下からどうぞ！</p>

<p><a href="http://uzulla.hateblo.jp/entry/2013/12/22/025014">HHVM(HipHopVM)のFastCGIを軽く試す - uzullaがブログ</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-22:entry-2013-12-22-hhvm.html</id>
<published>2013-12-22T15:15:32+0900</published>
<updated>2013-12-22T03:15:32+09:00</updated>
</entry>
<entry>
<title type="text">Perl meets GPU</title>
<link href="http://hachiojipm.github.io/entry/2013-12-21-percuda.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Perl meets GPU</h1>

<p>...という記事を, Perl Advent Calendar 20日目として書きましたので紹介させて頂きます!<br/>
(2日連続の<a href="http://hachiojipm.github.io/entry/2013-12-08-usui-paren-vim.html">moznionスタイル</a>ですね...)</p>

<p><a href="http://qiita.com/papix/items/fee3e60e21f2ab1f1c76">http://qiita.com/papix/items/fee3e60e21f2ab1f1c76</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-21:entry-2013-12-21-percuda.html</id>
<published>2013-12-21T59:59:00+0900</published>
<updated>2013-12-21T23:59:00+09:00</updated>
</entry>
<entry>
<title type="text">papixのグルメ 〜関西地方編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-15-papix-gourmet-2.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>papixのグルメ 〜関西地方編〜</h1>

<p>papixです. とにかく, どんな形であってもHachioji.pm Advent Calendarを完走させるという悲壮な決意(?)を持ってこのアドベントカレンダーと対峙しております.</p>

<p>というわけで, 今日は｢papixのグルメ 〜関西地方編〜｣をお送りしたいと思います.</p>

<h2>兵庫 / ｢旨いらーめんゆうや｣の味噌ラーメン</h2>

<p>-> <a href="http://tabelog.com/hyogo/A2807/A280703/28021381/">食べログ</a></p>

<p>大学の最寄り駅の近くにある味噌ラーメンの店. <br/>
中途半端な時間に大学を出て, 家に帰ってもメシないしなー... という時は, 大抵この店に行っています.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-hyogo-yuuya.jpg" alt="ゆうやの味噌ラーメン" /></p>

<p>目玉の味噌ラーメンは若干ピリ辛, そしてこってり気味で, そこがお気に入りです.<br/>
写真では, ネギをトッピングして山盛りにしてもらいました.</p>

<p>この店の特徴は, 2cm〜3cm四方くらいの海苔が食べ放題という点.<br/>
麺と具を片付けた後, 残ったスープに海苔を浸して食べると非常に美味しいのです!! (見た目汚い感じですが...)</p>

<h2>奈良 / ｢元喜神｣のつけ麺</h2>

<p>-> <a href="http://tabelog.com/nara/A2901/A290101/29005789/">食べログ</a></p>

<p>小学校･中学校の同級生が紹介してくれた, 奈良県にあるつけ麺屋.<br/>
鶏白湯のスープがウリのお店です.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-nara-genkishin.jpg" alt="元喜神のつけ麺" /></p>

<p>この店は, なんと各テーブルにIHクッキングヒーターっぽいものが設置されていて, これとつけ麺のスープを使って雑炊が作れるのです!</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-nara-genkishin-zousui.jpg" alt="元喜神の雑炊" /></p>

<p>残ったスープとご飯, 卵, チーズで作ったチーズリゾット. これもまた美味...!<br/>
近くに鉄道の駅がなく, 車がなければ行けない店なのですが, また食べに行きたいなー... と密かに思っています.</p>

<h2>奈良 / ｢あまのじゃく｣の塩とんこつラーメン</h2>

<p>-> <a href="http://tabelog.com/nara/A2901/A290102/29000547/">食べログ</a></p>

<p>上記の｢元喜神｣を紹介してくれた友人が連れて行ってくれたラーメン屋.<br/>
友人の一押し店舗らしく, 店主に顔を覚えられる程度には通ったとか.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-nara-amanojaku.jpg" alt="あまのじゃくの塩とんこつ" /></p>

<p>頂いたのは塩とんこつチャーシュー麺.<br/>
コクのあるスープはくどくなく, しっかりと麺に絡みます.<br/>
そして香ばしく炙られたチャーシューが旨い!</p>

<p>当時のブログには, ｢プロ野球で例えるなら3割30本30盗塁の一流選手｣という評価を残していました.<br/>
自分にとって, 王道かつ理想のとんこつラーメンはこの店のとんこつラーメンじゃないかなあ... という気がしています.</p>

<h2>大阪 / ｢無鉄砲｣のこってりとんこつラーメン</h2>

<p>-> <a href="http://tabelog.com/osaka/A2702/A270202/27005006/">食べログ</a></p>

<p>無鉄砲. それはpapixにとっては青春の味なのです.<br/>
かつて, どうしようもないヲタだった高校生時代, 土日の昼間に友達とフリータイムのカラオケ(もちろん曲はアニソンばっかり)に行った後によく行っていました.<br/>
確か, ｢歌って枯れた喉をここのラーメンの油がコーティングしてくれるんだよ!｣みたいな事を言っていた友人がいたような気がします...</p>

<p>さて, 食べログのページを見て頂ければわかるのですが, この店のラーメンは超! こってりです. どうしようもなく背脂たっぷりです.<br/>
ちょっと太めの麺に, 超こってりスープが絡む絡む! 口の中は油でべったべた, 口の周りも油でべったべた, でも不味くはなくて, むしろ非常に旨いんですよね.</p>

<p>非常に中毒性のあるとんこつラーメンなので, とんこつ好きの方は是非一度味わってみて欲しいと思います.<br/>
というか, ここのラーメンを食わずして｢こってりとんこつラーメン｣は語れないのでは? とすら思っています.</p>

<p>関東在住の方は, <a href="http://www.muteppou.com/tenpo.html">中野にも店がある</a>みたいなので, 是非そちらへどうぞ!</p>

<h2>まとめ</h2>

<p><strong>...全部ラーメンじゃないか!!!</strong><br/>
まあ, 関西地方はホームグラウンドのようなものなので, ラーメンみたいな｢ファストフード｣っぽいものしか食べないからだと思います...</p>

<p>Hachioji.pm Advent Calendarはまだまだ続きます.<br/>
｢papixのグルメ｣も, 北海道編や関東編, 東北編などが残っていますので, どうぞお楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-21:entry-2013-12-15-papix-gourmet-2.html</id>
<published>2013-12-15T59:59:00+0900</published>
<updated>2013-12-21T04:09:42+09:00</updated>
</entry>
<entry>
<title type="text">papixのグルメ 〜九州･中国地方編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-12-papix-gourmet.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>papixのグルメ 〜九州･中国地方編〜</h1>

<p>papixです. 12日現在, Hachioji.pm Advent Calendarに対して(この記事含め)6つの記事を投稿しています.<br/>
<strong>半分以上俺じゃねーか!</strong></p>

<p>...というわけで, 気がついたら12日の記事が上がっていなかったので, <strong>過去に書いたブログのテキストを継ぎ接ぎして</strong>12日目です.<br/>
タイトルは｢papixのグルメ｣. タイトルは｢孤独のグルメ｣を意識しています. 多分.</p>

<p>今日は｢九州･中国地方編｣ということで, 旅の中でpapixが出会った美味しい料理を, いろいろ紹介していきます!</p>

<h2>広島 / ｢三公｣の尾道ラーメン</h2>

<p>-> <a href="http://tabelog.com/hiroshima/A3401/A340102/34000436/">食べログ</a></p>

<p>広島駅の駅ビルにあるラーメン屋.<br/>
改札を出てすぐの駅ビル内にあるという立地, そして｢程よく混んでいるがほとんど待つ事はない｣という空き具合.<br/>
同じフロアには広島焼きの店が多数あるのですが, 昼飯時などは殺人的に混んでるんですよね...<br/>
その中で, ほとんど並ばずにサッと入れるこの店の存在は有難いです.<br/>
乗り継ぎの事情で, 広島で食事を取るという時は, 大抵この店に行っています.</p>

<p>さて, Wikipedia先生曰く, 尾道ラーメンは次のような特長があるらしいです.</p>

<ul>
<li>瀬戸内海の小魚によるだし（いりこだし）を加えた濁らせない鶏がらスープ</li>
<li>タレはシンプルな醤油味ベース</li>
<li>歯ごたえのある独特の食感の平打ち麺（非常に伸びやすい）</li>
<li>薬味は青ネギ、具材としてチャーシュー、メンマを使用</li>
<li>比較的大き目の豚の背脂ミンチをスープに浮かべる</li>
</ul>


<p><img src="http://hachiojipm.github.io/static/image/gourmet-onomichi-ramen.jpg" alt="尾道ラーメン" /></p>

<p>写真はチャーシュー麺. 写真では背脂ミンチは見当たりませんが, チャーシューの下にこれでもか! というくらい入ってます.<br/>
麺が伸びないうちにズルっと頂いた後, 背脂の食感を味わいながらスープを飲むのがたまらなくたまらない... そんな一品です.</p>

<h2>鳥取 / ｢砂丘会館｣の刺身定食</h2>

<p>-> <a href="http://tabelog.com/tottori/A3101/A310101/31000346/">食べログ</a></p>

<p>鳥取砂丘のすぐ近く, 砂丘会館という建物の中にある食事所.<br/>
ここで頂いたのが, 1500円の刺身定食.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-tottori-sashimi.jpg" alt="刺身定食" /></p>

<p>新鮮な海の幸がたっぷり!</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-tottori-sashimi-1.jpg" alt="刺身" /></p>

<p>刺身をズーム. なんとカニまで...!<br/>
新鮮な海の幸をたっぷり楽しめる刺身定食, 鳥取砂丘を堪能した後に是非味わって頂きたい逸品です.</p>

<h2>宮崎 / ｢おぐら｣のチキン南蛮</h2>

<p>-> <a href="http://tabelog.com/miyazaki/A4501/A450101/45000012/">食べログ</a></p>

<p>就活の時にたまたま知り合った宮崎大学の知人が紹介してくれた, チキン南蛮発祥の店.<br/>
宮崎駅前からちょっと歩いた路地裏っぽい場所にあるので, 初見で行くには結構悩みそうな立地ですが, 行く価値は十二分にあります.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-miyazaki-namban.jpg" alt="チキン南蛮" /></p>

<p>タルタルチキンたっぷりのチキン南蛮は食べごたえ抜群!<br/>
このボリューム, この味, そしてこれご飯がついて980円というのは非常に有難いお値段.<br/>
肉好きな人間としては, また宮崎に行って食べたいなーと思っています.</p>

<h2>大分 / ｢地獄蒸し工房 鉄輪｣の地獄蒸し</h2>

<p>-> <a href="http://tabelog.com/oita/A4402/A440202/44004949/">食べログ</a></p>

<p>大分は別府と言えば温泉. いわゆる｢地獄めぐり｣を含めて, 無数の温泉が湧いている温泉好きにはたまらない街です.<br/>
そんな別府の温泉を使った料理を堪能できるのが, 鉄輪にある｢地獄蒸し工房 鉄輪｣です.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-ohita-jigokumushi-01.jpg" alt="調理風景" /></p>

<p>調理といってもシンプルで, 温泉の蒸気で食材を蒸すだけ!<br/>
蒸すだけなのに, 超おいしい. それが鉄輪の地獄蒸しなのです.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-ohita-jigokumushi-02.jpg" alt="野菜" /><br/>
<img src="http://hachiojipm.github.io/static/image/gourmet-ohita-jigokumushi-03.jpg" alt="魚介" /><br/>
<img src="http://hachiojipm.github.io/static/image/gourmet-ohita-jigokumushi-04.jpg" alt="根菜" /><br/>
<img src="http://hachiojipm.github.io/static/image/gourmet-ohita-jigokumushi-05.jpg" alt="チキン" /></p>

<p>どれもこれも美味しいのですが, 特にオススメは野菜.<br/>
キャベツやかぼちゃが持つ, 野菜の甘みというものが最高に引きたてられていました.<br/>
ジャガイモやさつまいもも, ホクホクで最高!</p>

<p>この時は, 研究旅行の一環で5人くらいで行ったのですが, 1人1000〜1500円くらいで地獄蒸しを堪能できた気がします.<br/>
グループで別府に行くなら, これはもう行くしかないですね!</p>

<h2>長崎 / ｢ログキット｣の佐世保バーガー</h2>

<p>佐世保といえばハンバーガー. その中で特にインパクトがあったのが, 佐世保駅にあったハンバーガーショップ, ログキットの佐世保バーガーです.</p>

<p>この店のハンバーガーは何といってもデカイ.<br/>
店のメニューには｢スモールサイズ｣と｢レギュラーサイズ｣と書いてあるのですが, 明らかにスモールはレギュラーの, レギュラーはビッグの間違いです.<br/>
｢レギュラーサイズ1つ!｣と注文すると, レジの店員さんが調理の店員さんに｢おっきいやつ1個!!!｣みたいな感じで言ってましたし.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-nagasaki-hamburger.jpg" alt="ハンバーガー" /></p>

<p>...普通のハンバーガーの1.5倍くらいの面積があります.<br/>
どう考えても口に入らないので, これを上から押さえつけて潰し, 食べやすくしてから食べるのが本場アメリカ流... と説明していました.<br/>
デカイだけでなくとても美味しくて, 特にお肉が非常にジューシー. 駅に近いこともあって, 佐世保に行った時はまた食べたいなあ... と思っています.</p>

<h2>鹿児島 / ｢児玉｣の薩摩定食</h2>

<p>-> <a href="http://tabelog.com/kagoshima/A4601/A460101/46001390/">食べログ</a></p>

<p>鹿児島の中心地, 九州新幹線の終着駅でもある鹿児島中央駅から歩いてすぐにある定食屋, ｢児玉｣.<br/>
たまたま泊まったホテルの目の前にあって, 適当に入ってみた店なのですが, これが大成功でした.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-kagoshima-satsuma.jpg" alt="薩摩定食" /></p>

<p>鹿児島名物が集結した｢薩摩定食｣! <br/>
左から地鶏の刺身, きびなごの刺身, さつま揚げ, 豚足で, お値段なんと1800円!<br/>
地鶏の刺身は噛めば噛むほど味が出てきて, 豚足は柔らかい肉とコリコリした軟骨の食感がたまらない!</p>

<p>あとこの時は, 旅行がスタートしたばかりで旅費に余裕があったので, 調子にのって黒豚のとんかつなるものも頼んでみたり.</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-kagoshima-katsu.jpg" alt="黒豚のとんかつ" /></p>

<p>これもまた美味! すごく柔らかくて, 噛み続けると肉が消えるんです!<br/>
普通, とんかつとか食べて噛み続けていると, 肉の繊維? っぽいものが残るじゃないですか. あれが残らないんです!</p>

<p>鹿児島名物をひと通り堪能できる児玉, 鹿児島の食事で悩んだ時は, 是非行ってみて下さい.</p>

<h2>福岡 / ｢ふとっぱら｣のラーソーメン</h2>

<p>-> <a href="http://tabelog.com/fukuoka/A4001/A400102/40003954/">食べログ</a></p>

<p>九州は基本的にどこに行ってもメシがうまいですが, その中でも福岡は別格.<br/>
モツ鍋, 明太子, 魚介, とんこつラーメン... ほんと食事には困らない都市です.</p>

<p>そんな中でもお気に入りなのが, ふとっぱらという居酒屋のラーソーメン!<br/>
ふとっぱらという店は, Fukuoka.pmがあった時には, 大抵2次会として来るお店です(ちなみにその後は天神駅前の屋台に行く, という所までがテンプレ).</p>

<p><img src="http://hachiojipm.github.io/static/image/gourmet-fukuoka-rasomen.jpg" alt="ラーソーメン" /></p>

<p>氷で冷やした博多ラーメンの細麺を, ほんのり甘い醤油ベースのたれで頂く.<br/>
1次会でたらふく食べた後でもスルスル食べれる, 素朴なのにクセのある一品です.</p>

<p>僕も大好きですし, このあいだのFukuoka.pmで一緒に行った@yusukebeさんも大絶賛していましたし, Fukuoka.pmの方曰く｢以前Fukuoka.pmに来ていたYさんはラーソーメンをわんこそばのように食べていた.｣とか...</p>

<p>というわけで, 是非皆さんもFukuoka.pmに行って, Fukuoka.pmの方と一緒にラーソーメンを食べましょう!</p>

<h2>まとめ</h2>

<p>｢papixのグルメ｣ということで, 九州と中国地方の美味しいグルメを紹介してみました.<br/>
九州でゆーすけべーさんと食べた明太子御膳とかも紹介したかったんですが, 節操無く紹介すると時間がなくなるので今回は断念...<br/>
なお, 次回は｢papixのグルメ 〜北海道編〜｣になるのではないでしょうか.</p>

<p>そして明日13日はまたまた@hirobanexさん担当の予定! 果たしてどんな記事がアップされるのか, 楽しみです.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-13:entry-2013-12-12-papix-gourmet.html</id>
<published>2013-12-12T59:59:00+0900</published>
<updated>2013-12-21T04:09:42+09:00</updated>
</entry>
<entry>
<title type="text">Compiler::Lexerを使ったモジュール達</title>
<link href="http://hachiojipm.github.io/entry/2013-12-17-compiler-lexer.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Compiler::Lexerを使ったモジュール達</h1>

<p>Hachioji.pm Advent Calendarの17日目です. 担当はもう何度記事を書いたかわからなくなってきたpapixです.<br/>
今日は, 最近注目を集めている@goccyさん製のPerl用トーカナイザ, <a href="http://search.cpan.org/~goccy/Compiler-Lexer/">Compiler::Lexer</a>を活用したモジュール達を紹介したいと思います.</p>

<h2>Perl::MinimumVersion::Fast by @tokuhirom</h2>

<p><a href="http://blog.64p.org/entry/2013/05/02/185530">Compiler::Lexer をつかって Perl::MinimumVersion::Fast をかいてみた</a></p>

<p>tokuhiromさんが作った, ｢あるPerlのコードが, どのPerlのバージョンを必要とするか｣を確認できるモジュール.<br/>
本家のPerl::MinimumVersionはPPIで実装されており, これをtokuhiromさんがCompiler::Lexer化して完成したものです.<br/>
このモジュールを使えば, Perl 5.8を対象としたライブラリで<code>//</code>や<code>~~</code>を使っていないかどうかを確認したりできます.</p>

<h2>Test::Synopsis::Expectation by @moznion</h2>

<p><a href="http://mackee.hatenablog.com/entry/2013/12/16/234919">SYNOPSISのコメントを使ってテストするTest::Synopsis::Expectation</a><br/>
<a href="http://moznion.hatenadiary.com/entry/2013/12/17/113458">Test::Synopsis::Expectationというモジュールをリリースしました</a></p>

<p><a href="https://twitter.com/t_wada">@t_wada</a>さんから大絶賛を受けていた, moznionさんのモジュールです.</p>

<blockquote class="twitter-tweet" lang="ja"><p>“SYNOPSIS自体に期待する値を埋め込んでおいて，それをもとにSYNOPSISのコードをテストする事で，SYNOPSISがSyntax的にもLogic的にもValidであることをチェック” すばらしい! jsにもREADME.m… <a href="http://t.co/xaVBM2C534">http://t.co/xaVBM2C534</a></p>&mdash; Takuto Wada (@t_wada) <a href="https://twitter.com/t_wada/statuses/412849220853317632">2013, 12月 17</a></blockquote>


<p></p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>Synopsisのコメントを使ってテストをするモジュールです.<br/>
｢モジュールの挙動がよくわからなかったら, とりあえずSynopsisを動かしてみる｣という人にとって, 肝心のSynopsisが間違っている(Syntaxが間違ってるとか, 過去の仕様に準拠したSynopsisだったりとか...)と結構困ります.<br/>
モジュール開発者がこのモジュールでテストをしておけば, Synopsisが本当に正しいかどうかを確認することができるので, このようなトラブルを回避できるようになります.</p>

<p>このモジュールをつくる為に, moznionさんはCompiler::Lexerにいくつかのパッチを送っていました.<br/>
ただ, ｢時折Compiler::Lexerが原因? でテストがコケる...｣という症状があるらしく, 現在PPI版の実装に取り組んでいるとのことです.<br/>
将来的には, 後述のTest::LocalFunctionsのように, バックエンドをPPIとCompiler::Lexerから選べるようになるのではないでしょうか.</p>

<h2>Test::LocalFunctions::Fast by @moznion / @papix</h2>

<p><a href="http://moznion.hatenadiary.com/entry/20130412/1365795045">Test::LocalFunctions というモジュールを書いてました</a><br/>
<a href="http://blog.papix.net/entry/2013/05/02/223803">Test::LocalFunctions::Fastというモジュールを作った.</a><br/>
<a href="http://blog.papix.net/entry/2013/05/27/224100">Test::LocalFunctions::FastをTest::LocalFunctionsにマージしてもらいました.</a></p>

<p>Test::LocalFunctionsは, モジュールの中で使われていないローカル関数がないかテストする為のモジュールです.<br/>
元々はmoznionさんがPPIを使って実装していて, それをpapix(私)がCompiler::Lexerを使って高速化し, Test::LocalFunctions::Fastの名前でGitHubに公開しました.<br/>
最終的には, Test::LocalFuctionsにマージしてもらってmoznionさんが管理･リリースしています.</p>

<h2>Test::UsedModules::Fast by @papix</h2>

<p><a href="http://blog.papix.net/entry/2013/07/09/211600">Test::UsedModules::Fastに心が折れたので, Test::UsedModulesの紹介をします</a></p>

<p><a href="https://github.com/moznion/Test-UsedModules">Test::UsedModules</a>は, こちらもまたまたmoznionさんが開発された, 必要のないモジュールを<code>use</code>/<code>require</code>していないか確認してくれるモジュールです.<br/>
このモジュールもPPIで実装されていたので, papix(私)がCompiler::Lexerを使って高速化してみました.<br/>
PPIとCompiler::Lexerの差で随分苦労したのですが, 最終的には何とか完成までこぎつけることができました.<br/>
こちらも, 本家(Test::UsedModules)にマージしてもらうつもりだったのですが... いろいろ忙しくて, その辺りの作業を放置して今に至っています.</p>

<p>とりあえず暫定版が<a href="https://github.com/papix/Test-UsedModules/tree/fast">こちら</a>にありますので, 試してみたい方はどうぞ.</p>

<h2>まとめ</h2>

<p>Compiler::Lexerを活用したモジュールを紹介してみました.<br/>
ここ最近, Compiler::Lexerはかなり安定してきた(以前は時折SEGVったりすることがありました...)と印象を持っているので, モジュールを開発する中でPerlのトーカナイザが必要であれば, 使ってみる価値があると思います.</p>

<p>Compiler::Lexerを含むgoccyさんのプロダクトに要注目ですね!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-21:entry-2013-12-17-compiler-lexer.html</id>
<published>2013-12-17T59:59:00+0900</published>
<updated>2013-12-21T03:27:05+09:00</updated>
</entry>
<entry>
<title type="text">苦いエラーの扱いをちょっとだけええかんじに</title>
<link href="http://hachiojipm.github.io/entry/2013-12-20-bitter-php-error-handling.html" />
<author>
<name>uzulla</name>
</author>
<content><![CDATA[<h1>苦いエラーの扱いをちょっとだけええかんじに</h1>

<p>Hachioji.pm Advent Calendar 2013の何日目かよくわからない記事です。</p>

<p>「残念だったな！PHPの話だよ！」</p>

<p>以下をどうぞ！</p>

<p><a href="http://uzulla.hateblo.jp/entry/2013/12/20/041619">扱いづらいPHPのエラー処理を適当にいなす - uzullaがブログ</a></p>

<p>(moznion SUTAIRU記事ですみません、書いた後にチョイチョイ直すのがだｒ（ry</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-20:entry-2013-12-20-bitter-php-error-handling.html</id>
<published>2013-12-20T33:33:10+0900</published>
<updated>2013-12-20T04:33:10+09:00</updated>
</entry>
<entry>
<title type="text">Perlにおいて配列を逆順にするいくつかの方法</title>
<link href="http://hachiojipm.github.io/entry/2013-12-14-array-reverse.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Perlにおいて配列を逆順にするいくつかの方法</h1>

<p>よくあるアルゴリズム問題ですね。たぶんいろんなところで既出のような気がしますが、昔某氏に教えてもらったことを思い出しながら書きます。</p>

<h2>問題</h2>

<pre><code>my @array = (1..2014);
</code></pre>

<p>という配列があったとして、この並びを逆にするにはどんな方法があるでしょうか？？</p>

<h2>reverseに決まっとるがじゃ！！</h2>

<p>基本的に、マニアでなければPerlの基本的な関数であるreverseを使うと思います。</p>

<pre><code>    my @reversed = reverse @array;
</code></pre>

<h2>プログラム始めました的な人とか</h2>

<h3>popとの合わせ技</h3>

<pre><code>my @reversed;
for  (1..scalar @array) {
    push @reversed,pop @array;
}
</code></pre>

<h3>unshiftとの合わせ技</h3>

<pre><code>my @reversed;
for  my $var (@array) {
    unshift (@reversed,$var);
}
</code></pre>

<p>と、まぁいろいろあるわけですね。</p>

<h2>なんか速そうな技</h2>

<p>で、だいたい最後に出てくるのがこれですね。</p>

<pre><code>my @reversed = @array;
for  my $i (1..int(scalar @array/2)) {
    $reversed[-$i]  = $array[$i-1];
    $reversed[$i-1] = $array[-$i];
}
</code></pre>

<p>なんか、もっときれいに掛けた気がするけど忘れちゃった。。。</p>

<h2>で、ベンチは？</h2>

<p>どれが早いかは、是非、ベンチをとってみてくださいという感じで、古き良きネタのどぶさらいははおしまいー。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-16:entry-2013-12-14-array-reverse.html</id>
<published>2013-12-14T59:59:00+0900</published>
<updated>2013-12-16T17:13:57+09:00</updated>
</entry>
<entry>
<title type="text">PerlにおけるBOM付utf8の扱い</title>
<link href="http://hachiojipm.github.io/entry/2013-12-13-file-bom.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h2>PerlにおけるBOM付utf8の扱い</h2>

<p>ごくごくたまに遭遇するファイルの文字コード扱いでうざいのが、まさに爆弾のBOM付utf8ですが、今日はこいつPerlでいい感じに扱うモジュールの紹介です。</p>

<h2>そもそもBOM付UTF8とは</h2>

<p>BOMとは文字コードの識別用のファイルの先頭につく文字列で、Byte Order Markの略らしいです。</p>

<p>Windowsのメモ帳で保存したファイルとかなんだかよくわからないシステムが吐き出すファイルとかについてきます。</p>

<p>UTF8でBOMつけるメリットはよく知りません。ぼくの知識はそんなもんです。</p>

<h2>File::BOMが便利</h2>

<p>でPerlでよろしくやる方法なんですが、<a href="http://search.cpan.org/~mattlaw/File-BOM-0.14/lib/File/BOM.pm">File::BOM</a>ってモジュールを使います。</p>

<pre><code>#!/usr/bin/env perl
use File::BOM;
open my $fh, "&lt; :encoding(utf8):via(File::BOM)", "hogehoge.csv"
    or die "OutPutByExcel.csv: $!";
</code></pre>

<p>で、こんな感じです。open関数の第三引数とかに「:via(File::BOM)」を加えればいいんですね。そもそも、ぼくはopen関数の第三引数の意味あまりわかっていないので、「つなげられるんだ！」ということに驚きました。</p>

<h2>終わりに</h2>

<p>実は、このネタ<a href="http://hachiojipm.org/?p=548">7月のTakao.mt 2013</a>の夜の飲み会wで相談したら、ytnobodyさんとxtetsujiさんにもろもろアドバイスもらって、これでいいんだって安心したというhachiojipm++な小ネタなのでした。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-14:entry-2013-12-13-file-bom.html</id>
<published>2013-12-13T59:59:00+0900</published>
<updated>2013-12-14T00:05:59+09:00</updated>
</entry>
<entry>
<title type="text">carton bundle &amp;&amp; carton install --cachedの使いどころ</title>
<link href="http://hachiojipm.github.io/entry/2013-12-11-carton-bundle.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>carton bundle &amp;&amp; carton install --cachedの使いどころ</h1>

<p>carton bundleとか「*.tar.gzでモジュールをインストールできて何が嬉しいの？」と疑問に思っていたんですが、この度、carton bundleの使いどころが分かったので、経緯をばしたためておきたいと思います。</p>

<h2>ゆるふわにCarton使うと、installとexecしか使わない</h2>

<p>なんか、いろいろ調べるといろいろ書いてあったりするけど（<a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub/002103?page=2">Carton &amp; cpanm―Perlモジュール管理最新事情（3）| Perl Hackers Hub</a>,<a href="http://blog.livedoor.jp/lestrrat-practical_modern_perl/archives/25002846.html">1.3 Cartonによるアプリケーションの実行環境の構築</a>）
結局のところ、開発環境だろうと本番だろうと以下のようにすれば、Cartonを使ったモジュール管理ができて楽ちんよって感じが普通だと思います。</p>

<pre><code>    cpanm Carton
    #プロジェクトの依存モジュールcpanfileに書く
    carton install #モジュールのインストール
    carton exec -- plackup ./app.psgi
</code></pre>

<p>なので、cartonっていろいろコマンドあるっぽいけど、結局</p>

<ul>
<li>carton install</li>
<li>carton exec</li>
</ul>


<p>の二つを使っておしまいで、他のコマンドの使いどころが意味不明ーって長らく思っていました、すみませんw</p>

<h2>GitHubにあったりのモジュールをDarkPANで入れたプロジェクトで危機に遭遇</h2>

<p>最近、<a href="https://metacpan.org/pod/OrePAN2::Server">OrePAN2::Server</a>っていうOrePAN2のサーバー版をCPANにアップすることが出来まして、意気揚々とこれを使って、社内モジュールをがしがしmyDarkPANにアップしていまして、Carton使う時なんかも</p>

<pre><code>    PERL_CARTON_MIRROR=http://oreprepanan/ carton install
</code></pre>

<p>って感じで、ゴリゴリ入れたんですが、この度初めて社外のVPSにデプロイして運用する機会が生まれまして、「そういや、VPS的な本番環境だと、このオレオレなOrePANサーバーにアクセスできなくね？」って思ったのです。</p>

<p>なんと！！！これは大変な事件だ！！！もう、後数時間後から稼働させるってみんなに言っちゃったのに！！！</p>

<p>で、まず解決策として思いついたのが、cartonが作るlocalごとrsyncで飛ばせばいいやーという案でした。</p>

<p>開発環境と本番環境が同じならこれで済んだとおもんですが、しかし、実はぼくのローカルPCのMySQLのバージョンが5.1で、本番は「最近はせめて5.5くらいにしておきたいよねー」とか頑張っちゃって5.5にしていてたので、実際に、「carton exec -- plackup ./app.psgi」とかして動かしたら、localディレクトリに入っているDBD::mysqlだかなんだかか、libmysqlclient16がないよとかエラーがでてきて、ツンだ感じになりました。。。</p>

<p>「やっぱり本番環境でcarton install掛けなきゃいけないのかーーーつらいなー」と思いつつ、そういやlocalのディレクトリの中見ていたら、cacheって中にモジュールの「*.tar.gz」ファイルがたくさんあって、とりあえず、もうcartonとかわすれて、これをシェルスクリプトで、cpanmでグルグルまわして、とりあえず、ユーザーのPerlディレクトリにつっこんじゃおーって思いつつ、ふと、「そもそもcartonになんかそういう機能あるんじゃね？」って思い、ikasm_aさんに記事を見直したらやっとcarton bundleというコマンドにたどり着きました。</p>

<h2>carton bundle &amp;&amp; carton install --cachedを使ったモジュールのインストールとデプロイ</h2>

<p>とりあえず、リアリティを出すために実際にディレクトリ構成を用いて説明します。</p>

<p>こんな感じのAmon2なディレクトリ構成になっているとして、localにはガッシリ、オレオレなCPANにアップされていないモジュールが入っています。</p>

<pre><code>    Build.PL
    Changes
    META.json
    builder/
    config/
    cpanfile
    cpanfile.snapshot
    daemontools/
    db/
    deploy.process
    lib/
    local/ #carton installで入れたモジュールが入っている
    log/
    minil.toml
    script/
    sql/
    static/
    t/
    tmpl/
    xt/
</code></pre>

<p>で、まず、開発環境でcarton bundleとうちます。</p>

<pre><code>    Build.PL
    Changes
    META.json
    builder/
    config/
    cpanfile
    cpanfile.snapshot
    daemontools/
    db/
    deploy.process
    lib/
    local/ #carton installで入れたモジュールが入っている
    log/
    minil.toml
    script/
    sql/
    static/
    t/
    tmpl/
    vendor/ #carton bundleコマンドでできたディレクトリ
    xt/
</code></pre>

<p>すると、vendorというディレクトリができます。そんで、rsyncを打ちます。</p>

<pre><code>    rsync -avz  --delete --exclude="*.swo" --exclude="*.swp" --exclude='log/*.log.*' --exclude='daemontools/*/log/main' --exclude='daemontools/*/log/supervise' --exclude='daemontools/*/supervise' --exclude=local --exclude=META.yml --exclude=MYMETA.json --exclude=MYMETA.yml --exclude=.carton /home/hirobanex/project/MyApp myapp-server:/home/production/project/
</code></pre>

<p>これで、意味の分からんファイルは同期されれずに、プロジェクトのディレクトリがvendorも含め同期されます。</p>

<p>そんで、以下のように作業します。</p>

<pre><code>    ssh myapp-server #本番サーバーに移動して
    cd /home/production/project/MyApp #プロジェクトTOPに移動
    carton install --deployment --cached ##ここに注目
</code></pre>

<p>「caton install」のオプションとして、「 --cached」っていうのを使うとvendorディレクト内の*.tar.gz圧縮ファイルからモジュールをインストールしてくれるのです。とりあえず、高速かつOrePAN的なモジュールもわざわざOrePANサーバーにアクセスする必要ないので気が楽です。</p>

<p>ちなみに、「--deployment」を付けると、「cpanfile.snapshot」が更新されないので、本番でキモいことにならずに済みます。</p>

<p>蛇足ですが、実際は、以下のようにスクリプトにまとめておけば、小規模環境のプチデプロイスクリプトになり便利。別にサーバー何個もあるわけじゃないから、とりあえず、こんなシェルスクリプトで十分。</p>

<pre><code>    #/bin/sh
    carton bundle
    rsync -avz  --delete .....(上述のため省略)
    ssh myapp-server "cd /home/production/project/MyApp &amp;&amp; /home/production/.plenv/versions/5.x.x/bin/carton install --deployment --cached"
    ssh myapp-server "sudo svc -h /etc/service/myapp-web-server"
    ssh myapp-server "sudo svc -h /etc/service/myapp-admin-server"
    ssh myapp-server "sudo svc -h /etc/service/myapp-worker"
</code></pre>

<h2>carton install --cachedvendorのキャッシュから入れるからマジ楽</h2>

<p>「OrePANとかで運用しているモジュールもないし、おいらには関係のない話だー」と思う人もいるかもですが、新しいプロジェクトに入った時とか、ローカルにcarton installするだけでもマジ時間かかって何していたか忘れるくらいだと思うので、「vendor」ディレクトリもgitでコミットしてしまうか、あるいは、別のサブモジュールとかに切り出すかとかして管理して、新しく入った人も開発環境で、carton install --cachedで依存モジュール落とせばマジで好感度アップ間違いなしだと思う次第です。突然誰かがいじりたいって言っても、vendorディレクトリを適当にどっかにあげて、rsyncでひっぱってもらえば、さくっと入れられるし、なんかtar.gzファイル便利w</p>

<h2>まとめ～carton bundleとcarton install --cachedのつかいどころ～</h2>

<ul>
<li>OrePAN運用モジュールのアクセスの拡張を気にせず、積極的に使える</li>
<li>2番目の人から依存モジュールのインストールが楽ちんに</li>
</ul>


<p>ということで、have nice carton life!!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-10:entry-2013-12-11-carton-bundle.html</id>
<published>2013-12-11T59:59:00+0900</published>
<updated>2013-12-11T23:59:00+09:00</updated>
</entry>
<entry>
<title type="text">MinillaでTravis CIなどのバッヂをREADME.mdに貼り付ける方法</title>
<link href="http://hachiojipm.github.io/entry/2013-12-10-minilla-badge.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>MinillaでTravis CIなどのバッヂをREADME.mdに貼り付ける方法</h1>

<p>Hachioji.pm Advent Calendarもついに10日目. そんな2桁記念日に颯爽と登場したるはpapixです. 今日も宜しくお願い致します.<br/>
今日は時間がないので, 若干あっさり目で行きたいと思います.</p>

<p>...さて. 最近, <a href="https://travis-ci.org/">Travis CI</a>や<a href="https://coveralls.io/">Coveralls</a>を使っている人が増えてきているような気がします.<br/>
これらのサービスは, GitHubのリポジトリを結びつけておくと, 自動的にテストを回してくれたり, テストのカバー率を表示したりしてくれるのでとても便利です.<br/>
更に, GitHubのリポジトリ内のREADME.mdにこれらのバッヂを貼り付けておけば, README.mdの内容はリポジトリのトップページ(?)に表示されるのでこれらの状況をとても確認しやすくなります.</p>

<p>ただ, Minillaでモジュールを管理している場合, README.mdは<code>minil build</code>や<code>minil test</code>をすると自動的に再度生成されるので, その都度バッヂを貼る必要があります.<br/>
かといって, 元のPODにバッヂを貼るのはよろしくないです.</p>

<p>...というのを悩んでいたところ, 実は<code>minil.toml</code>で設定すれば, README.mdに対して自動的にバッヂを生成できる, ということを昨日知りました.<br/>
この設定をしておけば, <code>minil.toml</code>にこういう感じで書けば, <code>minil build</code>や<code>minil test</code>などで再度生成されるREADME.mdに, 自動的にバッヂが貼り付けられます! 便利!!!</p>

<pre><code>badges = ['travis', 'coveralls']  
</code></pre>

<p>badgesを含む<code>minil.toml</code>の設定等々については, <a href="https://github.com/tokuhirom/Minilla#configuration">Minillaのドキュメント</a>に書かれていますので一度読んでみるといいかもしれません.</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/ainame">@ainame</a> minil.tomlにbadgesてのが書けます <a href="https://t.co/TZiPXTYy0J">https://t.co/TZiPXTYy0J</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/statuses/410327396726738944">2013, 12月 10</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今日, こんなやりとりもあったので, 俺得備忘録を兼ねて, Hachioji.pm Advent Calendarでメモさせていただきたいと思います.</p>

<h1>次回予告</h1>

<p>明日は再び@hirobanexさんが登場の予定です! お楽しみに.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-11:entry-2013-12-10-minilla-badge.html</id>
<published>2013-12-10T59:59:00+0900</published>
<updated>2013-12-11T02:47:32+09:00</updated>
</entry>
<entry>
<title type="text">x秒後に消滅するpsgiプロセスをPerlで実装したい</title>
<link href="http://hachiojipm.github.io/entry/2013-12-09-alerm-tips.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>x秒後に消滅するpsgiプロセスをPerlで実装したい</h1>

<p>plackupして放置しているプロセスとかそういうのいい感じに消えてほしいのですが、そいうやつの実装についてのアイデアと疑問をば。</p>

<h2>前置き：要件的なやつ</h2>

<p>例えばですが、自分のローカルPCの中にたくさんのプロジェクトが入っていて、それらのプロジェクトを個別に詳しく機能追加とかするわけじゃないんだけど、それぞれの管理画面だけどんなんだったかな？って眺めてみたいとして、一枚の一覧HTMLだけたちあげておいて、そここからリンクをクリックすれば、適当に空いているportゲットして個別のプロジェクトの管理画面用のpsgiファイルをplackupしてそのURLにリダイレクトするみたいなのがほしいとします。</p>

<p>ただ、このとき、いろんなportをばかばかと使ってプロセスが立ち上がりっぱなしになると痛いので、立ち上げたpsgiのプロセスがいい感じに消えてほしいわけですね。</p>

<p>つまり、以下のようなイメージですね。</p>

<ul>
<li>http://project_admin:8080/luancher/my_app_1にアクセスする</li>
<li>/luancherのエンドポイントで、いい感じにport取得し、system("plackup ./somepath/my_app_1.psgi -p $port -L Shotgun")的なことして、http://project_admin:$port/にリダイレクト</li>
<li>その後、my_app_1.psgiはいい感じに消滅</li>
</ul>


<p>さて、具体的なイメージわきましたでしょうか（笑）まぁ意味不明ですね。。。</p>

<p>とりあえず、いい感じにportを取得するのは、テストでもないですが、Test::TCPに任せるか、内部で使っているportとってくるモジュールでも使えばいいとして、問題は、「psgiがいい感じに消滅」です。</p>

<h2>いい感じに消滅　≒　起動にalarmで指定した秒後に消滅</h2>

<p>こんなURL「/luancher?project=HogeProject&amp;psgi_path=script/app.psgi」にアクセスすると、以下のようなコントローラーにとおって</p>

<pre><code>    ### MyAdmin::Web::C::Luancher
    use Test::TCP;
    use IO::Interface::Simple;

    sub run {
        my ($class,$c) = @_;

        my $project   = $c-&gt;req-&gt;param('project');
        my $psgi_path = $c-&gt;req-&gt;param('psgi_path');


        my $server = Test::TCP-&gt;new(
            code =&gt; sub {
                my $port = shift;
                system("perl ./script/psgi/proclet.pl $project $psgi_path $port");
            },
        );

        $c-&gt;redirect("http://".IO::Interface::Simple-&gt;new('eth0')-&gt;address.":".$server-&gt;port());
    }
</code></pre>

<p>以下のような「assets/script/psgi/proclet.pl」をたたくって感じですね。ちょっとそれますが、「IO::Interface::Simple」とか何気覚えておきたい便利モジュールですね。あと、なんかもうTest::TCPを直使いしてますが、昔のやっつけコードなので記念に残しておきますw</p>

<pre><code>    ### assets/script/psgi/proclet.pl

    use strict;
    use warnings;
    use Proclet;

    my $project   = $ARGV[0];
    my $psgi_path = $ARGV[1];
    my $port      = $ARGV[2];

    local $SIG{ALRM} = sub { kill 'TERM',$$; };

    alarm $timeout;

    my $proclet = Proclet-&gt;new(color =&gt; 1);

    $proclet-&gt;service(
        tag  =&gt; 'psgi',
        code =&gt; "cd /home/hirobanex/project/$project &amp;&amp; plackup $psgi_path -L Shotgun -p $port",
    );

    $proclet-&gt;run;
</code></pre>

<p>ポイントは、あえてProcletでラップしたスクリプト内でalermの設定をしてをたたくということですね。</p>

<p>立ち上げるPSGIプロセスは、なんとなく-L Shotgunとか-Rとかつけたいのですが、これって内部でフォークしているので、素のpsgiファイルにalerm仕込んでも、子プロセスが死ぬだけで親プロセスが残っちゃうんですねー。</p>

<p>Procletでラップしてあげることで、親プロセス毎まるっと、alermで死ぬという感じです。</p>

<h2>いい感じに消滅　≒　アクセスがあった時から指定した秒後に消滅</h2>

<p>上記の方法でもいいんですが、そうすると30分とか1時間とかある程度まとまった時間をいれておかないと使いずらい気がするのですが、そうすると細かくプロセスを立ち上げまくっていくとportが埋まってしまいそうな恐怖感（あくまで恐怖感）に陥ります。</p>

<p>で、アクセスがあるたびに毎回消滅時間が延長されるというか、リセットされたほうが筋が良い実装な気がするんですね。</p>

<p>ただ、どうやっていいのか思いつかず。。。。苦笑</p>

<p>AnyEventとかでイベント実装すればいい気がするんですが、AnyEventって全く使っていなくてよくわかんす。。。</p>

<p>今回のケースではここまで頑張らなくていい気もしますが、なんかこういうことがいい感じにできると、何か応用できそうな・・・・という気がしたりです。</p>

<h2>結び</h2>

<p>結局、「alermの紹介じゃないっすか」って感じの記事になってしまいましたが、まぁ「select」とか「fork」とかUnixネイティブなオーラの漂う関数ってCとかやっていないとヒヤっとするので、そういうのPerlから入門していく電子書籍とかあるとうれしいなーと思いますので、誰か記事書いてくださいーw</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-09:entry-2013-12-09-alerm-tips.html</id>
<published>2013-12-09T59:59:00+0900</published>
<updated>2013-12-09T23:59:00+09:00</updated>
</entry>
<entry>
<title type="text">usui-paren.vimってやつを書いた</title>
<link href="http://hachiojipm.github.io/entry/2013-12-08-usui-paren-vim.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>usui-paren.vimってやつを書いた</h1>

<p>Hachioji.pm Advent Calendarの8日目の記事です．<br/>
以下をどうぞ！</p>

<p><a href="http://moznion.hatenadiary.com/entry/2013/12/08/230734">usui-paren.vimってやつを書いた - その手の平は尻もつかめるさ</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-08:entry-2013-12-08-usui-paren-vim.html</id>
<published>2013-12-08T12:12:59+0900</published>
<updated>2013-12-08T23:12:59+09:00</updated>
</entry>
<entry>
<title type="text">Time::PieceのParseで%zを使うのは無理ゲー</title>
<link href="http://hachiojipm.github.io/entry/2013-12-07-time-piece-trap.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Time::PieceのParseで%zを使うのは無理ゲー</h1>

<p>「タイムゾーンマタギはおいておいて、そうでないケースにおいて、Date::Timeはオワコンで、Time::Pieceが主流」的なノリになってからだいぶ長いですが、最近やっとTime::Pieceを使い始めたのですが、メールのヘッダーのDateのところをぴっぱろうとしたらはまったんで、そのあたりをまとめておきます。あまり、直接的なタイトルの日本語記事がなかったので。</p>

<h2>ダメのコード</h2>

<p>さて、問題となる具体的なコードは以下です。</p>

<pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Time::Piece;

{
    my $datetime = "Thu, 28 Nov 2013 18:32:29 +0900 (JST)";
    my $t = localtime(Time::Piece-&gt;strptime($datetime,'%a, %d %h %Y %H:%M:%S %z (%Z)'));
    warn $t-&gt;datetime; # 2013-11-28T09:32:29
}

{
    my $datetime = "Thu, 28 Nov 2013 18:32:29";
    my $t = localtime(Time::Piece-&gt;strptime($datetime,'%a, %d %h %Y %H:%M:%S'));
    warn $t-&gt;datetime; # 2013-11-28T18:32:29
}
</code></pre>

<p><a href="http://www2u.biglobe.ne.jp/MAS/perl/waza/strftime.html">日付の書式指定</a>にあるように、日付をいろいろパースするときの記号はいろいろあるわけですが、「%z」という「+0900」という「タイムゾーンのGMTへのオフセット時間」ってやつが、Time::Pieceでうまくいかないのはご存知でしょうか。</p>

<p>下の方ではしっかりパースできるのに、上の「+0900 (JST)」のコードのほうが、見事に9時間ズレてしまっています。</p>

<h2>既存文献と対応方法</h2>

<p>重要な問題だからこそでしょうが<a href="http://blog.64p.org/entry/2013/03/01/112510">Time::Piece::strftime and time zone issue</a>という英語の記事でtokuhiromさんが、問題と対応方法を書いているんですが、なんかややっこしいので、どうしたものかと思ったら、sonmguさんが、<a href="http://search.cpan.org/~gaas/HTTP-Date-6.02/lib/HTTP/Date.pm">HTTP::Date</a>を使うのがいいかもねって教えてもらったので、ぼくはそうしました。</p>

<pre><code>use HTTP::Date;

my $datetime = "Thu, 28 Nov 2013 18:32:29 +0900 (JST)";
my $t = localtime(HTTP::Date::str2time(HTTP::Date::parse_date($datetime)));
warn $t-&gt;datetime; # 2013-11-28T18:32:29 
</code></pre>

<p>まぁ便利でわかりやすい。Date::Time使うのとCPUとかメモリのコストがどれほど違うのかよくわかりませんが、わかりやすさ間違いないでしょう。毎度、sonmgu++という感じでいつか恩返ししなきゃいけないところです。</p>

<h2>終わりに</h2>

<p>日付周りのモジュールは何が何だったかすっかり忘れてことが多いので、しっかりメモっておきたい今日この頃です。</p>

<p>こういう軽いTipsをこちこちやっていきたいところです。年末はたくさんアドベントカレンダーあるんで、ちょっと胃もたれがちですからねー。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-07:entry-2013-12-07-time-piece-trap.html</id>
<published>2013-12-07T27:27:37+0900</published>
<updated>2013-12-07T19:27:37+09:00</updated>
</entry>
<entry>
<title type="text">App::Nakachanを作ってみた</title>
<link href="http://hachiojipm.github.io/entry/2013-12-06-nakachan.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>App::Nakachanを作ってみた</h1>

<p><strong>気合! 入れて! 書きます!!!</strong></p>

<p>...という訳で皆様, 師走ですね. アドベントカレンダーの時期ですね.<br/>
本日は, Hachioji.pm Advent Calendar 兼 <a href="http://atnd.org/events/45245">艦これAdvent Calendar</a>の6日目という事でお送りしていきます.</p>

<p>さて皆さん. 突然ですが, ｢遠征｣の情報ってどうやって確認していますか?<br/>
移動時間や作業時間の間に, 愛しい艦娘が提督の為に資源をかき集めてくれる遠征は, 艦これの醍醐味(?)であり, もはやなくてはならない要素の1つです.</p>

<p>要求Lv, 所要時間, 報酬, 遠征を成功させる為に必要な編成... 遠征を効率よく, かつ失敗させずに行う為には, 遠征に関する諸々の情報を覚えておく必要があるのですが, 流石にこれらを全て覚えているのは, 記憶力のいい人か<strong>艦これ廃人</strong>のいずれかだと思います.<br/>
おそらく多くの方は<a href="http://wikiwiki.jp/kancolle/?%B1%F3%C0%AC">｢艦隊これくしょん -艦これ- 攻略Wiki｣の遠征ページ</a>とかで確認しているのではないでしょうか.</p>

<p>今回は, 艦これの遠征に関する情報をコマンドラインで確認できるツール, ｢App::Nakachan｣というものを作ってみたので, 紹介したいと思います.<br/>
余談ですが, ここのところ学会論文や修士論文の執筆に追われていて, App::Nakachanを完成させる為に久々に2時間程度コーディングをしたのですが, <strong>とても楽しかったです.</strong></p>

<h2>App::Nakachanのインストール</h2>

<p>App::Nakachanのコードは, githubで公開しています.</p>

<p><a href="https://github.com/papix/App-Nakachan">https://github.com/papix/App-Nakachan</a></p>

<p>Perlで書いているので, <strong>よしなにインストールしましょう.</strong></p>

<h2>App::Nakachanの使い方</h2>

<p>App::Nakachanをインストールすると, <code>nakachan</code>コマンドが使えるようになります.<br/>
とりあえず今日のアドベントカレンダーに間に合わせる為に機能はあまりありません.</p>

<p><code>nakachan --id 4</code>と打ち込むと, 遠征IDが4である遠征の情報が表示されます.</p>

<pre><code>$ nakachan --id 4  
Select: Expedition - ID: 4  
========================================  
04 - [D] 対潜警戒任務 (鎮守府海域) / 要求Lv 3 / 所要時間 00:50:00  
  報酬: 石油 0 / 弾薬 60 / 鋼材 0 / ボーキ 0  
        高速修復材 0,1  
  編成: 全3隻 軽1隻, 駆2隻  
  消費: 燃料 5目盛り / 弾薬 0目盛り  
</code></pre>

<p>また, <code>nakachan --area [0-4]</code>と打ち込むと, 該当する海域の遠征を全て見ることができます.<br/>
ちなみに, 0が鎮守府海域, 1が南西諸島海域, 2が北方海域, 3が西方海域, 4が南方海域です.</p>

<pre><code>$ perl -Ilib bin/nakachan --area 4  
Select: Expedition - Area ID: 4  
========================================  
33 - [E] 前衛支援任務 (南方海域) / 要求Lv unknown / 所要時間 00:15:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 0 / ボーキ 0  
  編成: 全2隻 駆2隻  
  消費: 燃料 5目盛り / 弾薬 4,8目盛り  
========================================  
34 - [E] 艦隊決戦支援任務 (南方海域) / 要求Lv unknown / 所要時間 00:30:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 0 / ボーキ 0  
  編成: 全2隻 駆2隻  
  消費: 燃料 5目盛り / 弾薬 4,8目盛り  
========================================  
35 - [S] MO作戦 (南方海域) / 要求Lv 40 / 所要時間 07:00:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 240 / ボーキ 280  
        (開発資材 0,1)  
  編成: 全6隻 空母2隻, 駆1隻, 重1隻  
  消費: 燃料 8目盛り / 弾薬 8目盛り  
========================================  
36 - [S] 水上機基地建設 (南方海域) / 要求Lv 30 / 所要時間 09:00:00  
  報酬: 石油 300 / 弾薬 0 / 鋼材 150 / ボーキ 150  
        (高速修復材 0,1)  
  編成: 全6隻 水母2隻, 軽1隻, 駆1隻  
  消費: 燃料 8目盛り / 弾薬 8目盛り  
========================================  
</code></pre>

<p>便利... なのか...?<br/>
将来的には, ｢あるを効率良く獲得できる遠征一覧｣とかを出せるようにすれば, もっと便利になりそうです.</p>

<h2>まとめ</h2>

<p>艦これの遠征情報をコマンドラインで確認するツール, ｢App::Nakachan｣を作ってみました.<br/>
今日のアドベントカレンダーに間に合わせるために2時間でガサっと実装した機能だけでは, 正直そこまでありがたみがないので, 細かい検索を出来るようにしたり, あるいは艦娘のステータス情報とかも検索･表示できるようになればいいなー, と思っています.</p>

<p>というわけで, 明日の艦これアドベントカレンダーは@pugiemonnさん, 明日のHachioji.pm Advent Calendarは@hirobanexさんの予定です. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-06:entry-2013-12-06-nakachan.html</id>
<published>2013-12-06T36:36:45+0900</published>
<updated>2013-12-06T00:44:30+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜北海道/フェリー編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-04-travel04.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜北海道/フェリー編〜</h1>

<p><font size='1'>
　　　　∩＿∩　　　　　人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人<br/>
　　 ／ ＼ ／＼　　　＜ すごいアドベントカレンダーを感じる。今までにない何か熱いアドベントカレンダーを。　＞<br/>
　　|　 （ﾟ）=（ﾟ）　|　　 ＜ 記事・・・なんだろう増えてきてる確実に、着実に、25日に向けて。.　　　　　　　　　　　　　＞<br/>
　　|　　●_●　 |　　 ＜ 中途半端はやめよう、とにかく最後までやってやろうじゃん。　　　　　　　　　　　　　　　　　 ＞<br/>
　/　　　　　　　　ヽ　 ＜ Yanchaの向こうには沢山の仲間がいる。決して一人じゃない。　　　　　　　　　　　　　　　 ＞<br/>
　| 〃 ------ ヾ　|　＜ 信じよう。そしてともに記事を書こう。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 ＞<br/>
　＼＿＿二＿＿ノ　 ＜ ツッコミや邪魔は入るだろうけど、絶対にくじけるなよ。　　　　　　　　　　　　　　　　　　　　＞<br/>
　　　　　　　　　　　　　 ＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹ
</font></p>

<p>...というわけで(どういう訳だ), Hachioji.pm Advent Calendarの4日目です.<br/>
@bool_foolにはお願いしてみたのですが, ｢パワハラ!!!｣と力強く断られてしまったので, 今日も私が担当致します.<br/>
今日は, 昨日宣言しました通り, フェリーを使った北海道への格安移動手段を紹介したいと思います.</p>

<p>さて, 関東から北海道へ向けてフェリーで移動する場合, 大きく分けて2つの選択肢が候補となります.<br/>
一つは新潟から日本海を経由して小樽へ向かうルート, もうひとつは大洗から太平洋を経由して苫小牧へ移動するルートです.<br/>
というわけで, 今回はこの2ルートについて紹介したいと思います.</p>

<h2>日本海ルート</h2>

<p>新潟から北海道を結ぶ船舶としては, ｢<a href="http://www.snf.jp/">新日本海フェリー</a>｣が新潟〜小樽航路を運行しています.<br/>
新潟から小樽への便は火曜日から日曜日に運航されており, 朝10:30に新潟港を出て, 翌日04:30に小樽に到着するスケジュールで運航しています.<br/>
小樽から新潟への便も火曜日から日曜日に運航されていますが, 日曜日とそれ以外で運行スケジュールが異なっていて, 火曜日〜土曜日は小樽を10:30に出発して新潟着は翌日06:00, 日曜日は19:30小樽発翌15:30新潟着, というスケジュールになっています.</p>

<p>もう1つ, 新日本海フェリーは新潟〜苫小牧東港を秋田経由で結ぶ便(日によっては敦賀始発･終着)もありますが, ダイヤが複雑な上, 秋田に寄港する分所要時間がかかるのでオススメしません.<br/>
加えて, 小樽〜札幌と苫小牧〜札幌で言えば, 明らかに小樽から札幌の方が移動しやすいので, 苫小牧に行く用事がないのであれば, 新潟〜小樽航路を利用するのが賢い選択だと思います.</p>

<h2>太平洋ルート</h2>

<p>一方, 太平洋から北海道へ行く場合, ｢商船三井フェリー｣を使う事になるでしょう.<br/>
大洗と苫小牧を結ぶ船舶を1日2便運行していて, 大洗発は18:30発〜翌13:3着と01:45発〜19:45着, 苫小牧発は18:45発〜翌14:00着と10:30発〜19:45着のスケジュールとなっています.</p>

<h2>関西から北海道へ</h2>

<p>一方, 関西から北海道を目指す場合, ｢新日本海フェリー｣の舞鶴〜小樽航路を使うのが便利です.<br/>
運休日はあるものの, 基本的には毎日運航しており, 00:05舞鶴発〜20:45小樽着と, 23:30小樽発〜21:15舞鶴着のスケジュールで運航しています.<br/>
特定日のみではありますが, 敦賀〜小樽航路や舞鶴〜苫小牧航路もあるようです.</p>

<p>また, 太平洋経由で｢<a href="http://www.taiheiyo-ferry.co.jp/">太平洋フェリー</a>｣を利用するという手もあります.<br/>
19:00名古屋発〜翌16:40仙台着, 19:40仙台発〜翌11:00苫小牧着と, 苫小牧19:00発〜翌10:00仙台着, 12:50仙台発〜翌10:30名古屋着, というスケジュールで運航しています.<br/>
太平洋側ルートとは異なり, 船上で2泊する必要はありますが, 太平洋フェリーの｢きそ｣, ｢いしかり｣及び｢きたかみ｣は船の内装やサービスが非常に良いので, ｢慌ただしい日常から離れた, ゆったりとした時間｣を過ごすには最適な選択肢になるでしょう.</p>

<h2>船舶の料金</h2>

<p>一番安い船室を選んだ場合, 閑散期であれば新日本海フェリー(新潟〜小樽)で6300円, 商船三井フェリー(大洗〜苫小牧)で8500円が片道の料金となります.<br/>
但し, 会社によっては(閑散期限定の場合が多いですが)早期予約や学割, 往復といった各種割引を適用することで, 40%〜50%の割引料金で利用できる場合もあります.</p>

<p>例えば, 新日本海フェリーの新潟〜小樽･苫小牧航路では, 現在｢<a href="http://www.snf.jp/news/whatsnew/925">新潟寄港40週年プレシーズン割</a>｣というインターネット限定の割引を行なっており, 新潟〜小樽･苫小牧航路を往復で利用することで, 一番安い船室であるツーリストJが片道3,300円で利用できるようになったりします.<br/>
また太平洋フェリーの場合, 乗船日28日前までの予約で最大50%割引となる｢<a href="http://www.taiheiyo-ferry.co.jp/unchin/plan06.html">早割</a>｣が用意されています.</p>

<p>料金や割引制度については, 時期によって変わることがありますので, 各社ホームページ等でしっかり確認するようにして下さい.</p>

<h2>船舶利用時の注意点</h2>

<p>船舶を利用する際に注意すべき点は, ｢駅から港までの移動手段｣です.<br/>
小樽港や大洗港は, 徒歩圏内になんとか駅がありますが, 新潟駅や苫小牧駅はバス等の公共交通機関を利用する必要があります.<br/>
駅から港まで, 或いは港から駅までのバスは, 便数が少ない(場合によっては, 利用できる時間に運転しているバスがない)場合があるので, 予約前に接続可能な公共交通期間についてしっかり確認しておく必要があります.<br/>
港からのバス路線等については, 各社ホームページに掲載されていることが多いです.</p>

<p>また, 商船三井フェリーでは, <a href="http://www.sunflower.co.jp/ferry/campaign/story/index.shtml">フェリーと高速バスの連絡切符</a>を用意しており, 東京から大洗までと, 苫小牧から札幌, 小樽, 旭川の間を, 高速バスを利用して移動することができるようです.<br/>
このような企画を利用するという手もアリでしょう.</p>

<h2>まとめ</h2>

<p>簡単ではありますが, 船舶を利用して北海道へ向かう方法についてまとめてみました.<br/>
船舶の旅は, 利用する航路(と会社)によって, 発着時間や料金プラン, 割引制度, 船室のクオリティなど異なりますので, 事前に利用する会社のホームページで確認しておくことが大切になります.</p>

<p>船舶の旅は時間こそかかりますが, 航空機を使うよりも安い上, 鉄道よりも楽(乗り換えが不要)です.<br/>
何より, 船上で海を眺めながらゆったりとした時間を過ごす... というのは, 非常に心が落ち着くので, 精神衛生的にも良いです.</p>

<p>...ちなみに携帯電話の電波ですが, 案外繋がります.<br/>
以前, 太平洋フェリーで名古屋から苫小牧へ移動した際は, 青森〜苫小牧の一部区間を除けば, ほとんどauの3G回線を拾ってインターネットが使えました.</p>

<p>というわけで奇跡的にまだまだ続いているHachioji.pm Advent Calendar, 明日はなんと! 初めてpapix以外の方が執筆します!!!<br/>
明日の担当は@ytnobodyさん, 一体どのようなお話が聞けるのでしょうか. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-06:entry-2013-12-04-travel04.html</id>
<published>2013-12-04T59:59:00+0900</published>
<updated>2013-12-06T00:40:01+09:00</updated>
</entry>
<entry>
<title type="text">Hackを支える作業用BGM事情</title>
<link href="http://hachiojipm.github.io/entry/2013-12-05-shoutcast.html" />
<author>
<name>ytnobody</name>
</author>
<content><![CDATA[<h1>Hackを支える作業用BGM事情</h1>

<h2>作業用BGMが支えてきた僕のOSSプロジェクト</h2>

<p>こんばんはこんばんは！おしさしぶりですね！<a href="http://ytnobody.net/">ytnobody</a>です！</p>

<p>さて、みなさん素敵なHackしてますか？！</p>

<p>ぼくは今年は<a href="https://github.com/testament-testing-env/Testament">Testament</a>(test向け仮想環境構築ツール、最近は放置プレイ)とか<a href="https://github.com/nephia/Nephia">Nephia</a>(マイクロコア・WAF)あたりに結構リソースを注ぎました。</p>

<p>で、じつはぼく、作業用BGMが無いとなかなか思考が働いてくれません。</p>

<p>そんなもんで、これらのプロジェクトのコードを書くときには大体何かしらの音楽を聴きながら作業してきたわけですが、毎回同じ楽曲だと人間飽きてくるもの。かと言って、毎週iTunesで新しいアルバムを3つ4つ購入できるほど潤沢な資金があるわけでもないですし、むしろそれだと自分の気に入った楽曲ばかりになって、やっぱりそのうち飽きるのが見え見えです。</p>

<h2>お金もそんなにない、でも毎回同じ曲は飽きる・・・</h2>

<p>じゃあどうするか。答えは簡単。「作業用BGMとして適度にWebラジオを取り入れようじゃないか」。</p>

<h2>Webラジオを聴くための環境</h2>

<p>僕の場合は大体iPhoneで<a href="http://tunein.com/">TuneIn Radio</a>というアプリを使って聴いています。</p>

<p>ほかにはiTunesでもいいですし、Windowsの方ならMedia Playerという選択肢もあると思います。</p>

<p>TuneInのいいところとかそういうのは、各種レビューサイトでも見てもらえればと思いますが、ざっくり言うと、検索して出てくる放送局の数が結構多くていい感じっていうところでしょうか。</p>

<h2>趣味丸出し！ytnobodyが聴いてる放送局</h2>

<p>ここから先は僕の趣味をひけらかすところになっちゃいますけど、興味のある方はどうぞ読み進めてください。</p>

<h3>Rising Metal (ヘヴィメタル)</h3>

<p>常習性:★★★★  万人受け:★★ メタル魂:★★★★★</p>

<p><a href="http://www.rising-metal.com/">http://www.rising-metal.com/</a></p>

<p>メタルミュージックなら大体ここですね。ANTHRAX, Children Of Bodom, CARCASSというスラッシュメタル、デスメタルから、 SONATA ARCTICA, ANGRA, RHAPSODYといったスピメロ、シンフォニックメタルまで幅広くカヴァー。</p>

<p>メタルが好きなら、常用すること請け合いでしょう。</p>

<h3>Groove Salad (アンビエント/チル)</h3>

<p>常習性:★★★ 万人受け:★★★ シャレオツ感:★★★★</p>

<p><a href="http://somafm.com/groovesalad/">http://somafm.com/groovesalad/</a></p>

<p>SomaFMというネットラジオ曲の中のチャンネルの一つ。多分超有名どころ。</p>

<p>リズミカルかつ落ち着いた雰囲気のシャレオツな楽曲ばかり垂れ流しています。リラックスムードにはいいかも。</p>

<h3>[DI] Chiptunes (チップチューン)</h3>

<p>常習性:★★★★ 万人受け:★ 8bitっぷり:★★★★★</p>

<p><a href="http://www.di.fm/chiptunes">http://www.di.fm/chiptunes</a>(音に注意)</p>

<p>チップチューンというのを手っ取り早く説明するなら、ファミコンっぽい音源を中心に構成された楽曲のことですね。</p>

<p>もともと僕はYMCKという日本のチップチューンユニット(元々は違うはず)のファンなのですが、もっとチップチューンを聴きたい！というときには、ここをおすすめします。</p>

<p>ちなみに、ここの[DI]とは Digitally Imported というサイトの頭文字です。SomaFM同様、ここも色々なチャンネルを運営している様なので、気になる方はぜひ探検してみてはいかがでしょうか。</p>

<h3>Calm Radio - JS Bach (クラシック)</h3>

<p>常習性:★★★★★ 万人受け:★★★★ 覚醒機能:★</p>

<p><a href="http://tunein.com/radio/Calm-Radio---JS-Bach-s177684/">http://tunein.com/radio/Calm-Radio---JS-Bach-s177684/</a>(音に注意)</p>

<p>名前を見ての通り、かの偉大な作曲家である「バッハ」の曲ばかり垂れ流しています。</p>

<p>クラシックミュージックの中では、僕は特にショパンとバッハが大好きです（ただし詳しくない）。</p>

<p>ただし、眠い時に聴くと誘眠作用があるのか、とても眠くなる可能性も高いです。偉大過ぎる。</p>

<h3>Final Fantasy Radio (ゲームミュージック)</h3>

<p>常習性:★★★ 万人受け:★★★ エオルゼアへの憧れ:★</p>

<p><a href="http://finalfantasyradio.co/">http://finalfantasyradio.co/</a></p>

<p>なんとなくドメインが不穏な雰囲気ありますが、みんな大好き(?)FF関連の音楽ばかり垂れ流しているラジオ局です。</p>

<p>極まれに聴いたりしますが、ゲームミュージックが集中力に与える効果は絶大らしく、多分Hackとの相性は一番良いのではないでしょうか。</p>

<p>ただ、これを聴いてもエオルゼアにいきたいなぁ～とはならないです。</p>

<h2>最後に</h2>

<p>だばだばぁ～っと紹介していきましたが、今回は本当に技術とはまったく関係の無い話題でしたね！</p>

<p>さーて、次回のはちぴーアドベントカレンダーは、またしても大御所P氏こと<strong>papix</strong>さんが書いてくれるらしいですよ！お楽しみに！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-05:entry-2013-12-05-shoutcast.html</id>
<published>2013-12-05T10:10:44+0900</published>
<updated>2013-12-05T20:10:44+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜首都圏宿泊施設編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-01-travel01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜首都圏宿泊施設編〜</h1>

<p>というわけでスタートしてしまった｢Hachioji.pm Advent Calendar 2013｣の第1日目, 先陣はこの私, papixが切らせて頂きます!<br/>
...というか, これから先, 一緒にこのアドベントカレンダーを書いてくれる人がいなければ, 30日分(25日分)を全部自分が書かないといけない感じになってしまったので, 皆さん積極的に書いて行きましょう...!</p>

<p>以下, その経緯です.</p>

<p><img src="http://hachiojipm.github.io/static/image/hachioji-advent-2013.png" alt="適当〜" /></p>

<p>今回の教訓は, <strong>勢いで適当な事を言うと後で後悔する</strong>, ということですね!</p>

<h2>首都圏の格安宿泊施設</h2>

<p>首都圏含め, 地域PMに行く際の宿泊先として, まず候補に上がるのは知人の家でしょう.<br/>
家族, 親族, 友人などがその行き先に住んでいるならば, 交通費さえなんとかすれば宿泊費はほぼ0に抑えることができます.</p>

<p>ただ, 諸々の都合(例えば部屋が狭いとか, お子さん等々の家族がいるとか...)で泊めてもらうのが難しい場合も多々ありますし, そもそも行く先々に親族や友人が必ずいるとは限りません.<br/>
という訳で, 今回は首都圏, 特にPerl関連の会社が多数存在する山手線の西側エリア(新宿〜渋谷〜品川)近辺を中心とした, 格安宿泊施設情報をまとめてみました.</p>

<h2>漫画喫茶</h2>

<p>自分が知る限り, 山手線の西側にある駅の徒歩圏内でかなり安い漫画喫茶は, <a href="http://www.utahiro.com/store/storelist/storeinfo/tabid/64/pdid/0206/Default.aspx">｢カラNET24 新宿三丁目店｣</a>です.<br/>
新宿駅から靖国通りを東に向かって, 明治通りと重なる新宿五丁目交差点の角にある漫画喫茶です.<br/>
雨天時は, 新宿三丁目駅のE3, E4出口から明治通りを北に行けば, 地上の移動距離は最短になります.</p>

<p>このお店の料金プランはこんな感じです.</p>

<hr />

<table>
<thead>
<tr>
<th style="text-align:left;"> 時間   </th>
<th style="text-align:left;"> 料金  </th>
<th style="text-align:left;"> 備考                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 3時間  </td>
<td style="text-align:left;"> 580円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前680円  </td>
</tr>
<tr>
<td style="text-align:left;"> 8時間  </td>
<td style="text-align:left;"> 780円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前980円  </td>
</tr>
<tr>
<td style="text-align:left;"> 12時間 </td>
<td style="text-align:left;"> 980円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前1280円 </td>
</tr>
</tbody>
</table>


<hr />

<p>｢PC席のみ金土日祝全+200円｣となっていますが, この店舗でPC席を利用するメリットは0に近いです.<br/>
｢PC席｣とそうでない席の違いはPCが置いてあるか否かだけなので, どうせこのブログを読んでいるような人は常時ノートPCと, デザリング可能な機器 or WiFi/WiMAXルータを持っているでしょうから問題ありません, よね!<br/>
また, ｢PC席｣はもちろん, そうでない席も自由に利用可能なコンセントがあるので, ノートPCや携帯の充電の心配もありません.<br/>
更に更に, ｢PC席｣は都条例の問題で会員登録をして毎回会員証を提示する必要があるのですが, ｢PC席｣でない場合は会員登録も会員証の提示も必要ない... っぽいです.</p>

<p>複数プランを重ねたり(例えば, 8時間プラン+8時間パックで16時間, とか)できるので, 結構柔軟に滞在できますし, 各ブースに鍵が付いている(但し外側から閉じれない)ので, 盗難の心配も, 他店の鍵がないブースに比べれば低いです.</p>

<p>山手線西側エリアにある同系列の漫画喫茶としては, 他に渋谷の<a href="http://www.utahiro.com/store/storelist/storeinfo/tabid/64/pdid/0204/Default.aspx">｢カラNET24 渋谷道玄坂店｣</a>と池袋の｢まんが広場 北池袋店｣がありますが, 前者は1500円, 後者は12時間1180円で, 新宿三丁目店に比べるとやや値段が高いです.<br/>
が, ｢朝早くにヒカリエに行く｣などという場合, 新宿三丁目店に泊まると東京の朝ラッシュに巻き込まれる事になるので, 若干コストがかかりますが, 渋谷道玄坂店を使うという手も考慮する価値が出てくると思います.</p>

<p>余談ですが, 新宿三丁目店の近くには, <a href="http://www.koukaiya.co.jp/">｢航海屋｣</a>というラーメン屋の新宿店があります.<br/>
この店のチャーシューおこわがとてもとても美味なので, 是非行きましょう!<br/>
チャーシューおこわは2回おかわりできるので, 1杯目は普通に, 2杯目は辛い薬味を乗せて, 3杯目はつけ麺のスープと薬味でお茶漬け風にして頂くと, 最高です.</p>

<h2>ホテル</h2>

<p>ホテルは, 何となく<a href="http://travel.rakuten.co.jp/">｢楽天トラベル｣</a>で検索することが多いです. 割と格安なホテルも載っています.</p>

<p>｢山手線西側エリア｣からは外れますが, 入谷駅(上野駅からメトロ日比谷線で1駅)の近くにある, <a href="http://hotelink.co.jp/iriya/">｢入谷ステーションホテル｣</a>はかなり頻繁に利用していました.<br/>
このホテルには, ｢学生応援学割プラン｣があり, シングルなら曜日を問わず<a href="https://asp.hotel-story.ne.jp/ver3d/ASPP0200.asp?hidSELECTPLAN=29963&amp;hidSELECTCOD1=65830&amp;hidSELECTCOD2=001">2980円</a>, カプセルなら<a href="https://asp.hotel-story.ne.jp/ver3d/ASPP0200.asp?hidSELECTPLAN=29962&amp;hidSELECTCOD1=65830&amp;hidSELECTCOD2=001">1600円</a>で一泊することができます.</p>

<p>建物はそれほど綺麗ではありませんが, 鍵付きで, プライバシーのある空間(?)を確保したいのであれば, オススメです.</p>

<h2>カプセルホテル</h2>

<p>格安で泊まる手法としてはカプセルホテルもあります.<br/>
ただ, 広島のカプセルホテルの風呂で, 見知らぬオッサンに｢なあ, 兄ちゃん. サウナ行こうや...｣と誘われて身の危険を感じて以来, あまり行かなくなりました.<br/>
カプセルホテルはネットカフェに比べてお風呂が豪華なのですが, カプセルが小さくて圧迫感がある事, 何よりカプセル内にコンセントがない事が多いのも問題です.</p>

<p>ただ, 最近徐々に増えつつある｢キャビンタイプ｣と呼ばれるタイプ(<a href="http://rexinn.co.jp/capsule.html">こんなの</a>です)では, カプセル風の就寝スペースに加えて, 就寝スペースと同程度の個人スペースが用意されています.<br/>
個人スペースには, デスクとロッカーが置いてある場合が多いです. 更に言うまでもないですが, コンセントも用意されています.<br/>
ただ, カプセルホテル同様, 廊下などの共有スペースと個人スペースの区切りは間仕切り程度で鍵もないので, 盗難には気をつける必要があります.</p>

<h2>まとめ</h2>

<p>｢地域PM遠征を支える技術｣として, まずは｢東京都内の格安宿泊施設情報｣をまとめてみました.<br/>
先日告知された｢YAPC::Asia Tokyo 2014｣や, 就活や各種勉強会で都内に来られる際に参考にして頂ければと思います.</p>

<p>明日, 12月2日(月)は再びpapixで, ｢地域PM遠征を支える技術 〜関東関西移動編〜｣をお送りします. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-02:entry-2013-12-01-travel01.html</id>
<published>2013-12-01T59:59:00+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜関東関西移動編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-02-travel02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜関東関西移動編〜</h1>

<p>というわけでHachioji.pm Advent Calendarの2日目です. 今日の担当はpapixです.</p>

<p>昨日は関東圏の格安宿泊施設情報をまとめてみましたが, 今日は関東と関西を移動する格安移動手段についてご紹介したいと思います.<br/>
関西の方が就活等で関東へ行く場合, あるいは逆に, 関東の方がKyoto.pmやKansai.pmといった関西地方の勉強会に格安で行きたい...! と思った時にご活用下さい.</p>

<h2>バス</h2>

<p>まず第一の候補は, ｢格安移動手段の王｣とも言える高速バス.<br/>
多少疲労が貯まりますが(最近無茶ができなくなったので, 結構疲れが残る事が多いです...), 高速夜行バスを利用すれば｢寝ている時間｣に移動できるので, それなりに時間を有効活用することができます.<br/>
高速昼行バスは高速夜行バスに比べ便数が少ない上, 値段も若干高いですが, 日中に移動する方がスケジュール的に都合がいい場合は考慮に入れると良いでしょう.</p>

<p>さて, 関西と関東を結ぶ高速バスは多くの会社が運転していますが, 基本的にはJRバスを利用しておけばいいのでは? と思っています.<br/>
JRの高速バスは, <a href="https://www.kousokubus.net/PC/index.aspx">｢高速バスネット｣</a>から予約することができます.</p>

<p>JRバスの魅力は, 何といってもバスの便数. 加えて, コストパフォーマンスの良さも見逃せません.<br/>
バスの出発時間は21時代から23時代まで, 到着時間では6時代から8時代まで, スケジュールに合わせてバスを選ぶことができます.</p>

<p>また, 座席数制限がありますが, 5日前までに予約をすれば料金が割引になる｢早売5｣制度が準備されている点も魅力です.<br/>
この制度を利用すれば, 4列シートなら3500円(閑散期)〜4000円(繁忙期), 3列シートならプランにもよりますが, 6000円(閑散期)〜8000円(繁忙期)で乗車することができます.<br/>
加えて, 乗車回数による割引も実施していて, プランや乗車時期にかかわらず, 関西と関東を結ぶバスに1回乗車するごとに50円, 最大で500円(10回乗車した場合)の割引が適用されます.</p>

<p>次点は, かつて高速ツアーバスの雄だった<a href="http://travel.willer.co.jp/">Willer Express</a>.<br/>
現在は, 関越道の事故をきっかけに制定された, 新しい高速乗合バスの運行制度に則って運行しているようです.<br/>
料金はJRバスとほぼ同額か, やや高い程度ですが, シートの綺麗さには定評があります.<br/>
...というか, 後述しますが, JRバスのシートが若干酷い, という感じです.</p>

<p>ウィラーを利用する場合の注意点は, 大阪梅田のバス停が大阪駅から微妙に遠い, という点.<br/>
JRバスは大阪駅にあるバスターミナルから出発します(JR大阪駅の改札から5分, 阪急や阪神, 地下鉄の改札からなら10分もあれば確実に到着します)が, ウィラーは梅田スカイビルにある｢ウィラーバスターミナル大阪梅田｣もしくは｢プラザモータープール｣から出発します.<br/>
どちらも大阪駅から10分〜15分程度歩く必要があるので, 大阪駅到着時間によってはバスの出発時間に間に合わない, という事もあり得ます.</p>

<p>あとは｢ウィラーバスターミナル大阪梅田｣と｢プラザモータープール｣を間違えるという罠もあります.<br/>
これらの2施設と大阪駅は三角形のような配置になっているので, 交互に移動するのも10分〜20分くらいは必要になります.<br/>
先日それでバスを乗り損ねてしまい, ひとまず梅田のネカフェで一泊して, 翌朝新幹線で東京に移動するという失態を繰り広げてしまいました.<br/>
高速バスに乗る際は, バスの出発時間と乗車するバス停の場所, そしてバス停までの移動手段とルートはしっかり確認しておきましょう!</p>

<h3>バスの座席</h3>

<p>バスのシートは, 大まかに分けると｢4列｣と｢3列｣に別けられます.<br/>
ウィラーはコクーンと呼ばれる2列シートのバスを運転していますが, 片道1万円近くするので乗ったことがありません.</p>

<p>若い間は4列シートでも耐えられます(耐えられました)が, それなりの歳になると4列シートの環境は耐えられなくなります.<br/>
4列シートは前後左右のスペースが狭い上, 隣の人の影響をモロに受ける(意識せざるを得ない)ので, ハズレを引くと非常に辛いです.<br/>
...特にJRバスの4列シートは｢家畜運搬車｣です. JRの高速バスの場合, 夜行バスは基本的に全てダブルデッカー(2階建てバス)で運転している為, 前後左右だけでなく, 上下も狭い! という圧迫空間で寝ることになります.<br/>
座席もそれほど倒れませんし, 前日徹夜して疲れを貯めておくという禁じ手を使わない限り, 快眠は難しいです(まあ, 前日徹夜して疲れを貯めてからの睡眠が快眠になるのか? というのはいろいろ意見がありそうですが).</p>

<p>...ただ, 平日出発･平日到着の閑散期の場合, 隣の席が空いている可能性がかなり高くなるので, そうなれば隣を意識することなく, 格安でバスを利用することができます.<br/>
特に高速バスネットの場合, バスの座席を指定して予約することができるので, これを狙う事も難しくはありません.<br/>
問題としては, 何故か高速バスネットの座席指定システムが, インターネットエクスプローラーでしか動作しないという点です. <strong>致命的じゃねーか!!!</strong><br/>
UbuntuのChrome/Firefoxはもちろん, WindowsのChrome/Firefoxでも動きませんでした(座席を選択できない). つ, つら...</p>

<p>一方3列シートですが, バスによっては2列+1列のようになっているものがあります(JRの高速バスの場合, ドリーム号等の1階席はそうなっている場合があります)が, それでも4列シートよりは左右の間隔が広いので気持ちはかなり楽です.<br/>
｢3列独立シート｣の場合, ｢1列+1列+1列｣になることが保障されているので, より精神的には楽になります(前述のドリーム号でも, 2階席は1列+通路+1列+隙間+1列, という配置になっているようです).</p>

<p>JRバスの場合, 4列シート(4列)以外では｢3列｣, ｢S席｣, ｢P席｣を選ぶことができます.<br/>
3列は いわゆる｢左右にスペースがある4列シート座席｣程度ですが, S席になると座席をかなり倒すことができますし, 座席も左右に広い上, カーテンで隣と空間を区切ることができるのでかなり快適になります.<br/>
S席は, 2列シートでP席よりもいいらしいんですが, 流石に乗ったことがないのでわかりません...</p>

<p>まとめとしては, ｢ちょっと関西と関東を格安で移動してみたいなー｣と軽い気持ちで思い立ったような時は, 悪い事は言わないので値段を犠牲にして3列シートを予約しましょう.<br/>
｢どうしても関西と関東を移動する必要があるのに所持金が少なすぎる! ヤバイ!｣というように, ｢節約｣の覚悟ができているのであれば, 4列シートでも大丈夫と思います.</p>

<h3>高速バスのルート</h3>

<p>関西と関東を結ぶ高速バスのルートは, 大きく分けると新名神･東名高速を経由するルートと, 名神･中央道を経由するルートがあります.<br/>
JRバスの場合, 中央道を経由するバスは便名に｢中央｣が入るので区別することができます(例: 青春中央エコドリーム号).<br/>
所要時間は中央道経由の方が若干長い(東京駅･大阪駅間の場合, 新名神･東名ルートが約7〜8時間, 中央道経由ルートが約8〜9時間, 但し京都駅を経由する場合は更に伸びる)ですが, 南武線･中央線を経由して八王子に移動しやすい南武線JR谷保駅に止まるので, 関西からHachioji.pmに行く場合は中央道経由の方が都合がいい場合もあります.</p>

<p>より八王子に近い｢中央道八王子バス停｣にも停車しますが, 西八王子駅から徒歩数十分の距離にありますので, あまりオススメはしません.</p>

<h2>鉄道</h2>

<p>お次は鉄道. まずは王道の新幹線ですね.<br/>
のぞみ号を利用すれば約2時間半で関西と関東を移動することができます.<br/>
料金は片道約13000円ですが, 学割を利用するか, 金券ショップで回数券を買えば片道約12000円程度にまで抑えることができます.<br/>
だいたい, 夜行バスの2〜3倍と思えば良さそうです.</p>

<p>新幹線の場合, <a href="http://www.jrtours.co.jp/kodama/">｢ぷらっとこだま｣</a>を利用すれば, 新大阪から品川･東京まで1万円ポッキリまで抑えることができます.<br/>
...が, 乗車できるのがこだま号に制限される(約3時間半)上, 前日までに予約する必要がありますので使い所は難しい(ぷらっとこだまに乗るくらいなら, 2000円〜3000円を自己負担してのぞみに乗るか, 夜行バスでの移動を選ぶ)です.</p>

<p>お次は新幹線を使わない鈍行ルート.<br/>
<a href="http://ja.wikipedia.org/wiki/%E9%9D%92%E6%98%A518%E3%81%8D%E3%81%A3%E3%81%B7">｢青春18きっぷ｣</a>を利用すれば, 利用期間の制限はあるものの, コストパフォーマンスは最高です.<br/>
なんてったって, 青春18きっぷを使えば, 1日2300円で全てのJR路線の普通列車, 快速列車の普通車自由席に乗車することができるので, 関西と関東の間を2300円で移動できるんですから!</p>

<p>...ただ, 頻繁に乗り換える必要がありますし, 片道9時間〜10時間は必要になる為, 1日潰す事になってしまうので, 基本的に鈍行を利用するのは旅好き, もしくはマゾの所業と思ってよいです.<br/>
但し, 後述しますが青春18きっぷは途中下車も自由なので, 名古屋や浜松, 熱海あたりで途中下車して, 観光したり, 食事したり... というのもできますので, 人生に一度くらいはやってみてもいいのでは? と思ったりしています.<br/>
｢青春18きっぷ｣については, ｢地域PM遠征を支える技術｣でも頻繁に出てくると思うので, 12月4日あたりのHachioji.pm Advent Calendarで詳しく解説したいと思います.</p>

<p>前述の通り, 青春18きっぷを利用して関東から関西に行く場合, 9時間〜10時間は必要になります.<br/>
平日に東京駅を始発で出た場合のルートは8時間13分で, 次のようなルートになります.</p>

<p>東京 04:42 -> 04:52 品川 05:10 -> 06:21 小田原 06:22 -> 06:45 熱海 06:49 -> 09:19 浜松 09:23 -> 09:56 豊橋 10:03 -> 11:31 大垣 11:42 -> 12:17 米原 12:20 -> 13:43 大阪</p>

<p>一方, 大阪駅から東京駅へ移動する場合は9時間4分必要で, 次のようなルートになります.</p>

<p>大阪 05:00 -> 05:45 京都 05:49 -> 06:56 米原 07:07 -> 10:06 浜松 10:10 -> 11:21 静岡 11:53 -> 13:07 熱海 13:17 -> 15:05 東京</p>

<p>なお, <a href="http://www.jorudan.co.jp/">ジョルダン</a>では, 青春18きっぷで乗車出来る列車のみを利用した乗換案内を検索できるので, 青春18きっぷで移動するプランを立てる場合は積極的に活用してみるとよいでしょう.</p>

<p>注意点としては, 豊橋〜熱海間は基本的に各駅停車しか運転されておらず, 車両数も時間帯にもよりますが3両〜4両と1編成が短いという点.<br/>
豊橋までは6〜8両, 熱海までは10〜15両に乗っている乗客が3〜4両の列車に集中することになるので, 青春18きっぷ真っ盛りの時期(例えばコミケ前後)になると, 豊橋から熱海まで立ちっぱなし, という事も十分あり得ます.</p>

<p>...それでもなお, 2300円というコストパフォーマンスは圧倒的(閑散期4列夜行バスよりも安い!)なので, ｢1円でもいいから節約したい!｣という場合は, 考慮に入れる余地があると思います.</p>

<p>最後に, 大阪から東京に行く場合のみ利用できるルートではあるのですが, ｢寝台特急｣を利用する... というルートがあります.<br/>
｢会社や大学から交通費が出るけど, 朝早くに東京に着かなければならない. 高速バスは遅延が怖いし, 新幹線は朝早く起きる必要があって寝坊すると怖いし...｣という場合にオススメです.</p>

<p>東京と, 出雲市駅･高松駅を結ぶ寝台特急｢サンライズ瀬戸･出雲｣という寝台特急があるのですが, この特急は東京行きに限り大阪駅にも停車します(出雲市･高松駅行きは, 関西圏最初の停車駅が姫路駅になります).<br/>
この列車が横浜駅に到着する時間は6時44分, 東京駅に到着する時間は7時8分なので, 新幹線の始発に乗るよりも2時間ほど早く東京に到着することができます.</p>

<p>通常, 寝台特急は乗車券, 特急券の他に寝台券が必要になる為コストパフォーマンスは悪いのですが, この列車に限っては｢ノビノビ座席｣と呼ばれるシートが2両用意されており, このシートに限っては乗車券と特急券のみ(約12000円, 学割適用で約11000円)で利用することができます.<br/>
バスに比べると振動, 騒音も少なく(ノビノビ座席のある車両はモーターなどが搭載されている電動車で, 比較的煩いはずなのですが, それでもバスよりはマシのように感じました), 鉄道なのでダイヤも比較的安定しているのでオススメです.<br/>
以前, YAPC::Asia 2012に参加する際に利用した時は, 大阪駅を30分遅れで出発したにも関わらず, 東京駅には定時で到着していました.</p>

<h2>飛行機</h2>

<p>関西と関東を移動するのであれば, 飛行機の利用はあまりおすすめしません.<br/>
飛行機のみの移動時間を見れば新幹線よりも早いですが, 羽田空港がある関東側はともかく, 関西側は伊丹空港, 関西国際空港と都心部から離れた空港ばかりなので, 空港まで移動する時間とコストが必要になります.<br/>
空港から都心部までの移動コストを考えると, 料金面も新幹線と遜色ないレベルになるので, 駅を降りればすぐJRで目的地に移動できる新幹線の方が使い勝手はいいと思います.</p>

<h2>まとめ</h2>

<p>関西と関東を移動する際の移動手段について, 簡単ではありますがまとめてみました.<br/>
移動手段は時間, 料金, スケジュールを考えて, 最適なものを選ぶのが大事なので, その助けになれば嬉しいです.</p>

<p>明日は... 明日もpapixの担当日となっておりますので, 謹んで記事を書かせて頂きます.<br/>
明日のテーマですが, 12月28日に<a href="http://atnd.org/events/45823">Hokkaido.pm #28</a>が開催されるので, 関東と北海道の格安移動手段について紹介したいと思います.<br/>
王道というか, 普通は十中八九飛行機を使うと思うのですが, それ以外にも面白いルートがあるんだよ! と感じて頂けるようにかんばります.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-03:entry-2013-12-02-travel02.html</id>
<published>2013-12-02T59:59:00+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜北海道/鉄道編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-03-travel03.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜北海道/鉄道編〜</h1>

<p>ぱんぱかぱ〜ん! (挨拶) Hachioji.pm Advent Calendar, はっじまっるよー!<br/>
というわけで今日の担当もpapixです. 3日連続です. そろそろネタ切れそうです.</p>

<p>今日は昨日予告しました通り, 北海道への格安移動手段を紹介したいと思います.<br/>
道外から北海道への移動手段は, とりあえず飛行機が王道です. ...が, 年末年始や夏のような繁忙期で値段がとても高くなりますし, 最近流行りのLLCは安いものの, 予定変更が難しかったり, 運休時の対応や機材に心配が... と若干の不安が残ります.</p>

<p>そこで今回は, 道外から北海道への航空機以外の格安移動手段についてまとめてみることにしました.<br/>
小出しにネタを出して行かないと途中でネタが切れそうなので, 今回は鉄道を利用したルートについて紹介する｢北海道/鉄道編｣と, フェリーを利用したルートについて紹介する｢北海道/フェリー編｣に分けたいと思います.</p>

<p>｢年末年始, 帰省で北海道に戻ってるけど, 飛行機そろそろ飽きたな...｣という方, 是非参考にしてみて下さい.</p>

<p>...さて, 関東から北海道へ行く場合は, 昨日紹介した<a href="http://ja.wikipedia.org/wiki/%E9%9D%92%E6%98%A518%E3%81%8D%E3%81%A3%E3%81%B7">｢青春18きっぷ｣</a>に加え, <a href="http://ja.wikipedia.org/wiki/%E5%8C%97%E6%B5%B7%E9%81%93%26%E6%9D%B1%E6%97%A5%E6%9C%AC%E3%83%91%E3%82%B9">北海道&amp;東日本パス</a>を利用することができます.</p>

<p>北海道&amp;東日本パスと青春18きっぷの違いは, ざっくり説明すると...</p>

<hr />

<table>
<thead>
<tr>
<th style="text-align:left;">                  </th>
<th style="text-align:left;"> 青春18きっぷ </th>
<th style="text-align:left;"> 北海道&amp;東日本パス                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 価格             </td>
<td style="text-align:left;"> 11500円      </td>
<td style="text-align:left;"> 10000円                                                          </td>
</tr>
<tr>
<td style="text-align:left;"> 利用期間         </td>
<td style="text-align:left;"> 任意の5日間  </td>
<td style="text-align:left;"> 連続した7日間                                                    </td>
</tr>
<tr>
<td style="text-align:left;"> 乗車可能エリア   </td>
<td style="text-align:left;"> 全JR路線     </td>
<td style="text-align:left;"> JR北海道/JR東日本/青い森鉄道/IGRいわて銀河鉄道/北越急行/富士急行 </td>
</tr>
</tbody>
</table>


<hr />

<p>...となっています.<br/>
これらの切符の違いについては, 近日中に｢地域PM遠征を支える技術 〜切符編〜｣で紹介したいと思います.</p>

<p>さて, 東京から, 鉄道のみかつ低コストかつ宿泊施設の利用なし(車内泊はあり)で北海道に行く場合, 青森から北海道までのルートは青森駅を22:42に出発し, 札幌には翌朝06:07に到着する寝台急行｢はまなす｣になります.<br/>
はまなすは寝台車の他, 自由席, 指定席, ドリームカー(グリーン席相当の指定席), のびのびカーペットカー(サンライズ瀬戸･出雲のノビノビ座席のようなもの)があります.<br/>
青春18きっぷでは急行列車には乗車できないのですが, 北海道&amp;東日本パスは急行券を別途購入すれば, 乗車可能エリア内の急行列車に乗車することができるので, はまなすも乗車できるのです.</p>

<p>はまなすは通常7両で運転していますが, 年末年始などの繁忙期はB寝台を1両増備することがあります.<br/>
それでも指定席(ドリームカー)はほぼ満席になっていたので(昨年末にHokkaido.pmに参加した際に利用しました), はまなすを利用するのであれば, 事前に指定席を予約しておくことをおすすめします.</p>

<p>さて, 青森から札幌までのルートは決まりました. 残るは札幌までのルートです.<br/>
北海道&amp;東日本パスを利用するのであれば, 東京からのルートは2つあります. 1つは日本海側を通って行くルート, もう1つは太平洋側を通って行くルートです.<br/>
青森までは青春18きっぷで, そこから先は北海道&amp;東日本パスを利用するのであれば, 太平洋側のルートは途中青春18きっぷで乗車できない青い森鉄道とIGRいわて銀河鉄道を経由する必要があるので, 選択肢は日本海側ルートのみになります.</p>

<h2>日本海ルート</h2>

<p>日本海ルートを利用するのであれば, 青春18きっぷや北海道&amp;東日本パスが利用可能な時期の一部日程で運転される臨時夜行快速｢ムーンライトえちご｣の利用が必要になります.<br/>
ムーンライトえちごは新宿駅を23:10に出発し, 新潟駅には04:51に到着します</p>

<p>後は羽越本線･奥羽本線を北上するだけです. 具体的には...</p>

<p>新潟 06:08 -> 06:46 新発田 06:49 -> 09:30 酒田 09:38 -> 11:30 秋田 13:35 -> 15:24 大館 15:55 -> 16:37 弘前 16:42 -> 17:33 青森</p>

<p>が, 最短ルートです.<br/>
日中のスケジュールに余裕がありますので, 途中酒田や秋田, 青森で観光したりできますし, 秋田から青森までを, 五能線経由の｢リゾートしらかみ｣を利用するという手もあります. <br/>
この場合, 秋田駅を14:10駅発のリゾートしらかみ5号に乗車し, 青森駅には19:20に到着します.<br/>
リゾートしらかみは, いわゆる｢ジョイフルトレイン｣と呼ばれる種類の観光用の快速列車ですが, 全席指定の快速列車なので, 指定席券を用意すれば青春18きっぷや北海道&amp;東日本パスでも利用できます.</p>

<p>年末年始などの繁忙期は, このような｢指定席券を用意すれば青春18きっぷや北海道&amp;東日本パスでも乗れる臨時快速｣が多く運転されているので, 快適な車両を狙って積極的に使ってみるといいでしょう.</p>

<p>日本海側ルートでは, 他に新潟駅と酒田駅･象潟駅を結ぶ｢きらきらうえつ｣があります.<br/>
車内で地酒が飲めたりとサービス抜群にも関わらず, 臨時快速列車なので指定席券のみで乗車可能で, しかもダイヤは特急並ということで, かなり使い得の列車になっています.</p>

<h2>太平洋ルート</h2>

<p>太平洋ルートは, 日本海側ルートと異なり, 朝出発して夜に青森に着く... というルートです.</p>

<p>東京 07:45 -> 07:52 上野 07:57 -> 09:27 宇都宮 09:34 -> 10:25 黒磯 10:33 -> 11:37 郡山 11:56 -> 12:3 福島 13:00 -> 14:13 仙台 14:45 -> 16:23 一ノ関 16:28 -> 18:00 盛岡 18:15 -> 19:41 三戸 19:51 -> 21:48 青森</p>

<p>青森駅からはまなすを利用するのであれば, これが東京駅発の終電になります.<br/>
途中, 最長の待ち時間が14:13〜14:45の仙台(32分)のみなので, 結構過酷なルートです.<br/>
予め, 出発前に飲み物や昼食, おやつなどを買っておく必要がありそうです.</p>

<p>また, 日本海ルートも同様ですが, 青春18きっぷや北海道&amp;東日本パスでは, 遅延した場合の保障は基本的にない(悪天候で列車が運転できなくなった場合のバス代行は利用できるようですが...)ので, 終電1本前に乗って余裕を持っておく(太平洋ルートの場合, 終電の1本前は東京駅を06:49発で青森に20:48着になります)とか, 途中特急･新幹線に乗車できるように財布と旅費に余裕を持っておくなどの備えが必要になります.</p>

<h2>青森駅での時間潰し</h2>

<p>いずれのルートも, はまなすの出発時刻まで, 青森駅でそれなりの時間を待つ必要が出てきます.<br/>
時間潰しのオススメは, 青森駅から徒歩5分〜10分程度の位置にある<a href="http://www12.ocn.ne.jp/~machinak/">｢青森まちなか温泉｣</a>. <br/>
入浴料は大人420円, バスタオルを借りても+200円の620円で, 休憩室もあるので, 旅の疲れをしっかり癒すことができます.</p>

<h1>まとめ</h1>

<p>というわけで, 鉄道を使って東京から北海道まで, 格安で移動するルートについてまとめてみました.<br/>
今回紹介したテクニック(?)は, あと2〜3年程度で使えなくなります. というのも, 北海道新幹線が開業すると, 青函トンネルを通る全ての寝台列車(はまなすの他, トワイライトエクスプレスや北斗星, カシオペアなど)が廃止になる予定だからです.</p>

<p>新幹線開業時にどうなるかわかりませんが, 青春18きっぷや北海道&amp;東日本パスの特例で, 新青森〜新函館間の新幹線自由席が乗車可能となり, かつはまなすが函館駅〜札幌駅間のみの運転になる... という形になれば, このテクニックを多少改変すれば適用可能になるかもしれません.<br/>
このテクニックが使えなくなった場合, 格安で北海道に行くルートは, LLCを利用するか, フェリーを利用するか... の二択になってくるのではないかと思います.</p>

<p>さて, 明日は, 最近研究室からMac Book Airを支給されてウキウキの@bool_foolくんが担当する予定... というか担当してもらえるようにお願いするつもりですが, <strong>｢papixパイセン酷い! パワハラだ! 指導教員に訴えてやる!!!｣</strong>とゴネた場合は仕方がないのでpapixが担当する事になります.<br/>
その場合は, ｢地域PM遠征を支える技術 〜北海道/フェリー編〜｣をお送りするつもりです.</p>

<p>...お楽しみに!?</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-03:entry-2013-12-03-travel03.html</id>
<published>2013-12-03T23:23:20+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">Fukuoka.pmに乱入してきた!</title>
<link href="http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Fukuoka.pmに乱入してきた!</h1>

<p>皆さんこんにちは, 提督業と修論業で慌ただしい日々を送っている｢地域PMエバンジェリスト(自称)｣ことpapixです.<br/>
最近は駆逐艦の良さがわかってきた気がしています. ...あ, そういう意味ではないですヨ?</p>

<p>...さて今日は, 紆余曲折を経て10月26日(土)に開催された｢Fukuoka.pm #24｣に行ってきたので, その感想レポートをお送りしたいと思います.</p>

<h2>スポンサー紹介</h2>

<p>今回, Fukuoka.pmへ参加するにあたり, 往路の交通費を以下の方々にスポンサードして頂きました.<br/>
この場をお借りして御礼申し上げます. 本当にありがとうございました!</p>

<ul>
<li><a href="https://twitter.com/yusukebe">@yusukebe</a>さん</li>
<li><a href="https://twitter.com/uzulla">@uzulla</a>さん</li>
<li><a href="https://twitter.com/xtetsuji">@xtetsuji</a>さん</li>
</ul>


<h2>Fukuoka.pm #24</h2>

<p>Fukuoka.pmの雰囲気等々についてはゆーすけべーさんの感想ブログ記事, ｢<a href="http://yusuke.be/post/65193797413">福岡のPerl Workshop「Fukuoka.pm#24」に行ってきました！</a>｣がよくまとまっているので, こちらを読めばいいのではないでしょうか.</p>

<p>ゆーすけべーさんもブログ記事で書いていますが, 参加人数が少ない分(ATNDの参加申し込み人数で14人), 発表者と参加者の距離が近いので, 参加者の反応を感じやすかったですし, 質疑応答やツッコミといったコミュニケーションが生まれやすい雰囲気が出来ていたので, とても良かったです.</p>

<h2>トーク</h2>

<p>今回のスピーカーは, JPAの講師派遣制度で来ていたゆーすけべーさん, 東京から参戦のcharsbarさん, Fukuoka.pmのヒラタさん(<a href="https://twitter.com/debility">@debility</a>), そして私の4人でした.</p>

<p>ゆーすけべーさんのトークは, 最近チャレンジしているボケての構造化について.
ざっくりまとめると, ｢フロントエンド(テンプレートエンジンとかを使って, 実際にブラウザに表示する部分を担う)｣と, ｢APIフレームワーク(フロントエンドのAPIリクエストに応じて, DBにアクセスしたりして, 適切な(フロントエンドで表示したい)データを返す)｣の2つに分離して, 分業化するというアイデアを実践している... という話でした.</p>

<p>社内プロダクトならともかく, ボケてのような社の垣根を越えた少人数のチームで開発している場合, このように(開発者の/Webサービスの)役割を明確に区切る, というアプローチは有効そうな気がします.<br/>
今後, この方針がどのように進展していくかが, とても気になる発表でした!</p>

<p>charsbarさんは, CPANTSやCPANモジュールのKwalitee, MinilやMinillaを使ったモジュール開発等々についてのお話でした.<br/>
何故か自分がKwaliteeランキングで10位に入っていましたが, あれは｢よしKwaliteeランキングで上位に入ってやろう!｣と思って頑張った訳ではなくて, モジュール開発の為に漬かっているMinillaがよしなにやってくれただけだと思います.
そういう意味を含めて, Minillaはとても便利なツールなので, これからモジュールを作る! という方はMinillaを採用することをおすすめしますし, 既存モジュールも, 積極的にMinillaに切り替えていく価値があると思っています.</p>

<p>ヒラタさんの発表は, 社内の余興で某クイズ番組をPHPやNodeを駆使して再現した, というお話.
弊社も割とそういう空気がありますが, ああいう余興(?)に全力を尽くせるノリっていいなあ... と感じました.
というか, あのシステムはすごい出来が良いので, 某局とコラボするとか, ロゴ等々のマズい部分をなんとかしてOSSのような形で公開したりとか, そういう展開があってもいいですよね. 今後どうなるか期待です.</p>

<h2>自分のトーク</h2>

<p>で, 自分ですが｢GPGPUとXSとわたし｣というタイトルで, PerlにおけるGPGPUの現状と, XSについての話をして来ました.<br/>
資料はこちらです(後でアップします...)</p>

<p>前半は割と学術っぽいネタで, 後半はXSという人を選ぶ中級者向けなネタだったので, ビギナーな方には｢あー, こういう世界があるんだなー｣というのを感じて頂けるように努力... したつもりなんですが如何でしたでしょうか.<br/>
人を選ぶネタなので, お昼寝兼内職タイムになっちゃうのでは? と懸念していたのですが, 予想以上に興味津々な感じで聞いて頂けましたし, 質問もいくつか飛んできたので非常に嬉しかったです.</p>

<p>あと, PerCUDAの成果として完成した｢PerCUDA::Backend::GPU｣ですが, これ普通にPerlからPTXをデバイスAPIを使って呼び出すツールとして使える気がするので, ｢CUDA::DeviceAPI｣みたいな名前で独立したモジュールとして公開してもいいんじゃないかなー, と思ったりしました.<br/>
人柱よろしくです! (To GPGPUで研究をしている八王子在住のPerl Monger)</p>

<h2>福岡最高!</h2>

<p>常日頃から言っていますが, 福岡は自分にとって最高の都市の1つです.<br/>
まず都市の規模が程よくコンパクトで, 移動がとても楽. 東京で言えば新宿と渋谷と銀座が徒歩圏内にある, みたいなイメージでしょうか.
あと空港から中心部までの距離が異常に近いのも良いですね. 博多駅から福岡空港まで, 地下鉄で2駅ですし.</p>

<p>あと食いしん坊バンザイな自分やゆーすけべーさんからすると, 屋台だったり居酒屋だったり, 飲食店のレベルが高いのも高印象でした. 要するに, 適当な店に行っても大抵メシがウマイ.
そして焼酎がとても安いですね! 黒霧島とか, 多分大阪や東京の100〜200円引きくらいの値段で飲めます.</p>

<p>そしてあれです. Fukuoka.pmとかに行くと, 地元の方が自信を持っておすすめするお店とかに行く事になるので, まあマズいはずがないですよね, ええ.</p>

<p><img src="http://hachiojipm.github.io/static/image/nabe.jpg" alt="モツ鍋" /></p>

<p>こちらのモツ鍋は, Fukuoka.pmの懇親会(1次回)で行ったモツ鍋屋のモツ.<br/>
ちなみにこの後, 2次会でラーソーメンを食べ, 3次会で屋台に行って鶏の炭火焼や餃子を食べたりしてました.<br/>
最終的な解散時間は午前1時...! そして地元の方はずっとビールなり焼酎なりを飲み続けていました. お酒に強すぎィ!</p>

<p><img src="http://hachiojipm.github.io/static/image/mentaiko.jpg" alt="明太子御飯" /></p>

<p>こちらの明太子御飯は, Fukuoka.pmの翌日(つまり今日), ｢ここ超よさそうじゃね!?｣とゆーすけべーさんが見つけたお店で食べたもの.<br/>
多分, これ東京で食べたら間違いなく1.5〜2倍くらいの値段がするんじゃないかなあ...</p>

<h2>さいごに</h2>

<p>Fukuoka.pm最高! 呼ばれなくてもまた来ますし, 呼ばれたら絶対に行きます!!!<br/>
ちなみに次のFukuoka.pmには<a href="http://yancha.hachiojipm.org/quot?id=168623,168617">｢ツールチェインギャング見習い｣として有名なmoznion氏も参加</a>するみたいなので, とても楽しみですね!</p>

<p>Fukuoka.pm #24に参加された皆様, そして交通費をスポンサードして頂いたゆーすけべーさん, uzullaさん, てつじさん, 本当に本当に, ありがとうございました!</p>

<center>Fukuoka.pm最高〜〜〜〜〜〜〜〜〜〜〜ッ!!!!!</center>



]]></content>
<id>tag:hachiojipm.github.io,2013-10-27:entry-2013-10-27-fukuokapm.html</id>
<published>2013-10-27T22:22:55+0900</published>
<updated>2013-11-04T18:02:29+09:00</updated>
</entry>
</feed>
