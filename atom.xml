<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm 日めくりテックトーク</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.10">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-11-04T17:23:05+09:00</updated>
<entry>
<title type="text">「Hachioji.pm 日めくりテックトーク」について</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>「Hachioji.pm 日めくりテックトーク」について</h1>

<h2>これまでの記事</h2>

<table>
<thead>
<tr>
<th>日時           </th>
<th> 筆者       </th>
<th> タイトル</th>
</tr>
</thead>
<tbody>
<tr>
<td>2013/11/01(金) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html">Minilla（Module::Build）でproveオプションを渡したい</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html"></a></td>
</tr>
<tr>
<td>2013/10/27(日) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html">Fukuoka.pmに乱入してきた!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html"></a></td>
</tr>
<tr>
<td>2013/10/14(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html">Compiler::CodeGenerator::LLVMで遊ぼう!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html"></a></td>
</tr>
<tr>
<td>2013/10/04(金) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html">Perlの警告と例外を両方握りつぶすtypesterハック</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html"></a></td>
</tr>
<tr>
<td>2013/10/01(火) </td>
<td> moznion </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-01-encoding.html">Perl の文字列エンコーディングの話</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-01-encoding.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-01-encoding.html"></a></td>
</tr>
<tr>
<td>2013/09/29(日) </td>
<td> ytnobody </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-29-nephia.html">肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-29-nephia.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-29-nephia.html"></a></td>
</tr>
<tr>
<td>2013/09/25(水) </td>
<td> mackee </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html">Perl6をかいま見るためにSeisを使ってみる</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html"></a></td>
</tr>
<tr>
<td>2013/09/24(火) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-24-selenium.html">SeleniumとPerlの話</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-24-selenium.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-24-selenium.html"></a></td>
</tr>
<tr>
<td>2013/09/23(月) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html">phpcon2013所見</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html"></a></td>
</tr>
<tr>
<td>2013/09/18(水) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html">perlでTravisCI、Coverallsを使ってみる</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html"></a></td>
</tr>
<tr>
<td>2013/09/17(火) </td>
<td> ichigotake </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html">最近のPerlに足りないモノ</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html"></a></td>
</tr>
<tr>
<td>2013/09/16(月) </td>
<td> OGATA Tetsuji </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html">Perlの一文字変数の攻略</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html"></a></td>
</tr>
<tr>
<td>2013/09/15(日) </td>
<td> mackee </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html">Perl meets Hardware #01 Perlとハードウェアが出会うには</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html"></a></td>
</tr>
<tr>
<td>2013/09/14(土) </td>
<td> Songmu </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html">Perl5.10以降に追加された機能で良く使うお役立ち機能まとめ</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html"></a></td>
</tr>
<tr>
<td>2013/09/13(金) </td>
<td> ytnobody / satoshi azuma </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-13-01.html">八王子 CPANモジュールコレクション 2013 秋</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-13-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-13-01.html"></a></td>
</tr>
<tr>
<td>2013/09/12(木) </td>
<td> uzulla </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-12-01.html">PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-12-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-12-01.html"></a></td>
</tr>
<tr>
<td>2013/09/11(水) </td>
<td> boolfool </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-11-01.html">購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-11-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-11-01.html"></a></td>
</tr>
<tr>
<td>2013/09/10(火) </td>
<td> moznion </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-03.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-03.html"></a></td>
</tr>
<tr>
<td>2013/09/09(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-02.html">「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-02.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-02.html"></a></td>
</tr>
<tr>
<td>2013/09/09(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-01.html">「Hachioji.pm 日めくりテックトーク」について</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-01.html"></a></td>
</tr>
</tbody>
</table>


<h2>概要</h2>

<p>Hachioji.pmが主催する, 日替わりで何らかのテックトークが投稿されていくカレンダーのようなものです.<br/>
書きたい人からじゃんじゃん書いていって下さい. Hachioji.pm以外の方も大歓迎です!</p>

<p>記事を書いてみたい人は, 以下の予定表に名前を書き込んでおいて下さい.</p>

<h2>おやくそく</h2>

<ul>
<li><code>git push -f</code>や<code>git commit -am</code>は厳禁. 同志ソムーリンに粛清されます.</li>
<li>ブログのネタは何でもよいのではないでしょうか. ただ炎上だけは勘弁な.</li>
<li>「Hachioji.pmメンバーによるテックブログ」というよりは「Hachioji.pmが主催するテックブログ」という雰囲気なので, Hachioji.pm以外の方もどしどし書いていきましょう.

<ul>
<li>書いてみたい! と思った方はHachioji.pmっぽい人に声をかけてみて下さい.</li>
</ul>
</li>
<li>「Hachioji.pm 日めくりテックトーク, 楽しそう!」という発言を不用意にしてしまうと, papixに強制的にアサインされる事例が多発しています.</li>
<li>楽しくやりましょう.</li>
</ul>

]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-01.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-11-04T17:23:05+09:00</updated>
</entry>
<entry>
<title type="text">Minilla（Module::Build）でproveオプションを渡したい</title>
<link href="http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Minilla（Module::Build）でproveオプションを渡したい</h1>

<p>最近はやりのモジュールセットアップ＆管理ツールの<a href="http://search.cpan.org/~tokuhirom/Minilla/">Minilla</a>で使うminil testでprove --jobs 10的な並列処理をかけたいなーと思って、いろいろ調べて教えてもらったのでその話です。</p>

<h2>感謝！</h2>

<p>この記事書いたらtokuhiromさんがコメントくれて、しかもMinilla v0.8.2をリリースし、tap_harness_argsというModule::Buildのオプションに対応して頂けました！詳細は後述。</p>

<p>ありがとうございます！！！！</p>

<h2>proveのオプションって？</h2>

<p>proveはPerlの動作確認テストを一括実行するコマンドです。proveのオプションとか知らない方は、こちらのxaicronさんの記事を参照→<a href="http://perl-users.jp/articles/advent-calendar/2011/test/21">prove についてのおさらい</a></p>

<p>テストの並列処理とかカラーリングとか時間出したりできます。モジュールのテストでも並列処理させたいことはしばしばあると思いますので、結構ニーズあるような設定だと思いますね。</p>

<h2>Makefile.PLの場合</h2>

<p><a href="http://perl-users.jp/articles/advent-calendar/2011/test/18">テストのためにデーモンを自動的に起動するやりかた2011年版</a>にあるように、.provercとかもりもりかいて、以下のようにMakefile.PLに書けばいいのです。</p>

<pre><code>sub MY::test_via_harness { "\tprove --rc=t/proverc t\n" }
</code></pre>

<p>ただ、Minillaは最近はやりのBuild.PL形式で<a href="http://search.cpan.org/~leont/Module-Build-0.4007/lib/Module/Build.pm">Module::Build</a>使っているんですが、ドキュメントがモリモリでよくわからん！という感じなりました。ググってもあまり出てこないし。。。</p>

<h2>Build.PLの場合</h2>

<p><a href="http://search.cpan.org/~leont/Module-Build-0.4007/lib/Module/Build.pm">Module::Build</a>にもよくみたらかいてあるんですが、全然よくわかりません（苦笑）</p>

<p>Mminilla( v0.8.2)が生成するBuild.PLをみるとよくわかります。生でBuild.PLを書く場合は以下の設定します。</p>

<pre><code>my $builder = Module::Build-&gt;new(
    tap_harness_args =&gt; {"jobs" =&gt; 19,"timer" =&gt; "true","color" =&gt; "true"},
);
</code></pre>

<h2>[追記]Minillaのproveの並列オプションの渡し方 ～tap_harness_args編～</h2>

<p>Minilla v0.8.2では、以下のようにminil.tomlに設定するということです。</p>

<pre><code>[tap_harness_args]
jobs=19
color=true
timer=true
</code></pre>

<h2>[元記事]Minillaのproveの並列オプションの渡し方 ～オレオレbuild_class編～</h2>

<p>builder::MyBuilderでカスタマイズできるという参考程度に。</p>

<p>さてはて、困ったなーと思っていたんですが、こんなときこそはちぴー仲間の集うYanchaだ！！ということで聞いてみたら、<a href="http://d.hatena.ne.jp/gfx/20110313/1300027796">gfxさんの記事</a>をさらっと<a href="http://yancha.hachiojipm.org/quot?id=172960,172953,172951,172949">tsuttchiさんにおしえてもらった</a>。マジ感謝です！！！で以下のようにproveのオプションは環境変数で設定できるということです。</p>

<pre><code>HARNESS_OPTIONS=j19 minil test
</code></pre>

<p>で、毎回環境変数渡すのだ類のでMinillaにいれたいんですが、Build.PLを自動生成するMinillaなので、どうするかというと、<a href="http://search.cpan.org/~tokuhirom/Minilla/lib/Minilla.pm#CONFIGURATION">Minillaのminil.tomlの設定のドキュメント</a>とtokuhiromさんの<a href="http://blog.64p.org/entry/20111202/1322803079">Module::Buildでテストの前とかあとにフックする方法</a>を参考に以下のようになります。</p>

<h3>minil.tomlで以下のようにオレオレbuild_classを設定</h3>

<pre><code>[build]
build_class = "builder::MyBuilder"
</code></pre>

<h3>オレオレbuildクラスで以下のようにテストをフック</h3>

<p>./buidler/ディレクトリ作って、vi /builder/MyBuilder.pmに書き込みます</p>

<pre><code>package builder::MyBuilder;
use strict;
use warnings;
use parent qw(Module::Build);

sub ACTION_test {
    my $self = shift;

    local $ENV{HARNESS_OPTIONS} = ($ENV{HARNESS_OPTIONS} ||'') . 'j19';
    $self-&gt;SUPER::ACTION_test(@_);
}

1;
</code></pre>

<h3>いろいろ渡す方法</h3>

<p><a href="http://search.cpan.org/~ovid/Test-Harness-3.29/lib/Test/Harness.pm#ENVIRONMENT_VARIABLES_THAT_AFFECT_TEST::HARNESS">HARNESS_OPTIONSのドキュメント</a>をみると、たくさんオプションを渡すときは、「:」区切りで渡すようです。</p>

<pre><code>HARNESS_OPTIONS=j9:c make test
</code></pre>

<h3>余談、do_system('prove --jobs 19 -r t')には注意</h3>

<p>最初ACTION_testの中で、$self->SUPER::ACTION_test(@_)呼ばないで、$self->do_system('prove --jobs 19 -r t')でやればよくね？って思ってやったんですが、Minillaがいい感じに裏でやっていると思われるxt系のテストがよばれなくなっちゃうので、ちとうれしくないと思いやめました。xt系のテストあまりわかっていないので、とりあえず、tokurhiromオススメを不都合が出るまで使っておきましょうという感じです。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-11-01:entry-2013-11-03-minilla-tips1.html</id>
<published>2013-11-01T03:03:02+0900</published>
<updated>2013-11-01T20:03:02+09:00</updated>
</entry>
<entry>
<title type="text">Fukuoka.pmに乱入してきた!</title>
<link href="http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Fukuoka.pmに乱入してきた!</h1>

<p>皆さんこんにちは, 提督業と修論業で慌ただしい日々を送っている｢地域PMエバンジェリスト(自称)｣ことpapixです.<br/>
最近は駆逐艦の良さがわかってきた気がしています. ...あ, そういう意味ではないですヨ?</p>

<p>...さて今日は, 紆余曲折を経て10月26日(土)に開催された｢Fukuoka.pm #24｣に行ってきたので, その感想レポートをお送りしたいと思います.</p>

<h2>スポンサー紹介</h2>

<p>今回, Fukuoka.pmへ参加するにあたり, 往路の交通費を以下の方々にスポンサードして頂きました.<br/>
この場をお借りして御礼申し上げます. 本当にありがとうございました!</p>

<ul>
<li><a href="https://twitter.com/yusukebe">@yusukebe</a>さん</li>
<li><a href="https://twitter.com/uzulla">@uzulla</a>さん</li>
<li><a href="https://twitter.com/xtetsuji">@xtetsuji</a>さん</li>
</ul>


<h2>Fukuoka.pm #24</h2>

<p>Fukuoka.pmの雰囲気等々についてはゆーすけべーさんの感想ブログ記事, ｢<a href="http://yusuke.be/post/65193797413">福岡のPerl Workshop「Fukuoka.pm#24」に行ってきました！</a>｣がよくまとまっているので, こちらを読めばいいのではないでしょうか.</p>

<p>ゆーすけべーさんもブログ記事で書いていますが, 参加人数が少ない分(ATNDの参加申し込み人数で14人), 発表者と参加者の距離が近いので, 参加者の反応を感じやすかったですし, 質疑応答やツッコミといったコミュニケーションが生まれやすい雰囲気が出来ていたので, とても良かったです.</p>

<h2>トーク</h2>

<p>今回のスピーカーは, JPAの講師派遣制度で来ていたゆーすけべーさん, 東京から参戦のcharsbarさん, Fukuoka.pmのヒラタさん(<a href="https://twitter.com/debility">@debility</a>), そして私の4人でした.</p>

<p>ゆーすけべーさんのトークは, 最近チャレンジしているボケての構造化について.
ざっくりまとめると, ｢フロントエンド(テンプレートエンジンとかを使って, 実際にブラウザに表示する部分を担う)｣と, ｢APIフレームワーク(フロントエンドのAPIリクエストに応じて, DBにアクセスしたりして, 適切な(フロントエンドで表示したい)データを返す)｣の2つに分離して, 分業化するというアイデアを実践している... という話でした.</p>

<p>社内プロダクトならともかく, ボケてのような社の垣根を越えた少人数のチームで開発している場合, このように(開発者の/Webサービスの)役割を明確に区切る, というアプローチは有効そうな気がします.<br/>
今後, この方針がどのように進展していくかが, とても気になる発表でした!</p>

<p>charsbarさんは, CPANTSやCPANモジュールのKwalitee, MinilやMinillaを使ったモジュール開発等々についてのお話でした.<br/>
何故か自分がKwaliteeランキングで10位に入っていましたが, あれは｢よしKwaliteeランキングで上位に入ってやろう!｣と思って頑張った訳ではなくて, モジュール開発の為に漬かっているMinillaがよしなにやってくれただけだと思います.
そういう意味を含めて, Minillaはとても便利なツールなので, これからモジュールを作る! という方はMinillaを採用することをおすすめしますし, 既存モジュールも, 積極的にMinillaに切り替えていく価値があると思っています.</p>

<p>ヒラタさんの発表は, 社内の余興で某クイズ番組をPHPやNodeを駆使して再現した, というお話.
弊社も割とそういう空気がありますが, ああいう余興(?)に全力を尽くせるノリっていいなあ... と感じました.
というか, あのシステムはすごい出来が良いので, 某局とコラボするとか, ロゴ等々のマズい部分をなんとかしてOSSのような形で公開したりとか, そういう展開があってもいいですよね. 今後どうなるか期待です.</p>

<h2>自分のトーク</h2>

<p>で, 自分ですが｢GPGPUとXSとわたし｣というタイトルで, PerlにおけるGPGPUの現状と, XSについての話をして来ました.<br/>
資料はこちらです(後でアップします...)</p>

<p>前半は割と学術っぽいネタで, 後半はXSという人を選ぶ中級者向けなネタだったので, ビギナーな方には｢あー, こういう世界があるんだなー｣というのを感じて頂けるように努力... したつもりなんですが如何でしたでしょうか.<br/>
人を選ぶネタなので, お昼寝兼内職タイムになっちゃうのでは? と懸念していたのですあg, 予想以上に興味部書く聞いて頂けましたし, 質問もいくつか飛んできたので非常に嬉しかったです.</p>

<p>あと, PerCUDAの成果として完成した｢PerCUDA::Backend::GPU｣ですが, これ普通にPerlからPTXをデバイスAPIを使って呼び出すツールとして使える気がするので, ｢CUDA::DeviceAPI｣みたいな名前で独立したモジュールとして公開してもいいんじゃないかなー, と思ったりしました.<br/>
人柱よろしくです! (To GPGPUで研究をしている八王子在住のPerl Monger)</p>

<h2>福岡最高!</h2>

<p>常日頃から言っていますが, 福岡は自分にとって最高の都市の1つです.<br/>
まず都市の規模が程よくコンパクトで, 移動がとても楽. 東京で言えば新宿と渋谷と銀座が徒歩圏内にある, みたいなイメージでしょうか.
あと空港から中心部までの距離が異常に近いのも良いですね. 博多駅から福岡空港まで, 地下鉄で2駅ですし.</p>

<p>あと食いしん坊バンザイな自分やゆーすけべーさんからすると, 屋台だったり居酒屋だったり, 飲食店のレベルが高いのも高印象でした. 要するに, 適当な店に行っても大抵メシがウマイ.
そして焼酎がとても安いですね! 黒霧島とか, 多分大阪や東京の100〜200円引きくらいの値段で飲めます.</p>

<p>そしてあれです. Fukuoka.pmとかに行くと, 地元の方が自信を持っておすすめするお店とかに行く事になるので, まあマズいはずがないですよね, ええ.</p>

<p><img src="http://hachiojipm.github.io/static/image/nabe.jpg" alt="モツ鍋" /></p>

<p>こちらのモツ鍋は, Fukuoka.pmの懇親会(1次回)で行ったモツ鍋屋のモツ.<br/>
ちなみにこの後, 2次会でラーソーメンを食べ, 3次会で屋台に行って鶏の炭火焼や餃子を食べたりしてました.<br/>
最終的な解散時間は午前1時...! そして地元の方はずっとビールなり焼酎なりを飲み続けていました. お酒に強すぎィ!</p>

<p><img src="http://hachiojipm.github.io/static/image/mentaiko.jpg" alt="明太子御飯" /></p>

<p>こちらの明太子御飯は, Fukuoka.pmの翌日(つまり今日), ｢ここ超よさそうじゃね!?｣とゆーすけべーさんが見つけたお店で食べたもの.<br/>
多分, これ東京で食べたら間違いなく1.5〜2倍くらいの値段がするんじゃないかなあ...</p>

<h2>さいごに</h2>

<p>Fukuoka.pm最高! 呼ばれなくてもまた来ますし, 呼ばれたら絶対に行きます!!!<br/>
ちなみに次のFukuoka.pmには<a href="http://yancha.hachiojipm.org/quot?id=168623,168617">｢ツールチェインギャング見習い｣として有名なmoznion氏も参加</a>するみたいなので, とても楽しみですね!</p>

<p>Fukuoka.pm #24に参加された皆様, そして交通費をスポンサードして頂いたゆーすけべーさん, uzullaさん, てつじさん, 本当に本当に, ありがとうございました!</p>

<center>Fukuoka.pm最高〜〜〜〜〜〜〜〜〜〜〜ッ!!!!!</center>



]]></content>
<id>tag:hachiojipm.github.io,2013-10-27:entry-2013-10-27-fukuokapm.html</id>
<published>2013-10-27T22:22:55+0900</published>
<updated>2013-10-27T17:22:55+09:00</updated>
</entry>
<entry>
<title type="text">肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</title>
<link href="http://hachiojipm.github.io/entry/2013-09-29-nephia.html" />
<author>
<name>ytnobody</name>
</author>
<content><![CDATA[<h1>肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</h1>

<p>はい、ハチオージピーエム日めくりテックトークのお時間がやってまいりました！9月29日の土曜日、時刻は16時54分を回ったところです。皆さんこんばんは！今日は私、わいとんぼーい(ytnobody)がお茶の間にテックな話題をお届けしてまいります！</p>

<p>さて、今日は肉の日です。えー皆さん、お肉たべてますか？お肉たべましょうね！もちろんお肉だけじゃダメなので、野菜もバランスよく食べるといいですよー。今日の夕御飯はどんな肉料理が食卓に並ぶのでしょうか、楽しみですねー。</p>

<p>そして！年に一度の「苦肉の策」の日でもあります。まあこれは私あたりが勝手にそう言ってるだけではありますけれども、そろそろわれらがハチオージピーエムの面々もエントリを書くのがだるくなってきたせいか、3日ほどこちらの日めくりテックトークも「苦肉の策」として、わたくしにパーソナリティのバトンが回ってきた次第です。・・・嘘です（笑</p>

<p>えー、それではそろそろ本日のメインコーナーにまいりたいと思います。</p>

<p>実はですね、今朝8:30ころにわたくし「ネフィア(Nephia)」というモジュールをCPANにリリース致しました！あーどうもどうも！ありがとうございますー！</p>

<p>それでですね、今日はその簡単な使い方の説明と、あとざっくりとした特徴といいますか、そう言うところをですね、説明していきたいと思うんですねー、どうですかちょっと楽しみになってきたんじゃないですか？</p>

<p>えーまずですね使いかたの方を説明していきますねー、っと、今日はこの説明のためにノートパソコンを用意していただいたんですけども、こちらのパソコンにはplenvと言うものが入っていてですね、そこにcpanmというものが用意されていると、いうことです。あ、もうNephiaもインストール済みなんですか？・・・あー、入ってるんですね、すいません、もう入ってるそうです！</p>

<p>じゃあ早速ですけど、すごく単純なwebアプリを作っていきましょうねー、大丈夫です20秒くらいで出来上がりますので！あっさりしていて今晩のおかずにもぴったりですよ！じゃあ次のようなコマンドを実行してみますねー、はいっ！</p>

<pre><code>$ nephia-setup MyApp
</code></pre>

<p><img src="http://hachiojipm.github.io/static/image/nephia-01.png" alt="実行！" /></p>

<p>そうすると、ほら、何か色々でてきましたねー！なんとですね、これで完成です・・・！！じゃあ早速試食してみましょう！</p>

<pre><code>$ cd MyApp
$ plackup
</code></pre>

<p>はい！これで http://hachiojipm.github.io:5000/ にアクセスしてみるとですね、なんともシンプルな味わいのページが表示されましたね！中身も非常にシンプルでして、こんな感じになっておりまーす！</p>

<pre><code>MyApp/
├── Changes
├── app.psgi
├── cpanfile
├── lib
│   └── MyApp.pm
└── t
    └── 001_use.t
</code></pre>

<p>肝になりそうなファイルをみていきますと、まずapp.psgiですがこんな感じ。</p>

<pre><code>use strict;
use warnings;
use File::Spec;
use File::Basename 'dirname';
use lib (
    File::Spec-&gt;catdir(dirname(__FILE__), 'lib'), 
);
use MyApp;

MyApp-&gt;run;
</code></pre>

<p>だいぶシンプルですねー、そして、本体であるlib/MyApp.pmはこんな感じになっています！</p>

<pre><code>package MyApp;
use strict;
use warnings;
use Nephia;

our $VERSION = 0.80;

app {
    [200, [], 'Hello, World!'];
};

1;
</code></pre>

<p>はい！こちらもまたえらくシンプルですねー！見て分かると思いますけど、Nephia自体ではなんとディスパッチャーとかルーターと呼ばれるものをですね、持っていないんですねー。そしてそして、テンプレートエンジンも含んでいないんです！とにっかく小さいwebアプリケーションに特化していますので、Nephia＝Plackに毛のはえた程度 と思っていただいて大体間違いないんじゃないかと思います！</p>

<p>まあでも、さすがにこれではちょっとシンプル過ぎて・・・という奥様方もいらっしゃると思います。そうでしょうそうでしょう！実はですね、今やったのはMinimalセットアップという方法でプロジェクトをでっち上げたんですね。で、ミニマルというだけあって、本当になにもないんですよ。なので、もう少しダシの効いた仕上がりになるセットアップ方法という物もご紹介いたします。</p>

<p>はい、それでは今度はcpanmでNephia::Setup::Plugin::Normal というものをですね、準備しておいていただきまして、以下のようにセットアップを実行してみてください。</p>

<pre><code>$ nephia-setup SuperMyApp --plugins Normal
</code></pre>

<p><img src="http://hachiojipm.github.io/static/image/nephia-02.png" alt="実行！" /></p>

<p>これでできあがりです。先ほどと同じようにplackupして、ブラウザでアクセスしてみますと、なんとbootstrapでレイアウトが組まれたページがでてきましたね！</p>

<p>中身をみてみますと、こんな感じです。</p>

<pre><code>SuperMyApp/
├── Changes
├── app.psgi
├── cpanfile
├── lib
│   └── SuperMyApp.pm
├── static
│   ├── bootstrap
│   │   ├── css
│   │   │   ├── bootstrap-responsive.css
│   │   │   ├── bootstrap-responsive.min.css
│   │   │   ├── bootstrap.css
│   │   │   └── bootstrap.min.css
│   │   ├── img
│   │   │   ├── glyphicons-halflings-white.png
│   │   │   └── glyphicons-halflings.png
│   │   └── js
│   │       ├── bootstrap.js
│   │       └── bootstrap.min.js
│   └── js
│       └── jquery.min.js
├── t
│   └── 001_use.t
└── view
    └── index.html
</code></pre>

<p>で、先ほどと同様にこちらもapp.psgiをみてみますと、</p>

<pre><code>use strict;
use warnings;
use Plack::Builder;
use Plack::Session::Store::Cache;
use Cache::SharedMemoryCache;
use File::Spec;
use File::Basename 'dirname';
use lib (
    File::Spec-&gt;catdir(dirname(__FILE__), 'lib'), 
);
use SuperMyApp;

my $app           = SuperMyApp-&gt;run;
my $root          = File::Spec-&gt;rel2abs(File::Spec-&gt;catdir(dirname(__FILE__)));
my $session_cache = Cache::SharedMemoryCache-&gt;new({
    namespace          =&gt; 'SuperMyApp',
    default_expires_in =&gt; 600,
});

builder {
    enable_if { $ENV{PLACK_ENV} =~ /^dev/ } 'StackTrace', force =&gt; 1;
    enable 'Static', (
        root =&gt; $root,
        path =&gt; qr{^/static/},
    );
    enable 'Session', (
        store =&gt; Plack::Session::Store::Cache-&gt;new(
            cache =&gt; $session_cache,
        ),
    );
    enable 'CSRFBlock';
    $app;
};
</code></pre>

<p>そして lib/SuperMyApp.pmは、この様になっております。</p>

<pre><code>package SuperMyApp;
use strict;
use warnings;
use File::Spec;

our $VERSION = 0.01;

use Nephia plugins =&gt; [
    'JSON',
    'View::MicroTemplate' =&gt; {
        include_path =&gt; [File::Spec-&gt;catdir('view')],
    },
    'ResponseHandler',
    'Dispatch',
];

app {
    get '/' =&gt; sub {
        {template =&gt; 'index.html', appname =&gt; 'SuperMyApp'};
    };

    get '/simple' =&gt; sub { 
        [200, [], 'Hello, World!']; 
    };

    get '/json' =&gt; sub { 
        {message =&gt; 'Hello, JSON World'};
    };
};

1;
</code></pre>

<p>よく見ると、ディスパッチャーがありますけれど、このセットアップ方法はNormalセットアップといいまして、このノーマルな方法でセットアップをこなすと、ディスパッチャーとテンプレート、それからなんとJSON出力機能がついてくるんですねー、非常に便利になりました！</p>

<p>さて、ここまでざくざくーっと使い方と中身を見ていただきましたが、このNephia、最大の特徴は「DSL」です！プラグインをどんどん読み込んでいくと、その分DSLが追加される、というのが基本です。っと、どうやら時間となってしまった模様です！</p>

<p>次回の放送予定は明日ですが、無事に放送に至ることができるのか！？ご期待ください！！！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-29:entry-2013-09-29-nephia.html</id>
<published>2013-09-29T10:10:07+0900</published>
<updated>2013-10-14T23:35:28+09:00</updated>
</entry>
<entry>
<title type="text">Compiler::CodeGenerator::LLVMで遊ぼう!</title>
<link href="http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Compiler::CodeGenerator::LLVMで遊ぼう!</h1>

<p>今日は, <a href="https://twitter.com/goccy54">@goccy54</a>さんが開発された<a href="https://github.com/goccy/p5-Compiler-CodeGenerator-LLVM">Compiler::CodeGenerator::LLVM</a>を導入して, ひと通り動かすまでのアレコレをご紹介したいと思います.</p>

<h2>LLVMのインストール</h2>

<p>Compiler::CodeGenerator::LLVMはLLVM 3.3に依存しているので, まず最初にLLVM 3.3を導入します.<br/>
ついでにLLVMを基盤とするコンパイラのClangと, ランタイムライブラリのCompiler RTも入れてしまいましょう.</p>

<p>まず, <a href="http://www.llvm.org/releases/download.html#3.3">こちらのページ</a>から, <code>Clang source code</code>, <code>LLVM source code</code>, <code>Compiler RT source code</code>をクリックして, 必要なソースコードをダウンロードします.</p>

<pre><code>$ wget http://llvm.org/releases/3.3/cfe-3.3.src.tar.gz
$ wget http://llvm.org/releases/3.3/compiler-rt-3.3.src.tar.gz
$ wget http://llvm.org/releases/3.3/llvm-3.3.src.tar.gz
</code></pre>

<p>それぞれ, <code>cfe-3.3.src.tar.gz</code>, <code>llvm-3.3.src.tar.gz</code>, <code>compiler-rt-3.3.src.tar.gz</code>というファイルがダウンロードできるので, さっさと解凍してしまいます.</p>

<pre><code>$ tar -xf cfe-3.3.src.tar.gz
$ tar -xf llvm-3.3.src.tar.gz
$ tar -xf compiler-rt-3.3.src.tar.gz
</code></pre>

<p>解凍してできた<code>llvm-3.3.src</code>の中の適切な位置に, <code>cfe-3.3.src</code>と<code>compiler-rt-3.3.src</code>を配置していきます.</p>

<pre><code>$ mv cfe-3.3.src llvm-3.3.src/tools/clang
$ mv compiler-rt-3.3.src llvm-3.3.src/projects/compiler-rt
</code></pre>

<p>続いて, <code>llvm-3.3.src</code>ディレクトリに移動して, <code>configure</code>で設定を行います.</p>

<pre><code>$ cd llvm-3.3.src
$ ./configure
</code></pre>

<p>問題なく<code>configure</code>が終われば, <code>make</code>, <code>make check</code>, <code>make install</code>でビルドして, インストールまで済ませます.<br/>
ちなみに<code>configure</code>を実行する際, <code>--prefix</code>オプションで任意の場所にLLVMやClangをインストールすることができますが, 手元の環境では何故かうまく動かなかったのでデフォルトでインストールした方が良さそうです.<br/>
｢sudoで入れるの嫌だなあ...｣という方はVagrantとかVirtualBoxとか, そういうのを作ってCompiler::CodeGenerator::LLVM用のVMを建てましょう!</p>

<pre><code>$ make
</code></pre>

<p>ちなみに, <code>make</code>コマンドは<code>make -jN</code>とすることで, Nコアを使って処理を進めることができます.<br/>
ビルドには時間がかかるので, <code>make -j2</code>とか<code>make -j4</code>とかで高速化しましょう.</p>

<pre><code>$ make check
$ sudo make install
</code></pre>

<p><code>make check</code>は任意ですが, とりあえずやっておきましょう. 手元の環境では100件ほどFailしますが, おそらく大丈夫... だと思います.<br/>
あとは<code>sudo make install</code>を実行すれば, LLVMとClangがインストールされます.</p>

<pre><code>$ which llvm-config
/home/username/local/llvm/bin/llvm-config
$ llvm-config --version
3.3
</code></pre>

<p>といった感じで, LLVMとClangが正常にインストールできていることが確認できれば, 準備完了です.</p>

<h2>Compiler::CodeGenerator::LLVMのインストール</h2>

<p>それではCompiler::CodeGenerator::LLVMをインストールしましょう.</p>

<p>まず依存モジュールの準備です.<br/>
Compiler::CodeGenerator::LLVMは, こちらもまたgoccy氏が開発した<a href="https://github.com/goccy/p5-Compiler-Lexer">Compiler::Lexer</a>と<a href="https://github.com/goccy/p5-Compiler-Parser">Compiler::Parser</a>に依存しているので, これを入れる必要があります.</p>

<pre><code>$ cpanm Compiler::Lexer Compiler::Parser
</code></pre>

<p>どちらもCPANizeされているので, 素直に<code>cpanm</code>でインストールしてもいいですし, GitHubからcloneしてインストールしてもよいでしょう.<br/>
ちなみにどちらのモジュールも, Minillaで開発されているので<code>minil install</code>でインストールできます.</p>

<p>依存モジュールの準備が終われば, いよいよCompiler::CodeGenerator::LLVMのインストールです.<br/>
こちらのモジュールは, まだCPANizeされていないので,</p>

<pre><code>$ git clone https://github.com/goccy/p5-Compiler-CodeGenerator-LLVM.git
</code></pre>

<p>でcloneしてきてから,</p>

<pre><code>$ cd p5-Compiler-CodeGenerator-LLVM
$ perl Makefile.PL
$ make
$ make test
$ make install
</code></pre>

<p>の手順でインストールしていきます.</p>

<h2>早速, 試す!</h2>

<p>それでは早速, Compiler::CodeGenerator::LLVMで遊んでみましょう.<br/>
まずはSynopsisのコードを動かしてみます.</p>

<pre><code>use Compiler::Lexer;
use Compiler::Parser;
use Compiler::CodeGenerator::LLVM;

my $filename = $ARGV[0];
open(my $fh, "&lt;", $filename) or die("$filename is not found.");
my $script = do { local $/; &lt;$fh&gt; };
my $lexer = Compiler::Lexer-&gt;new($filename);
my $tokens = $lexer-&gt;tokenize($script);
my $parser = Compiler::Parser-&gt;new();
my $ast = $parser-&gt;parse($tokens);
my $generator = Compiler::CodeGenerator::LLVM-&gt;new();    
my $llvm_ir = $generator-&gt;generate($ast); # generate LLVM-IR
$generator-&gt;debug_run($ast); # execute LLVM-IR with JIT
</code></pre>

<p>Synopsisのコードは, 標準入力に与えられたファイル名に書かれているコードからLLVM IRを生成して, それをJITで実行するというスゴイやつです.<br/>
テストコードを<code>synopsis.pl</code>みたいな名前で保存して,</p>

<pre><code>use strict;
use warnings;

my @arg = (0, 1, 2, 3, 4);
foreach my $i (@arg) {
    say $i;
}
</code></pre>

<p>こんな感じのファイルを<code>sample.pl</code>で保存して, <code>$ perl synopsis.pl sample.pl</code>てな感じで実行すると...</p>

<pre><code>$ perl synopsis.pl sample.pl
0
1
2
3
4
</code></pre>

<p>Wow! 実行できましたね.<br/>
個人的には, 内部で生成されたLLVM IRをダンプできれば, いろいろと遊べそうな感じがしますが, 現状そのようなメソッドはないっぽいので, 今後に期待したいと思います.<br/>
(時間があれば実装とかチャレンジしてみたい所ですが... XSだしなあ...)</p>

<h2>まとめ</h2>

<p>YAPC::Asiaにおいて, 注目の的の1つでもあったPerlMotionを支えるgoccy wareの, Compiler::CodeGenerator::LLVMの導入方法をまとめてみました.<br/>
このモジュールが完成すれば, PerlでiPhoneアプリが開発できるようになるだけでなく, PerlのコードをLLVM IR経由で各種バイナリに変換したり, C言語に変換したり, CUDAに変換したり... と, いろいろな可能性が期待できるようになります.</p>

<p>今後も, バク報告だけでなく, 出来ればコードをコミットしていく... という方法で, Compiler::CodeGenerator::LLVMやCompiler::Lexer, Compiler::Parserといったgoccy wareをサポートして行けたらいいなあ, と思っています.<br/>
これからのCompiler::CodeGenerator::LLVM, 要チェックですね!</p>

<p>なお, 今回この記事を書くにあたり, 作者の<a href="https://twitter.com/goccy54">@goccy54</a>さんに大変, ものっすごっく, アドバイスとご協力を頂きました.<br/>
この場をお借りして御礼申し上げます. 本当にありがとうございました!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-14:entry-2013-10-14-codegenerator-llvm.html</id>
<published>2013-10-14T35:35:28+0900</published>
<updated>2013-10-14T23:35:28+09:00</updated>
</entry>
<entry>
<title type="text">Perl の文字列エンコーディングの話</title>
<link href="http://hachiojipm.github.io/entry/2013-10-01-encoding.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>Perl の文字列エンコーディングの話</h1>

<p>ハァイ，先日 <a href="https://metacpan.org/module/Plack::Request::WithEncoding">Plack::Request::WithEncoding</a> というモジュールをリリースしました，<a href="https://twitter.com/moznion">@moznion</a> です．皆様いかがお過ごしでしょうか．<br/>
さて，このモジュールを書いてて Perl の文字列エンコーディングに関する知識を幾ばくか深めましたので，共有したいと思います．まあ大体の皆さんは「そんなこと知ってるぜ！！　常識だろ！」という趣だと存じ上げますが……</p>

<p>ただまあ，「文字化けしてつらい！！」みたいなのは誰しも通る道だと思いますので記しておくこととします！</p>

<h2>TL;DR</h2>

<blockquote><p>入り口で decode して，内部ではすべて flagged utf8 で扱い，出口で encode する．これがすべてです！とにかくこの基本方針をまもっていれば幸せになれます．</p>

<p>from <a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p></blockquote>

<p>ぶっちゃけ，上記のエントリ良すぎるのでそれ読めば良いです．<br/>
以下はもう蛇足ですね！</p>

<h2>注意</h2>

<p>本エントリで示すソースコードでは，紙面の都合上</p>

<pre><code>use strict;
use warnings;
</code></pre>

<p>が省略されていますが，存在するものとして読み下して下さい．<br/>
<code>use strict</code> しないと世界が滅びます．</p>

<h2>このエントリで説明しないこと</h2>

<ul>
<li>Perl とは何か</li>
<li>文字コードとは何か</li>
</ul>


<h2>Perl の処理系における文字列の扱い</h2>

<p>Perl における文字列の扱いは，大きく2つに分けると「Perl 内部表現」と「バイト列 (latin-1)」に分類出来ます．</p>

<p>Perl 内部表現はその名の通り Perl が内部的に利用・保持する文字列のことです．よく“内部表現”だとか“内部文字列”だとか“flagged utf8”だとか呼ばれていますが，本エントリではわかりやすいので“内部表現”と呼ぶことにします．<br/>
内部表現ではない文字列に関して，Perl は バイト列 (latin-1) として扱います．</p>

<h2>エンコーディング</h2>

<p>本エントリで述べる「エンコード」は内部表現を指定したエンコーディング方式によりバイト列に変換する処理，
「デコード」はバイト列を内部表現に変換する処理のことを指します．</p>

<p>Perl では文字列のエンコード及びデコード処理を行う際には <a href="https://metacpan.org/module/Encode">Encode</a> モジュールを利用します．<br/>
本エントリではエンコード処理を行うメソッドである <code>encode()</code> と デコード処理を行うメソッドである <code>decode()</code> について説明します．</p>

<h3>Encode::decode('Encoding method', 'なんらかの文字列')</h3>

<p><code>decode()</code> メソッドは 'Encoding method' で表現されているバイト列を <strong>「内部表現」に変換</strong> します．<br/>
例えば以下のような感じです．</p>

<pre><code>use Encode;
my $decoded = Encode::decode('EUC-JP', $str); # &lt;= $str には EUC-JP でエンコードされた文字列が入っている
                                              # &lt;= だから decode() の第1引数は 'EUC-JP'
</code></pre>

<p>こうすると，'EUC-JP' でエンコードされている <code>$str</code> の内容 (バイト列) が内部表現に変換され，その内部表現が <code>$decoded</code> に格納されます．</p>

<h3>Encode::encode('Encoding method', 'なんらかの文字列')</h3>

<p><code>encode()</code> メソッドは「内部表現」を <strong>'Encoding method' でエンコード</strong> し，バイト列に変換します．<br/>
例えば以下のような感じです．</p>

<pre><code>use Encode;
my $decoded = Encode::decode('EUC-JP', $str);    # &lt;= $str には EUC-JP でエンコードされた文字列が入っている
my $encoded = Encode::encode('cp932', $decoded); # &lt;= $decoded は内部表現
</code></pre>

<p>こうすると，内部表現である <code>$decoded</code> が 'cp932' でエンコードされたバイト列に変換されて <code>$encoded</code> に格納されます．</p>

<h2>use utf8</h2>

<p>Perl には <code>use utf8</code> というプラグマがあります．<br/>
これはソースコードが 'utf8' によりエンコードされていることを伝えるプラグマです．<br/>
とは言ってもこの説明だと何が起こるのかがわかりにくいので，あけすけに説明しますと，<br/>
<code>use utf8</code> してから文字列リテラルを使って文字列を作ると，その時点でその文字列は内部表現になります．<br/>
(他にも正規表現でユニコード使えるようになったり，関数名や変数名にユニコード使えるようになったりしますが
 本筋から外れるのでここでの説明は割愛します)</p>

<p>注意としては，コードが書かれているファイル自体のエンコーディング方式が utf-8 である必要があります．</p>

<p>なので，ファイルエンコーディングが utf-8 である場合，</p>

<pre><code>use Encode;

my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= あなたとJava
</code></pre>

<p>というコードと</p>

<pre><code>use utf8;
use Encode;

my $decoded = "あなたとJava";
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= あなたとJava
</code></pre>

<p>というコードは等価です．</p>

<h2>結局どーすりゃ良いのさ</h2>

<blockquote><p>入り口で decode して，内部ではすべて flagged utf8 で扱い，出口で encode する．これがすべてです！とにかくこの基本方針をまもっていれば幸せになれます．</p>

<p>from <a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p></blockquote>

<p>まさにこれに尽きます．</p>

<p>そもそも，なぜ入り口で decode して，内部ではすべて内部表現で取り扱わなければならないのかというと，
Perl の外の世界には様々なエンコーディング方式があって，混沌としており怖い世界な訳ですよ．</p>

<p>そういう多種多様様々なエンコーディング方式をそれぞれケアするのは大変なので，
Perl ではそれらを統一的に扱えるように一度「内部表現」というものに落としこんでから，
そこでゴニョゴニョ操作して，エンコードしてバイト列化してやってから外の世界に
持って行ってやるという感じですね．</p>

<p>あと，ここ最近は utf-8 以外でファイル保存する人とかいないし，面倒が減るから，
<code>use utf8</code> プラグマは常に有効にしておけば良いのではないかという意見もありますね！</p>

<h2>よくあるエラーや文字化け</h2>

<p>(以降の例ではファイルエンコーディングは utf-8 であることが前提です)</p>

<h3>内部表現をそのまま出力しようとしている</h3>

<pre><code>use Encode;
my $decoded = Encode::decode("utf-8", "あなたとJava");
print $decoded; # &lt;= Warning!
</code></pre>

<p>あるいは</p>

<pre><code>use utf8;
my $decoded = "あなたとJava";
print $decoded; # &lt;= Warning!
</code></pre>

<p>みたいにしてやると，<code>Wide character in print</code> という警告メッセージが出ます．<br/>
これは内部表現をそのまま外に出力しようとしている為に発生します．<br/>
なのでこれは以下のように encode して，内部表現ではなくしてやる必要があります．
(「内部表現ではなくすること」を，「UTF8フラグを落とす」と表現する事もあります．
 UTF8 フラグについては後述します)</p>

<pre><code>use Encode;
my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= "あなたとJava"
</code></pre>

<h3>おかしなエンコーディング方式で decode を試みている</h3>

<pre><code>use Encode;
my $decoded = Encode::decode("EUC-JP", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= 化ける！
</code></pre>

<p>こうすると文字化けします．それもそのはず，ファイルが <strong>utf-8でエンコードされている</strong> ので
"あなたとJava" は utf-8 になっています．それをこのコード例のように "EUC-JP" という違う
エンコーディングで decode しようとすると化けてしまいます．<br/>
解決策としては当然ですが，適切なエンコーディング方式で decode してやると良いです．</p>

<p>また，<strong> utf-8以外でエンコーディングされているファイル</strong> に対して <code>use utf8</code> し，
なおかつ文字列にマルチバイト文字が含まれていると例外が発生します;</p>

<pre><code>use utf8;
my $str = "あなたとJava"; # &lt;= ここで警告が出る
</code></pre>

<p><code>use utf8</code> の注意の部分にも書きましたが，<code>use utf8</code> する場合は，ソースコードのファイルエンコーディングも
utf-8 でなければなりません．</p>

<h3>内部表現と，内部表現ではない文字列を連結させている</h3>

<pre><code>use Encode;
my $raw     = "あなた";
my $decoded = Encode::decode("utf-8", "とJava");

my $concatenated = $raw . $decoded;
print Encode::encode("utf-8", $concatenated); # &lt;= 文字化けする
</code></pre>

<p>まあ化けますよね！　という感じです．説明は tokuhirom さんのブログが詳しいのでそちらを読んだほうが明らかに良いです．<br/>
<a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p>

<h2>補足的情報</h2>

<h3>UTF8フラグ</h3>

<p>“UTF8フラグ”とは，「内部表現になっているかどうか」を判断するフラグです．
UTF8フラグが立っていればそれは内部表現であり，立っていなければその文字列はバイト列 (latin-1) です．</p>

<p>ここからはあんまり知らなくても良い情報です．CPAN モジュールを記述する人は気にするべきでしょう．</p>

<p>さてちょっと分かりにくいのですが，UTF8フラグが立っている文字列 (つまり内部表現) と
我々が日常使っているutf-8バイナリは <strong>別物です</strong>．気をつけましょう．<br/>
UTF8フラグ，名前が良くなくて，本来なら「内部表現フラグ」とかそういう名前にするべきだと思うんですけど，
まあそうなっちゃってるから仕方がないので，そういうものだと諦めて下さい．</p>

<h3>Devel::Peek</h3>

<p>UTF8フラグが立っているか立っていないかは一見するとわかりませんが，Devel::Peek というモジュールを利用すると
それを確認することができます．使い方としては以下のような感じです．</p>

<pre><code>use Encode;
use Devel::Peek;
my $str = Encode::decode("utf-8", "あなたとJava");
Devel::Peek::Dump($str);
</code></pre>

<p>これを実行すると以下のような結果を得られます;</p>

<pre><code>SV = PV(0x9fe5628) at 0x9ff7788
REFCNT = 1
FLAGS = (PADMY,POK,pPOK,UTF8)
PV = 0xa045ac8 "\357\277\275\357\277\275\357\277\275\312\244\357\277\275\357\277\275\357\277\275Java"\0 [UTF8 "\x{fffd}\x{fffd}\x{fffd}\x{2a4}\x{fffd}\x{fffd}\x{fffd}Java"]
CUR = 24
LEN = 28
</code></pre>

<p>色々と情報が記されていますが，ここで注目すべきは <code>FLAGS</code> の部分です．上の例では FLAGS に UTF8 が記されており，
これは UTF8 フラグが立っている，つまり $str は内部表現になっていることを表しています．</p>

<p>一方で，</p>

<pre><code>use Encode;
use Devel::Peek;
my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
Devel::Peek::Dump($encoded);
</code></pre>

<p>というコードを実行すると以下のような結果が得られるでしょう．</p>

<pre><code>SV = PV(0x9d1e540) at 0x9d307d8
REFCNT = 1
FLAGS = (PADMY,POK,pPOK)
PV = 0x9da3a98 "\357\277\275\357\277\275\357\277\275\312\244\357\277\275\357\277\275\357\277\275Java"\0
CUR = 24
LEN = 28
</code></pre>

<p>この結果には FLAGS に UTF8 フラグが示されていない為，これは $encoded は内部表現ではないことがわかりますね．</p>

<p>※あとお気づきとは思いますが，2つの例では PV の値が違いますね．片方は内部表現 (つまり UTF8 フラグが ON) で，<br/>
もう片方は utf-8 でエンコードされた文字列 (つまり我々が普段使う utf-8 バイナリ) です．ね，別物でしょ？</p>

<h2>これが Perl のエンコーディング！！！</h2>

<p>なんだか複雑ですね！！！！！<br/>
ただまあ，慣れればどうということはないでしょう......多分．<br/>
この記事が Perl のエンコーディングの理解の一助になれば幸いです．</p>

<p>あとお気づきでしょうが，tokuhirom さんのブログをこのエントリでは3回も引用しています．<br/>
詰まった時に何を読めば良いかは，聡明な皆様だったらもうお分かりですね！</p>

<h2>それはそうと</h2>

<p>私事で申し訳ありませんが，先日わたくし退学に失敗いたしましたので，<br/>
退学に失敗したことを記念しまして，「退学失敗Night」というイベントが開催されます．<br/>
おそらく渋谷の HUB でただただ飲む会になると思いますので，お暇でしたらご参加下さい．</p>

<p><a href="http://atnd.org/events/44147">http://atnd.org/events/44147</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-01:entry-2013-10-01-encoding.html</id>
<published>2013-10-01T52:52:00+0900</published>
<updated>2013-10-05T11:13:44+09:00</updated>
</entry>
<entry>
<title type="text">Perlの警告と例外を両方握りつぶすtypesterハック</title>
<link href="http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Perlの警告と例外を両方握りつぶすtypesterハック</h1>

<p>先日<a href="http://unknownplace.org/archives/start-new-company.html">独立</a>された<a href="https://twitter.com/typester">@typester</a>さんのモジュール<a href="http://search.cpan.org/~typester/GitDDL-0.02/lib/GitDDL.pm">GitDDL</a>のコードを見ていたらよくわかんところがありまして、はちぴー御用達のChatサービス<a href="http://yancha.hachiojipm.org/">yancha</a>でいろいろと教えてもらったので、そのご報告です。ちょっとマニアックな話題なので、はてぶとかでどしどし間違いだったりの突っ込みよろしくですー！</p>

<h2>hackishな問題のコード</h2>

<pre><code>    my $version = try { ## ここのコードがhackishでよくわからん！！！
        open my $fh, '&gt;', \my $stderr;
        local *STDERR = $fh;
        $self-&gt;database_version;
        close $fh;
    };
</code></pre>

<p>さてこれが問題のコードです。ここだけパッと見ると、</p>

<ul>
<li>謎にtryが始まって</li>
<li>スカラーリファレンスのファイルハンドル開いて</li>
<li>STDERRにぶち込んで</li>
</ul>


<p>なんじゃこりゃ？と思ったわけです。</p>

<h2>全体をみるとのコード</h2>

<p>一部だけに注目しているとわけがわからんことはしばしばで、yanchaで聞いたらよくよく全体を見たら少しわかります。</p>

<pre><code>sub deploy {
    my ($self) = @_;

    my $version = try { ## ここのコードがhackishでよくわからん！！！
        open my $fh, '&gt;', \my $stderr;
        local *STDERR = $fh;
        $self-&gt;database_version;
        close $fh;
    };

    if ($version) {
        croak "database already deployed, use upgrade_database instead";
    }

    croak sprintf 'invalid version_table: %s', $self-&gt;version_table
        unless $self-&gt;version_table =~ /^[a-zA-Z_]+$/;

    $self-&gt;_do_sql($self-&gt;_slurp(File::Spec-&gt;catfile($self-&gt;work_tree, $self-&gt;ddl_file)));

    $self-&gt;_do_sql(&lt;&lt;"__SQL__");
CREATE TABLE @{[ $self-&gt;version_table ]} (
    version VARCHAR(40) NOT NULL
);
__SQL__

    $self-&gt;_dbh-&gt;do(
        "INSERT INTO @{[ $self-&gt;version_table ]} (version) VALUES (?)", {}, $self-&gt;ddl_version
    ) or croak $self-&gt;_dbh-&gt;errstr;
}


sub database_version {
    my ($self) = @_;

    croak sprintf 'invalid version_table: %s', $self-&gt;version_table
        unless $self-&gt;version_table =~ /^[a-zA-Z_]+$/;

    my ($version) =
        $self-&gt;_dbh-&gt;selectrow_array('SELECT version FROM ' . $self-&gt;version_table);

    if (defined $version) {
        return $version;
    }
    else {
        croak "Failed to get database version, please deploy first";
    }
}
</code></pre>

<h2>問題を抽象化したコード</h2>

<p>一部だけに注目しているとわけがわからんことはしばしばで、yanchaで聞いたらよくよく全体を見たらよくわかりました。deployメソッドの中では、database_versionのリターンが偽が期待されているんだけど、その場合「$self->_dbh->selectrow_array('SELECT version FROM ' . $self->version_table);」でDBIの設定によって警告が出るので、それを/dev/nullに入れる的なことをしたいということなんですね。要するに、以下のコードがその状況を抽象化したもののようです。</p>

<pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
binmode STDOUT, ":utf8";
use Try::Tiny;
use Test::More;

sub warn_and_die {
    warn "警告だよ！！";
    die "例外だよ！！";
}

my $res = try {
    open my $fh, '&gt;', \my $stderr;
    local *STDERR = $fh;
    warn_and_die();
    close $fh;
};

ok !$res;

done_testing;
</code></pre>

<h2>考察と疑問</h2>

<p>まぁそれでもよくわからないことはいくつかあるのでそれについてつらつらと。</p>

<h3>スカラーリファレンスを対象にファイルハンドル開けるんだ</h3>

<pre><code>    open my $fh, '&gt;', \my $stderr;
</code></pre>

<p>ここですが、ほとんど見慣れないですよね。</p>

<h3>STDERRにファイルハンドルを突っ込む</h3>

<pre><code>local *STDERR = $fh;
</code></pre>

<p>これですね。よく</p>

<pre><code>local $SIG{TERM} = sub { $cnt = 0 };
</code></pre>

<p>とかやってforkマネージャーみたいなやつで、シグナルハンドラをいじるのはみかけますが、STDERRをオーバーライドするのはぼくは初めてお目にかかりました。</p>

<pre><code>local *STDERR = undef;
</code></pre>

<p>こんな感じに$fhのファイルハンドルわざわざ開かずにundef突っ込んでもよいのでは？という話もありましたがSTDERRはファイルハンドルなのでファイルハンドルをつっこまなければならないようです。</p>

<h3>close $fhのリターンバリューは何か</h3>

<p>tryブロックのリターンバリュー（GitDDLのコードでいう$version、先ほどの簡易コードでいう$resに入るデータ）は、close $fhの返り値になるわけですが（なるよね？）、そんなもの普段意識しないのでちょっと疑問に思いますね。数年後にはtypesterさん並みのハッカーになっているだろう<a href="https://twitter.com/mackee_w">まこぴー</a>さんが、颯爽と<a href="http://perldoc.jp/func/close">closeのドキュメント</a>付で、</p>

<blockquote><p>操作が成功し、PerlIO 層からエラーが報告されなかった場合に真を返します。 引数が省略された場合、現在選択されているファイルハンドルをクローズします。</p></blockquote>

<p>と教えてくれました。</p>

<p>しかし、ファイルハンドルのopen,closeはよく or dieとかつけて例外処理するようなもので、close $fhて失敗したら、どうするのって思ったりもしますが、開いているファイルハンドルがスカラーリファレンスなので失敗することはないという風に解釈しました（がどうなんでしょうか？認識あっているでしょうか？）</p>

<h3>【追記：2013-10-06】close $fhは、バグっぽい</h3>

<p><a href="https://gist.github.com/tokuhirom/6851517">hackish でもなんでもなくて、バグってるだけじゃない?</a>って話をtokuhiromさんかツッコミ頂きました！！ありがとうございます！</p>

<pre><code>my $version = try {
    open my $fh, '&gt;', \my $stderr;
    local *STDERR = $fh;
    my $v = $self-&gt;database_version;
    close $fh;
    $v;
};
</code></pre>

<p>個人的には、close $fhが成功したときに引数を期待していた場合,trueを返すということが知れたのは大変勉強になりましたが、tokuhiromさんに指摘して頂いた通り、コードのわかりやすさと正しさ的には上述のコードがあるべき姿だと思います。close $fhでtrueを返すようにしてなんらかのフラグにするのは場合によってはありかもしれないですが、今回のコードではないなーという話ですね。</p>

<h3>そいういえばlocal $SIG{__WARN__} = sub {};</h3>

<p>よく考えれば、$SIG{__WARN__}をつかえばいい気もしますが、まぁ息を吸うように書いた時の気分ってやつでしょうか。むしろ、$SIG{__WARN__}で代替できない問題があれば是非教えて頂きたいところです。。。</p>

<h2>CPANモジュールのコードを読んで勉強しよう</h2>

<p>必ずしも参考になるコードばかりではないですし、見たコードを実践すべきかどうかは別として、なんかわからないコード見つければいろいろドキュメントみたりあれこれ議論したり調べたりすると、大変Perlや広い意味でのシステム基礎知識全般への理解が深まり大変うれしいですね！</p>

<p><a href="http://yancha.hachiojipm.org/quot?id=141199">typeさんのコード、hackishだから読んでたら新しい発見いろいろある</a>とまこぴーのモヒカン発言に激しく同意しつつ、いくつかのhackishなモジュールで大変お世話になっているtypesterさんの独立を激励する記事でございました！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-04:entry-2013-10-04-warn-die-hack.html</id>
<published>2013-10-04T44:44:53+0900</published>
<updated>2013-10-04T23:59:40+09:00</updated>
</entry>
<entry>
<title type="text">SeleniumとPerlの話</title>
<link href="http://hachiojipm.github.io/entry/2013-09-24-selenium.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>SeleniumとPerlの話</h1>

<p>どうも, YAPCが終わって文字通り燃え尽きているpapixです.<br/>
今日は, ｢SeleniumとPerlの話｣ということで, YAPC::Asiaの前夜祭であるLTソンで発表した｢Seleniumで捗る話｣の補足(?)エントリを書いてみようと思います.</p>

<h2>Selenium IDEを導入する</h2>

<p>Seleniumのテストを書く一番簡単な方法は, Selenium IDEを利用する方法です.<br/>
というわけで, まずはSelenium IDEをインストールしましょう.</p>

<p>ちなみにSelenium IDEはFirefoxのアドオンなので, Chrome派の人は仕方ないと思いますがまずはFirefoxの導入からスタートしてください.<br/>
まあ, Firefoxは艦これ用の便利なアドオンがいくつかあるので, 提督エンジニアな方は導入済みだぜ! という感じだと思います.</p>

<p>Selenium IDEは<a href="http://docs.seleniumhq.org/download/">こちら</a>のページからダウンロードすることができます.<br/>
2013年9月24日現在の最新版は2.4.0です. ページ上部にある｢Download latest relased version 2.4.0 relased on...｣の｢2.4.0｣の部分をクリックして, アドオンを導入しましょう.<br/>
導入後, 再起動すればSelenium IDEが使えるようになります.</p>

<p>Perlを利用している人は, ついでに<a href="https://addons.mozilla.org/ja/firefox/addon/selenium-ide-perl-formatter/">Selenium IDE: Perl Formatter</a>というアドオンを入れておきましょう.<br/>
このアドオンを入れることで, 後述のTest::WWW::Seleniumに対応したテストを出力することができます.</p>

<h2>Selenium IDEでテストを作る</h2>

<p>それでは, 早速Selenium IDEでテストを書いてみましょう.<br/>
今回は, LTソンで発表したような｢クッキークリッカーを自動でクリックする｣ことを試すテスト(?)を作ってみます.</p>

<p>Firefoxを起動すると, 右上に｢Se｣と書かれたアイコンがあるはずです.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-icon.png" alt="Seleniumのアイコン" /></p>

<p>これをクリックすると, 次のような画面が開きます(Ubuntu上のFirefoxで動かしているので, Mac OS XやWindowsで動かした場合と若干外観が異なるかもしれませんが, 大まかな構造は同じはずです).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-ide.png" alt="Selenium IDE" /></p>

<p>中央の, ｢テーブル｣と書かれた部分にSeleniumのテストコマンドを入力していきます.<br/>
もっとも手動で入力するのは面倒なので, 自分でブラウザを操作して, その操作に対応したテストコマンドを出力することもできます.<br/>
右上の, 赤い丸が凹んでいれば(?), 操作のテストコマンド化が有効になっています(初期状態でそうなっているはずです).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-cap.png" alt="有効な状態" /></p>

<p>このマーカーをクリックすれば, 凹んだ状態が解除されます. こうなると, Selenium IDEはいくらブラウザを操作しても, その操作を自動的にテストコマンド化しなくなります.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-no-cap.png" alt="無効な状態" /></p>

<p>まずはこの状態にしてから, [クッキークリッカー](http://orteil.dashnet.org/cookieclicker/]のページに移動して, そこからテストコマンドの自動生成を有効にするとよいでしょう.</p>

<p>では, 実際にクッキーをクリックしてみます. すると...</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-cookie-test.png" alt="無効な状態" /></p>

<p>このように, ｢クッキーをクリックする｣テストコマンドが生成されました!<br/>
上部中央の, ｢現在のテストケースを実行｣ボタンを押せば, 実際にそのテストを実行することができます.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-exec.png" alt="｢現在のテストケースを実行｣ボタン" /></p>

<p>おそらく, クッキーが自動でクリックされ, クッキーの枚数が1枚増えるはずです.<br/>
更に, Selenium IDEの方を見ると, 成功したコマンドの部分の背景が緑色になっているはずです(ちなみに失敗だと, 背景が赤色になります).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-success.png" alt="成功!" /></p>

<p>というわけで, 次はこのテストコマンドをTest::WWW::Seleniumに対応したコードに出力してみましょう.</p>

<h2>テストコマンドの出力と実行</h2>

<p>Selenium IDEの｢ファイル｣から｢テストケースをエクスポート｣, ｢Perl｣と選ぶと, Test::WWW::Seleniumに対応したスクリプトを出力することができます.<br/>
先程のクッキーをクリックするテストの場合, 次のようなスクリプトになります.</p>

<pre><code>use strict;
use warnings;
use Time::HiRes qw(sleep);
use Test::WWW::Selenium;
use Test::More "no_plan";
use Test::Exception;

my $sel = Test::WWW::Selenium-&gt;new( host =&gt; "localhost", 
                                    port =&gt; 4444, 
                                    browser =&gt; "*chrome", 
                                    browser_url =&gt; "http://orteil.dashnet.org/" );

$sel-&gt;open_ok("/cookieclicker/");
$sel-&gt;click_ok("id=bigCookie");
</code></pre>

<p>というわけで, これを実行する為の環境を作りましょう.</p>

<h3>Test::WWW::Seleniumの導入</h3>

<p>Test::WWW::Seleniumの導入は簡単で, cpanm等で<code>WWW::Selenium</code>を入れればOKです.</p>

<pre><code>$ cpanm WWW::Selenium
</code></pre>

<h3>Selenium Serverの用意</h3>

<p>で, もう1つ用意する必要があるのが｢Selenium Server｣.<br/>
Test::WWW::Selenium及びWWW::Seleniumは, Selenium Serverと呼ばれるサーバに処理を投げて, Selenium Serverがブラウザを起動し, 投げられた処理を実行して, その結果を返す... という流れでSeleniumを動かします.<br/>
Selenium Serverは, Selenium IDEと同じく<a href="http://docs.seleniumhq.org/download/">こちら</a>のページからダウンロードすることができます.<br/>
現時点での最新版は2.35.0なので, ページ中央部の｢Download version 2.35.0｣をクリックして, Selenium Serverをダウンロードします.</p>

<p>あとは, Javaさえ導入できていれば, <code>java -jar selenium-server-standalone-2.35.0.jar</code>でSelenium Serverを起動することができます.<br/>
あとは, 先程生成したスクリプトを実行すれば, 自動的にブラウザが開き, クッキーを叩いてくれることでしょう!</p>

<h3>WWW::Seleniumの利用</h3>

<p>Test::WWW::Seleniumを使わずに, WWW::Seleniumを使ってコマンド風に(?)使うには,</p>

<ul>
<li><code>Test::WWW::Selenium-&gt;new( ... )</code>を<code>WWW::Selenium-&gt;new( ... )</code>に書き換える</li>
<li>テストメソッドの<code>_ok</code>を取り除く</li>
<li>最初に<code>$sel-&gt;start;</code>を付加する</li>
</ul>


<p>...だけでOKのようです.<br/>
なので, クッキーを叩く部分を自動化(永遠に叩き続ける)するには,</p>

<pre><code>use strict;
use warnings;
use WWW::Selenium;

my $sel = WWW::Selenium-&gt;new(
    host =&gt; "localhost", 
    port =&gt; 4444, 
    browser =&gt; "*firefox", 
    browser_url =&gt; "http://orteil.dashnet.org/",
);

$sel-&gt;start;
$sel-&gt;open("/cookieclicker/");
while (1) {
    $sel-&gt;click("id=bigCookie");
}
</code></pre>

<p>こんな感じにしてやればOKのようです.</p>

<h2>更に極めん, Selenium道!?</h2>

<p>という訳で, クッキークリッカーを例に, Selenium IDEとSelenium Server, そしてWWW::Selenium及びTest::WWW::Seleniumの使い方を簡単になぞってみました.</p>

<p>Seleniumを使えば, ブラウザを使ったWebアプリのテストが簡単に実現できるので, ｢まずは必要な機能がちゃんと動くかだけでもテストしないと...｣という場合とかに活用できそうです.<br/>
機会があれば, このHachioji.pm 日めくりテックトークなり, 自分のブログなりでSeleniumネタを紹介していきたいと思っておりますので, 乞うご期待!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-26:entry-2013-09-24-selenium.html</id>
<published>2013-09-24T59:59:00+0900</published>
<updated>2013-09-26T00:11:51+09:00</updated>
</entry>
<entry>
<title type="text">Perl6をかいま見るためにSeisを使ってみる</title>
<link href="http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html" />
<author>
<name>mackee</name>
</author>
<content><![CDATA[<h1>Perl6をかいま見るためにSeisを使ってみる</h1>

<p><a href="http://mackee.hatenablog.com/entry/2013/09/22/211305">自分の感想ブログ</a>でFuture Perlのトーク聞いて思ったこととか書いてたんですが、<a href="https://metacpan.org/module/Seis">Seis</a>の話はそういえば全然していなかったなーって思って、じゃあ実際にどうなのかって思って、おもむろに<a href="http://metacpan.org/">metacpan</a>でSeisって打ったら上がっていたので勢いでcpanmしてみました。</p>

<p>で、どうなったかというと。</p>

<pre><code>[- o -] $ cpanm Seis
--&gt; Working on Seis
Fetching http://www.cpan.org/authors/id/T/TO/TOKUHIROM/Seis-0.12.tar.gz ... OK
Configuring Seis-0.12 ... OK
Needs perl 5.018000, you have 5.016003
! Installing the dependencies failed: Installed version (5.016003) of perl is not in range '5.018000'
! Bailing out the installation for Seis-0.12
</code></pre>

<p>マジかよ、Perl 5.18以上じゃないとダメ！　とはとんがってる。
というわけでおもむろにPerl5.18.1を入れる</p>

<pre><code>[- o -] $ plenv install 5.18.1
...
[- o -] $ plenv local 5.18.1
[- o -] $ plenv install-cpanm
...
</code></pre>

<p>で、cpanm Seis</p>

<pre><code>[- o -] $ cpanm Seis
--&gt; Working on Seis
Fetching http://www.cpan.org/authors/id/T/TO/TOKUHIROM/Seis-0.12.tar.gz ... OK
Configuring Seis-0.12 ... OK
Building and testing Seis-0.12 ... FAIL
! Installing Seis failed. See /Users/mackee/.cpanm/work/1379948870.12803/build.log for details. Retry with --force to force install it.
</code></pre>

<p>oops、build.logを見てみる</p>

<pre><code>[- o -] $ less /Users/mackee/.cpanm/work/1379948870.12803/build.log
...
t/spec/roast/S32-io/file-tests.t ................................ ok
Can't locate Path/Tiny.pm in @INC (you may need to install the Path::Tiny module) (@INC contains: CODE(0x7ff96a8386c0) /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/lib /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/arch /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/_build/lib /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1/darwin-2level /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1 /Users/mackee/.plenv/versions/5.18.1/lib/perl5/5.18.1/darwin-2level /Users/mackee/.plenv/versions/5.18.1/lib/perl5/5.18.1 .) at /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/lib/Seis/IO/Path.pm line 50.
t/spec/roast/S32-io/io-path.t ...................................
Dubious, test returned 2 (wstat 512, 0x200)
Failed 8/13 subtests
t/spec/roast/S32-io/path.t ...................................... ok
...
</code></pre>

<p>見てみると何故かPath::Tinyがないよとテストで言われていてコケているみたい。他の人も一緒なのかなと思って<a href="http://cpanstesters.org/">CPANTesters</a>見に行ったら他の人も同じ理由でコケているのでとりあえず入れる！</p>

<pre><code>[- o -] $ cpanm Path::Tiny
...
</code></pre>

<p>ちゃんと入ったのでSeisもう一度</p>

<pre><code>[- o -] $ cpanm Seis
...
Successfully installed Seis-0.12
1 distribution installed
</code></pre>

<p>よし、OK！
はい、ここまででcpanmで一発で入らなくてもくじけない編(裏タイトル)は以上です。</p>

<p>じゃあSeis使ってみる。トークではseisコマンドでREPLに入っていたので</p>

<pre><code>[- o -] $ seis
seis&gt;
</code></pre>

<p>なんか入れたっぽい。<a href="http://mackee.hatenablog.com/entry/2013/09/22/211305">僕のブログで前やった</a>Reduction operatorを使ってみる。</p>

<p><a href="http://perlcabal.org/syn/S03.html#Reduction_operators">Reduction Operators</a></p>

<pre><code>seis&gt; [+] 1..100
$VAR1 = 5050;
</code></pre>

<p>やばい、ていうかめちゃくちゃ早い。</p>

<pre><code>[- o -] $ time perl6 -e 'say [+] 1..100'
5050
perl6 -e 'say [+] 1..100'  0.61s user 0.14s system 99% cpu 0.750 total
[- o -] $ time perl -E '$a += $_ for 1..100; say $a'
5050
perl -E '$a += $_ for 1..100; say $a'  0.02s user 0.03s system 51% cpu 0.111 total
[- o -] $ time seis -e '$a = [+] 1..100; say $a'
5050
seis -e '$a = [+] 1..100; say $a'  0.15s user 0.04s system 97% cpu 0.196 total
</code></pre>

<p>上からRakudo Star + Parrot、Perl 5.16.3、Seis 0.12 + Perl 5.18.1でございます。
十分実用範囲内の速度な気がします。</p>

<p>Perl6だとこんなかんじで仮引数の型を指定してやることもOK</p>

<p><a href="http://perlcabal.org/syn/S02.html#Parameter_types">Parameter Types</a></p>

<pre><code>[- o -] $ seis -e 'sub id(Int $n) { return $n }; my $a = id("aaa"); say $a'
Can't locate object method "throw" via package "Seis::Exception::ArgumentType" (perhaps you forgot to load "Seis::Exception::ArgumentType"?) at -e line 3.
</code></pre>

<p>ちゃんとコケてくれてますね。</p>

<p>でもまだPerl6のすべての仕様が実装されているわけではなさそうで、このように返り値の型指定をするとコケたりします。</p>

<p><a href="http://perlcabal.org/syn/S02.html#Of_types">Of types</a></p>

<pre><code>[- o -] $ seis -e 'sub id(Int $n) returns Int { return $n }; my $a = id(1); say $a'
Can't parse -e:
Syntax error! Around:
sub id(Int $n) r
   at /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1/darwin-2level/Seis/Compiler.pm line 56.
</code></pre>

<p>でもXSやC、そしてPerl5で書かれているので既存の開発者でもPerl6を理解するための窓口にはなりやすそうです。Authorの<a href="https://twitter.com/tokuhirom/">@tokuhirom</a>さんが言われているようにPerl6の機能をPerl5にフィードバックしてPerl5を進化させるのにはもってこいの実験室だと思われます。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-25:entry-2013-09-25-get_started_seis.html</id>
<published>2013-09-25T19:19:27+0900</published>
<updated>2013-09-25T01:27:59+09:00</updated>
</entry>
<entry>
<title type="text">phpcon2013所見</title>
<link href="http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>phpcon2013所見</h1>

<p>こんにちは！！一日忘れていて遅れてしまったhirobanexです！！！YAPC::Asia2013が行われる前の週にPHPカンファレンスっていうPHPのお祭りがやっていたのはご存知かな？？今回、Perl Mongerのphper初心者として<a href="http://phpcon.php.gr.jp/w/2013/">PHPカンファレンス2013</a>に参加したので、その感想をレポートするよ！！</p>

<h2>YAPC::Asia2013 vs PHPカンファレンス2013</h2>

<p>きっと、このブログの読者はPHPカンファレンスに行ったことがある人より、YAPC::Asia2013に行ったことがある人が多いと思うので、その前提で両社を比較してみるよ！！</p>

<p>phpconはYAPC::Asiaに比べて</p>

<ul>
<li>参加人数：多い</li>
<li>参加費：無料</li>
<li>総セッション数：同じか少ない</li>
<li>開催日数：少ない（1日だけ）</li>
<li>企業の宣伝：ガン攻めできる</li>
</ul>


<p>という気がしました。セッションの傾向としては、デザイナーとかホームページ制作者からの視点が多分に入っていたり、PHPの内部実装についての話などが多い傾向にあるように感じました。またYAPC::Asiaに比べて「こういうの作ったんだぜ！みんな使ってよ！！」って感じなかった気がします。</p>

<p>あと、YAPCだと公式ページにセッションの内容を詳しく書かれていて</p>

<ul>
<li>タイトル</li>
<li>説明</li>
<li>タグ（ビギナー向け or 中級者向け、DB系 or アプリケーション、etc）</li>
<li>YouTube</li>
<li>slide</li>
</ul>


<p>結構参考になりまくりなんだけど、PHPカンファレンスはそういうことがなくて後で見返すの大変だなーと思う一方、リアルな現場に参加した感の貴重さを味わえるのかなーと思いました。</p>

<h2>2013の個別のセッションについて</h2>

<p>ぼくが参加したセッションは正直個人的に外れ感があったので、微妙だったんですが、Perlユーザーでphp初心者の観点を中心に考えると、以下のセッションのYouTubeなりスライドなりをみるのが興味深いと思いました。</p>

<ul>
<li><a href="http://www.slideshare.net/hirokawa/php-con2013ub">基調講演 PHPの今とこれから2013</a> : phpって毎年バージョンアップすることになったんですって！知ってました？</li>
<li><a href="https://speakerdeck.com/yandod/cakephpdemoshi-eru-composerwohuo-yong-sitamodannakai-fa-shou-fa">Composerを活用したモダンなCakePHPアプリの開発手法</a> : phpにもcarton的なのってあるんですよ！そして、pear後のpackagist.orgってcpan的なのあるんですよ！知ってました？</li>
<li><a href="http://www.slideshare.net/shin1x1/vagrant-php">Vagrantで作るPHP開発環境 [実践編]</a> : phpもVagrantで開発環境作るんですって！知ってました？</li>
<li><a href="http://www.slideshare.net/MiuraKatsu/ss-26186401">FuelPHPで３種のProfilerを使ってみた</a> : PHPには結構いけるプロファイラーあったりするんですよ！</li>
</ul>


<p>ちなみに公式ではなく<a href="http://unsolublesugar.com/20130915/005329/">PHPカンファレンス2013 &amp; WordCamp Tokyo 2013 講演資料まとめ</a>というのがあるので実際のところは後から見放題で大変感謝。</p>

<h2>PHPについても含めながらダラダラと</h2>

<p>なんか、LLってだいたい書き方同じだよなーとか、rubyとかpythonの超入門をみて思っていたんですが、いざphpでちょっと詳しく触りだすと、Perlでやっているいつものアレの書き方できなくて困りますね。(unlessとか、defined-orとか)</p>

<p>それでも、ComporserでCartonみたいなことできるし、開発向けビルドインサーバーも入っていちいちApacheとかいれなくても簡単な確認できるようになったし、名前空間もできたし、phpenvっていうのがよりまともになって流行りだせば1つのOSに1つのphp.iniでグローバル設定乙みたいなことなくなると思いますし、より手軽に開発できるようになっていくんじゃないでしょうかねー。</p>

<p>あと、PHPはモヒカンみたいな人、少ない気がしますねー。できる人はたくさんいるはずなんですが、あくまでツールのユーザー視点が強い気がします。上述しました「こういうの作ったんだぜ！みんな使ってよ！！」って感じなかった気がするところにも影響している気がするのですが、Perlだとモヒカンみたいな人たちがトークもしてLTもして、すげー強烈なイメージを植え付けていくんですが、そういうところの印象が今一つ弱かったですね。Packagistが普及していくと、そのあたりが強くなっていくんでしょうかねー。</p>

<p>とりあえず、カンファレンスの動員人数としては2000人規模らしいので、なんですかね、それで無料ってやっぱりすごいですよね。</p>

<h2>終わりに　～ぼっちではなくまたどこかへ～</h2>

<p>今回は、Hachioji.pmの仲間のuzullaさんやkkotaro0111さんが参加されていたので、全然ぼっちでもなかったし、やっぱり言語関係なく出会える仲間がいるとうれしいですね！！</p>

<p>後、正直高々一回では、しっかりと比較することは難しんですが、いろいろところに出向いても仲間がいるとうれしいですよね！！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-18:entry-2013-09-23-phpcon2013.html</id>
<published>2013-09-23T23:23:00+0900</published>
<updated>2013-09-23T20:35:21+09:00</updated>
</entry>
<entry>
<title type="text">最近のPerlに足りないモノ</title>
<link href="http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html" />
<author>
<name>ichigotake</name>
</author>
<content><![CDATA[<h1>最近のPerlに足りないモノ</h1>

<p>おはこんばんちは、<a href="https://twitter.com/ichigotake">ichigotake</a> です</p>

<p>昨日までのハチピーテックブログは、困っている人を助けるような記事が連続していてとてもよい流れですね</p>

<p>今日は自分の見聞きした最近のPerlに足りないモノをいくつか書き連ねていこうと思います(といっても2,3点ほどですが</p>

<p>自分は日頃そんなにPerlをメインに活動しているわけではないですし、オープンソース周りも目立った活動はあまりしていません</p>

<p>困った時に相談しやすい人たちのいる環境がPerl中心だったり、知り合いにPerlバリバリの人だと思われたりしている中で、Perlに足りないモノに関する話題がちょくちょく出てきます</p>

<p>今日はその中で特に多い意見を書き出してみました</p>

<p>前述の通り、あまりエッジなエンジニアではない、知り合いのハイレベルなやりとりを横目に見ている、Perlハッカーと言えるレベルではないおきらくPerl Mongerからの視点である事をご容赦ください！</p>

<h2>新しい情報を手に入れる場所</h2>

<p>比較的新しめの流儀やツールを使ったPerlの事を巷では「モダンPerl」と言うらしいですが、この「モダンPerl」という単語に馴染みの無い方からはほんとに無縁な単語のようです</p>

<p>ごくたまに会う母校の先生や先輩との会話では、しばしば以下の様なやりとりが繰り返されています</p>

<ul>
<li><p>最近のPerlを調べようと思っても5年10年前の馴染みのサイトばっかり引っかかるんだよねぇ</p></li>
<li><p>PythonとかRubyはニュースでよく見かけるしPHPは仕事でやってるからなんとなくわかるけど、Perlって全然見かけないよね</p></li>
</ul>


<p>他にもいくらかあった気がしますが、だいたいこの2つに集約されている感じがあります</p>

<p>言われてみれば、自分も初めてPerlとふれあった頃に検索したようなワードで検索してみると、いわゆるモダンPerlな情報はあまり引っかからずにPerl/CGIと言われる時代のものばかりで少々目新しさに欠けます</p>

<p>しかし、最近は<a href="http://perl-entrance.org/">Perl入学式</a>,<a href="http://www.perl-beginners.org/">Perl Beginners</a>と、イベント自体も少しずつ注目されていたり、</p>

<p>検索されやすい情報サイトを作ろう、本を出そう、という活動もちらほら見かけたりします</p>

<p>このあたりの活動からライトな人でも取っ付きやすいよう情報が整理されたりするんでしょうか</p>

<p>少し期待しつつ応援しております</p>

<p>そういえば、以前にこのブログで<a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る（かもしれない）Perl 関連の情報ソース一覧</a>という記事がありましたね</p>

<p>新しい情報を求めてる人にはこのあたりをオススメするとよさそうです</p>

<h2>Perl製のモノを公開する場所</h2>

<p>PHPなら場所を選ばなければいろんなレンタルサーバー、いろんなPaaSで標準サポートされていたり、RubyはHerokuでRailsアプリケーションを公開できたりしますね</p>

<p>でもPerlでは作ったPSGIアプリケーションを公開したいけどどうしたらいいの、という質問をたまに見かけます。</p>

<p>Perl Beginners、Perl入学式等のイベントでもちょくちょく話題になっているようですが、今のところあまりいい話は聞きません</p>

<p>Perl入学式では最終的に簡単なPSGIアプリケーションを作成する事がゴールのようですが、せっかく覚えた事を気軽に公開できる場所がないのも少し寂しいですね</p>

<p>話に聞く限りだと、さくらVPS等のお手頃価格なVPSに立てて…という方が多いようですが…</p>

<p>Herokuのように自前でサーバーを用意しなくてもPSGIサーバーを立てられるようになったらどんな反響が起こるのか、気になって少しわくわくしますね</p>

<h2>おわりに</h2>

<p>今日は自分の見聞きする足りないモノの中で特に印象に残っている意見を記事にしました。他にも足りないモノはたくさんあるだろうし、ライトな目線・アンテナからの意見なので齟齬も多少あるかもしれません</p>

<p>楽しそうにしてる人を追いかけるのはとても好きなので、Perl界隈にもそういったビギナーが増えるととてもうれしいですね</p>

<p>明日からはどんなお役立ち情報が投稿されるんでしょうか</p>

<p>ではおやすみです！</p>

<h2>足りない宣伝</h2>

<p>話は変わりまして…</p>

<p>今日は火曜日、明日は水曜日、じゃぁ明後日は…?</p>

<p>一年に一度のおまつりイベント、 <strong>YAPC::Asia前夜祭です！ヾ(>ヮ&lt;*)ﾉﾞ</strong></p>

<p>前夜祭では去年大好評だったLT損が復活するようですよ！</p>

<p>LTソンは話題をPerlに絞らず、喋りたい人がみんなの前で交代しながら5分間おしゃべりする場です！</p>

<p>参加には金曜・土曜のYAPC本編のチケットが必要ですが、残念ながら完売してしまっているようです</p>

<p>噂では当日券があるか怪しいそうなので、ご縁がある方はチケットが余ってる知り合いから譲り受けるかなどして行くチャンスもあるかもしれませんね！</p>

<p>9/19 木曜日、18:00から、慶應義塾日吉キャンパスにて開催です！ご縁がある方はぜひ！</p>

<p><a href="http://ltthon-yapc2013.hachiojipm.org/">LTソン ホームページ</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-18:entry-2013-09-17-perl_shortage.html</id>
<published>2013-09-17T59:59:00+0900</published>
<updated>2013-09-19T00:08:02+09:00</updated>
</entry>
<entry>
<title type="text">perlでTravisCI、Coverallsを使ってみる</title>
<link href="http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>perlでTravisCI、Coverallsを使ってみる</h1>

<p>最近東京に戻ってきた<a href="https://twitter.com/Spring_MT">Spring_MT</a>です。</p>

<p>perlで自分でモジュールを書く準備をと思って、TravisCI、Coverallsを使う方法を調べてみました。
だいぶperlからは離れていたので、perlを入れるとことから調べてます。</p>

<h2>plenvを入れる</h2>

<p>今回はplenvを使ってperlを入れました。</p>

<p><a href="https://github.com/tokuhirom/plenv">plenv</a></p>

<p>plenvでperlを入れて、cpanmも入れていきます。</p>

<pre><code>% git clone git://github.com/tokuhirom/plenv.git ~/.plenv
% echo 'export PATH="$HOME/.plenv/bin:$PATH"' &gt;&gt; % ~/.zshrc
% echo 'eval "$(plenv init -)"' &gt;&gt; ~/.zshrc
% exec $SHELL -l
% plenv install 5.18.0
% plenv local 5.18.0
% plenv rehash
% plenv install-cpanm
% plenv rehash
</code></pre>

<h2>Minillaを使ってひな形を作る</h2>

<p>最初はModule::Installを使いながら試していたのですが、TravisCIでこけて先に進めず。。。</p>

<p>で、<a href="http://lingr.com/room/perl_jp/archives/2013/08/29#message-16407055">この会話</a>で勧められた通り、Minillaを使って作ってみました。</p>

<p><a href="https://github.com/tokuhirom/Minilla">Minilla</a>
<a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></p>

<pre><code>% cpanm install Minilla
% plenv rehash
% minil new Sample
% cd Sample
% git add .
% git commit
</code></pre>

<p>Minillaはこれだけで新しいモジュールのひな形ができちゃいます！
ここまでできたら、githubでレポジトリを作って、TravisCIのサイトでリポジトリをsyncし、TravisCIの設定をonにしましょう。
TravisCI設定はこちらがめっちゃ参考になります。</p>

<p><a href="http://sue445.hatenablog.com/entry/2013/06/01/170607">GithubにあるリポジトリをTravis CI連携する手順 #junitbook</a></p>

<p>Minillaで作ったモジュールのテストを手元で走らせる場合は、minil testを実行すると思うのですが、TravisCIではデフォルトで下記コマンドでテストが実行されます。</p>

<pre><code>perl Build.PL &amp;&amp; ./Build test 
</code></pre>

<p><a href="http://about.travis-ci.org/docs/user/languages/perl/#Module%3A%3ABuild">Building a Perl Project</a></p>

<p>Minilaで作ったデフォルトのBuild.PLを使うと、TravisCIではxt/配下のテストは走らないのです。</p>

<p>ここまでできたら、pushします。
Minillaで作ったモジュールには既に .travis.yml が用意されているので、何もしなくてもtravisが動きます。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_1.jpeg" alt="image" />
<a href="https://travis-ci.org/SpringMT/Sample">TravisCI SpringMT/Sample</a></p>

<p>うまくいきました！</p>

<p>バッジも貼りましょう。
TravisCIのビルド結果ページ右上のbuild passingの画像をクリックすると、そのまま貼り付けられる状態のテキストが表示されるので、それをコピーしてREADME.mdに貼り付けます。</p>

<p>ついでに、Coverallsも追加しちゃいましょう。</p>

<p><a href="https://coveralls.io">Coveralls</a></p>

<p>まずは、TravisCIと同様に、Coverallsにリポジトリを登録してください。
perlの場合は、Devel::Cover::Report::Coverallsを使えば、Coverallsに簡単にカバレッジの情報を登録できます。</p>

<p><a href="http://memo.fushihara.net/post/48086316824/coveralls-perl-project">coverallsをperlなprojectで使えるようにしてみた</a></p>

<p>Coverallsに情報を投げるために .travis.ymlに下記を追記してください。</p>

<pre><code>before_install:                                                                                                                                 
  cpanm -n Devel::Cover::Report::Coveralls
script:
  perl Build.PL &amp;&amp; ./Build build &amp;&amp; cover -test -report coveralls
</code></pre>

<p>pushすると、こんな感じになると思います。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_2.jpeg" alt="image" /></p>

<p><a href="https://coveralls.io/r/SpringMT/Sample">Coveralls SpringMT / Sample</a></p>

<h2>最後に</h2>

<p>最終的に少しテストを追加しました。</p>

<p><a href="https://github.com/SpringMT/Sample">GitHub SpringMT/Sample</a></p>

<p>githubにページはこんな感じでバッジも出ています。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_3.jpeg" alt="image" /></p>

<p>これでモジュールを書き始める準備が出来上がったので、なんか書きます。</p>

<h2>ちょっとハマったところ</h2>

<p>新しく作ったファイルにテストを書いてminil testを実行したけど、テストがされなくてなんでだろうと思ってたら、git管理下じゃないからだった。。。。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-19:entry-2013-09-18-perl-travisci.html</id>
<published>2013-09-18T57:57:00+0900</published>
<updated>2013-09-19T00:08:02+09:00</updated>
</entry>
<entry>
<title type="text">Perlの一文字変数の攻略</title>
<link href="http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html" />
<author>
<name>OGATA Tetsuji</name>
</author>
<content><![CDATA[<h1>Perlの一文字変数の攻略</h1>

<p><a href="https://twitter.com/xtetsuji">xtetsuji</a>です。</p>

<p>昨今は書籍よりも検索エンジンに頼って勉強する人が多くなってきているのかもしれませんが、そういう人を戒めるかのようにPerlでは「ググれない」一文字変数や一文字シンボルやそれに類するものの数々があります。</p>

<p>実際のところ、ちゃんと書籍を通読したり、perldoc perlvar <a href="http://perldoc.jp/perlvar">perldoc.jp/perlvar</a> を読めば理解できるのですが、それでもハマる落とし穴といったところを解説していきたいとおもいます。</p>

<h2><code>use English;</code> は使わない</h2>

<p>perlvar の解説を読んでいると、一文字変数が嫌な場合は</p>

<pre><code>use English;
</code></pre>

<p>とすれば <code>$_</code> が <code>$ARG</code> として参照できて嬉しいよ、といった解説が行われていますが、通常 <code>use English;</code> は使いません。というか、<code>use English;</code> を使ったプロジェクトを内外で見聞きしたことが10年の間に私の経験上ありません。</p>

<p>PerlやPerlプログラマは <code>$_</code> 等をあまりにも自明な変数として扱います。突然 <code>$ARG</code> と書かれても、逆に混乱の元になるだけでしょう。また、そのまま <code>use English;</code> をすると正規表現のパフォーマンスを落としてしまうという罠もあります。</p>

<h2>よく使うものだけを覚える</h2>

<p>最初にPerl (perlvar) と向きあうと「これを全部覚えないといけないのか…」となったりしますが、そんなことはありません。かくいう私も、10年Perl書いていて意味までスラスラ出てくるのは一部です。分からなければ都度調べればいいんです。</p>

<p>迷えるあなたのため、そんな「これだけは覚えておけばOK」という頻出の一文字変数や一文字シンボルの数々をご紹介します。</p>

<h2><code>$_</code>:  暗黙の変数</h2>

<p>Perlのありとあらゆる局面で変数が省略されたときに省略されたものとみなされる変数。最重要変数です。これを押さえればPerlの一文字変数の80%は理解したようなもの(言い過ぎ)。</p>

<p>アンダースコア変数と呼ばれたりすることもありますが、英語でいう it と似たような意味だととえらえてもらえると理解しやすいでしょう。</p>

<p>詳しくは perlvar を見ていただくとして、例えば以下の場合に <code>$_</code> が参照されます。</p>

<ul>
<li>特定の組み込み関数や単項演算子の引数が省略された場合に <code>$_</code> が指定されたものとみなす</li>
<li><code>=~</code> を伴わないパターンマッチ変数が置かれた場合、 <code>$_</code> をパターンマッチしようとする</li>
<li>for/foreach ループで、リストを受け取る変数を指定しなかった場合、<code>$_</code> がそれを受け取るようになる</li>
<li>grep や map の繰り返し変数</li>
<li>while の条件テスト部分で <FH> (readline) をそのまま置いた場合に読み込んだ行が <code>$_</code> に入る</li>
</ul>


<p>特定の組み込み関数や単項演算子で省略された場合の引数とするケースは少ないと思います。たとえ map で変換する場合にも省略しないほうがよいと思います。</p>

<pre><code># sqrt() 組み込み関数の第一引数は map の繰り返し変数 $_ だから省略可能
# my @squared = map { sqrt } @numbers;
# だけどこう書きたい
my @squared = map { sqrt($_) } @numbers;
</code></pre>

<p>単純な例であれば良いのですが、積み重なってくるとわけがわからなくなってきますし、曖昧さからパースエラーになってしまう可能性もあります。</p>

<pre><code># ちょっと複雑になった (defined と length の引数省略時は $_ を見る)
# これを許容するかどうかはコーディングルールなどに依存する
my @existed = grep { defined &amp;&amp; length } @whole;
</code></pre>

<p>どんな場合もチームのコーディングルールだと思うので、それがあるのであればそれに従いましょう。</p>

<p>while(){ ... } 句の読み込みではよく <code>$_</code> が使われます。</p>

<pre><code>while ( my $line = &lt;STDIN&gt; ) {
    chomp $line;
    if ( $line !~ /^\s+#/ ) { # コメント行を無視
         print $line, "\n";
    }
}
</code></pre>

<p>と書くよりも</p>

<pre><code>while (&lt;STDIN&gt;) { # $_ への暗黙の代入が発生する
     chomp; # $_ への chomp が発生する (末尾改行除去)
     if ( !/^\s+#/ ) { # コメント行を無視
          print "$_\n";
     }
}
</code></pre>

<p>と書くほうが、個人的に使うプログラムでは簡便でしょう。</p>

<p>Perl 5.10 からグローバル変数 <code>$_</code> のレキシカル化が可能となって <code>my $_</code> などと書けるようになりましたが、どちらかというとまだ馴染みのない記法のような気がします。概念としては難しいですが、グローバル変数の局所化である <code>local</code> を使うほうが良さそうです。</p>

<pre><code>for (1..100) { # $_ に 1から100まで入る
    {
        # この中の $_ は $text と同じ意味になる
        local $_ = $text;
        # パターンマッチ演算子は $_ に対しては $_ =~ を省略可能
        s/censored//g;
        s/自主規制//g;
        s/ダメキーワード//g;
        ...
        $text = $_;
    }
    # ここからは $_ は for で代入された数字に戻る
    print "step is $_\n";
</code></pre>

<p><code>$_</code> の世界は奥深いのですが、その深層はこの辺にしましょう。また次の機会で。</p>

<h2><code>@_</code>: 暗黙の配列</h2>

<p>サブルーチンを定義した場合に、引数が入っている配列です。</p>

<pre><code>abc("foo", "bar", "buz", "quux");

sub abc {
    print "abc is ", "@_", "\n";
}
</code></pre>

<p>可変長変数でない場合、通常は、<code>@_</code> のまま使わず、</p>

<pre><code>sub abc { 
    my $foo = shift @_;
    my $bar = shift @_;
    my $buz = shift @_;
    my $quux = shift @_;
    ...
}
</code></pre>

<p>などとするか、<code>shift</code> / <code>unshift</code> / <code>push</code> / <code>pop</code> の省略時の配列が <code>@_</code> であることを利用して</p>

<pre><code>sub abc { 
    my $foo = shift;
    my $bar = shift;
    my $buz = shift;
    my $quux = shift;
    ...
}
</code></pre>

<p>と書くことが多いでしょう。Perlのサブルーチンを定義すると <code>shift</code> だらけになるのですが、それが嫌であれば</p>

<pre><code>sub abc { 
    my ($foo, $bar, $buz, $quux) = @_;
    ...
}
</code></pre>

<p>などとしてもよいのではないでしょうか。もちろん後続の処理で <code>@_</code> の「残りの長さ」を見ている場合には通用しないかもしれませんが。このあたりもコーディングルールに依存する部分ですね。</p>

<p>いにしえのPerlでは、丸括弧なし <code>&amp;</code> 付きのサブルーチン呼び出しで、現在のスコープの <code>@_</code> がサブルーチン内の <code>@_</code> に渡されるという機能がありましたが、これは現在では見かけませんし、推奨されない記法でしょう。</p>

<pre><code>@_ = qw(sapporo sendai tokyo osaka fukuoka);
&amp;abc; # 上の @_ の内容が「代入」される
sub abc {
    print "@_";
}
</code></pre>

<p>その他、無効コンテキスト (左辺値への代入がない) で split 関数を使うと、split した結果が <code>@_</code> に入るという機能が昔のPerlにありましたが、Perl5.12あたりで無効化されたようですね。昔から推奨されなかった書き方ですので大きな問題はないとは思いますが、レガシーなソースコードを抱えている方は一度 split の使い方を確認してみるとよいかもしれません。</p>

<h2><code>$$</code>: 現在のプロセスID</h2>

<p>リファレンスを習いたての人だと、スカラーリファレンスのデリファレンスと見間違えそうな感じもしますが、単体で <code>$$</code> と書くと、現在のPerlプロセスのプロセスID (PID) を取得することができます。</p>

<p>Perlインタープリタ実行のたびに変更されると考えて差し支えないの無い変数ですので、例えばログを書くといった場合に使うと良いかもしれません。</p>

<pre><code>print "Start. PID=$$\n";

open my $log_fh, '&gt;', "/tmp/program.$$.log"
    or die;

print {$log_fh} "[DEBUG] ...";
</code></pre>

<p>forkやスレッドを使っている場合には、プロセスIDの扱い方はまた違ってくるとは思いますが、初歩的なプログラムではこのような使い方をして大丈夫でしょう。</p>

<h2><code>$0</code>: 現在のファイル名</h2>

<p>現在の実行中のファイル名を取得します。</p>

<p>トークン <code>__FILE__</code> も同様ですが、実行プログラムから呼ばれたモジュールの中では、<code>$0</code> は依然として実行プログラム自体を返すという特性がありますが、<code>__FILE__</code> はモジュールの名前を返すという違いがあります。</p>

<p>普段は直接 perl インタープリタに渡されないモジュール *.pm の中に以下のようなコードを書いて、テストとして使われたこともありますが、現在では <code>Test::More</code> や <code>prove</code> などのソフトウェアテスト用のモジュールを使ってテストを書くことが推奨されます。</p>

<pre><code># 昔のプログラムによくある古式ゆかしいテスト
# *.pm 中で…
if ( $0 eq __FILE__ ) {
    # テストを書く
}
</code></pre>

<p>また、<code>$0</code> は書き換えが可能です。パスワード文字列などの秘匿な文字列を引数で受け取らざるをえないプログラムがあったとして、同じサーバに入っている他のユーザが <code>ps</code> コマンドなどでそれをカジュアルに知ることを防ぐために書き換えをするなどといった用途が考えられます。</p>

<pre><code># プロセス中のパスワード文字列を消す
$0 =~ s/--password=\S+//;
</code></pre>

<p>ただ、パスワードはもっと安全な渡し方をしたほうがいいですね。</p>

<h2><code>$a</code>, <code>$b</code>: sort の特殊パッケージ変数</h2>

<p>通常の変数っぽい <code>$a</code> <code>$b</code> ですが、実はこの変数は</p>

<ul>
<li><code>use strict;</code> をしているのに、my 等の宣言無しで使っても警告をされない</li>
</ul>


<p>といった特殊な変数です。これは sort の特殊パッケージ変数であるからなのです。</p>

<pre><code>my @sorted_users = sort { $a-&gt;{name} cmp $b-&gt;{name} } @users;
</code></pre>

<p>といった sort のブロック内で暗黙に比較される2つの変数の代表として使われる <code>$a</code> と <code>$b</code>。そのため、この変数はグローバル変数として予約されているのです。</p>

<p>一文字変数が完全悪であるかは議論が分かれますが、スコープの狭い範囲では数値に <code>$i</code> や <code>$j</code> という変数を使ってもいいし、座標系や数学では <code>$x</code> <code>$y</code> <code>$z</code> という変数は不自然ではないでしょう。ただ、Perlでは <code>$a</code> と <code>$b</code> 2つの変数の使用は sort 等の一部の場面以外では推奨されません。間違って使った場合に警告が出ないのは困りますからね。</p>

<h2><code>$^V</code>: Perlのバージョン</h2>

<p>Perlのバージョン番号が入っています。</p>

<p>通常は <code>use 5.018;</code> や <code>use v5.18;</code> といった書き方でバージョン指定をすることがありますが、バージョンごとに書き分けたい処理がある場合にはこの変数で分岐するといいかもしれません。とはいえ、後方互換性に非常に気を使っているPerlでは使用機会は少なでしょう。</p>

<h2><code>$^O</code>: Perlが動いているOS</h2>

<p>Perlが動作しているOSの名前が入っています。</p>

<p>今の Mac OS X で動作させると「darwin」という文字列が返ってきます。また、一般的なLinuxディストリビューションで実行させると「linux」という文字列が返ってきます。</p>

<p>特定のOS以外で動作できないプログラムは、これを使って最初に例外を投げるといった処理が考えられます。</p>

<pre><code>if ( $^O ne 'darwin' ) {
    die "This program is only running Mac OS X";
}
</code></pre>

<h2><code>$&amp;</code>, <code>$\``,</code>$'`: 使ってはいけない正規表現マッチ変数</h2>

<p>この記事で言いたいことはこれだったのかもしれません。<strong>この3つの変数は一度たりとも使ってはいけません</strong>。一度でも使うとPerlの正規表現に深刻なパフォーマンスの低下が表れます。</p>

<p><code>$&amp;</code>, <code>$\``,</code>$'` それぞれ「直前の正規表現マッチの全体」、「直前の正規表現マッチの前部分」「直前の正規表現マッチの後部分」を表しますが、Perlは一度でもこの変数が使われると、それを覚えようとして全ての正規表現に気を使うようになり、性能低下を引き起こします。</p>

<p>繰り返しますが、この変数は使ってはいけません。<code>use English;</code> をそのまま使うと、この変数を「触ってしまう」ことも <code>use English;</code> が避けられる理由です。<code>use English qw(-no_match_vars);</code> というこれを避ける宣言もありますが、<code>use English;</code> は使わないものとしたほうが良いと思います。</p>

<h2><code>$数字</code>: 直前の正規表現のキャプチャ</h2>

<p>これは他の言語でもおなじみかもしれませんが、直前の正規表現のキャプチャ結果を返します。</p>

<pre><code>"abcdefghijklmn" =~ /(\w\w\w)(\w\w\w(\w\w\w))/;
# この場合 $1 には abc、$2 には defghi、$3 には ghi が入る
</code></pre>

<p>数字の付番は、通常の丸括弧の開きが登場した順番です。キャプチャを必要としない単純なグループ化の場合は <code>(?:    )</code> といったグルーピングを使います。</p>

<h2><code>$|</code>: 出力バッファリングをするか</h2>

<p>通常は未定義値となっている <code>$|</code> ですが、これに真と評価される値を入れると、出力バッファリングをオフにできます。</p>

<p>細かい説明は省きますが通常は、STDOUT (標準出力) が select されており、<code>$|</code> への代入は STDOUT への出力バッファリングのオンオフを指示します。</p>

<p>小さな出力を print で大量に行なった場合、表示がすぐに行われなかったり warn のほうが先に出力されたり (warn が使う STDERR は出力バッファリングを行いません) するのが都合が悪い場合には <code>$|</code> に 1 などを代入して出力バッファリングを抑止します。</p>

<pre><code>$| = 1; # 出力バッファリングをオフ
for (1..10_000) {
    print "STDOUT: $_\n";
    warn  "STDERR: $_\n";
}
</code></pre>

<p>出力が巨大になってくるとI/Oへの負荷を抑える意味でバッファリングが働いてきます。大量の出力が随時やってくるログを随時読み込む場合等、出力が即座にやってきて欲しい時などに指定されます。</p>

<p>上記の例も環境依存で結果が変わってくると思います。 <code>$|</code> の行をコメントアウトしたりして、その結果を見てみると面白いでしょう。</p>

<h2><code>$@</code>: 例外</h2>

<p>Perlでは例外の補足をブロックの <code>eval { ... }</code> で行い、例外を投げることは <code>die</code> で行います。その時に投げられた例外が <code>$@</code> に入ります。込み入ったプログラムを書いていくPerl中級者以上では最重要変数の一つです。</p>

<pre><code>local $@; # 一応グローバル変数 $@ のローカル化を行っておく
eval {
    # LWP::UserAgent があるかわからないので試す
    require LWP::UserAgent;
};
if ( $@ ) {
    # たぶん LWP::UserAgent がなかった…
    # 代わりの処理を書く
} 
</code></pre>

<h2><code>$!</code>: エラー</h2>

<p><code>$@</code> のエラー版です。エラーが発生してもプログラムは流れるものの、その状態がここにはいります。</p>

<p>代表的なものとしては <code>open</code> や <code>close</code> でのエラーです。</p>

<pre><code>open my $fh, '&lt;', "nothing,txt";
print "error: $!";
# No such file or directory
</code></pre>

<p>時として意図しないような警告文書が入っていることがあるので、パースして処理というのはなかなか難しいでしょう。これは <code>$@</code> で自前で <code>die</code> で例外文章を投げていない場合も同様です。</p>

<hr />

<p>「もっと一文字変数あるんじゃない」という意見、確かにごもっともですが、ここでは初心者・中級者が押さえておくものに限定して簡単な解説を書いていきました。というかここまで書いて疲れました。検索しづらい一文字変数ですが、これだけ押さえればPerl中級者として立派にやっていけることでしょう。困ったら <a href="http://perldoc.jp/perlvar">perlvar</a> を見ればいいんです。プラグマやPerlの深層に関わっているもっと面白い一文字変数やその仲間達については、次回の執筆機会をいただけたときにでも書きたいと思いますので、期待してくださる方はブクマや<a href="https://twitter.com/xtetsuji">Mention</a> などで応援してください。</p>

<p>次は ichigotake さんが書いてくださるそうです。期待しましょう！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-16:entry-2013-09-16-perlonechar.html</id>
<published>2013-09-16T17:17:08+0900</published>
<updated>2013-09-17T00:58:36+09:00</updated>
</entry>
<entry>
<title type="text">「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</h1>

<p>皆様こんにちは.<br/>
「Perl入学式 in 東京 #3 補講」の待ち時間に, プロジェクターに映しながら艦これで3-2-1へ1回出撃したら, <a href="http://instagram.com/p/d8eIcioDya/">那珂ちゃんがドロップして超爆笑</a>したりした<a href="http://twitter.com/__papix__">papix</a>です.</p>

<p>...というわけで, 突如始まった「Hachioji.pm 日めくりテックトーク」の第一陣を務めさせて頂きます.<br/>
このテックトークは, Hachioji.pmらしく(?), 割と"何でもアリ"な感じでゆるふわにやって行きたいと思っています.</p>

<p>多分, 今後songmuさんがRijiの話をしたり(このブログもRijiで作られています!), ytnobodyさんがNephiaの話をしたり, mackee_wさんがヘリの話をしたり, moznionくんがXMLモジュールの話をしたり, xtetsujiさんがmod_perlの話をしたり, boolfoolがVimの話をしたり, あとはHachioji.pmは「Hachioji PHP Monster」の略なので, 総帥のuzullさんがPHPの話をしたりすると思います.</p>

<h2>今日のネタ「vote.pl」</h2>

<p>そんな「日めくりテックトーク」の記念すべき第1回ですが, 最初からガチなネタを投下してしまうと身構えられてしまうかもしれないので, 今回はゆるふわに, 以前開催した「Perl入学式 #3」の復習問題の「vote.pl」をネタとして取り上げてみたいと思います.</p>

<p>さて, 「Perl入学式 #3」では, ハッシュやリファレンスといった, Perlのキモとも言うべき部分にチャレンジしました.<br/>
復習問題の「vote.pl」も, それらの要素がゴロゴロ入ったいい問題に仕上がっています.</p>

<ol>
<li>「自分の名前 (name)」と「好きな食べ物の配列のリファレンス (favorite_foods)」を持ったハッシュリファレンスを作成しましょう (つまり, 好きな食べ物は複数個書いてください)</li>
<li>同様のハッシュリファレンスを2, 3個作ってみましょう (周りの人のリアルデータを使ってハッシュリファレンスを作ると良いかもしれません)</li>
<li>作成した複数のハッシュリファレンスを1つの配列に格納しましょう (配列を操作する関数を使っても良いですし, 直で代入しても良いです)</li>
<li>どんな方法でも良いので, 好きな食べ物のランキングを作って表示してみて下さい</li>
</ol>


<h2>解説</h2>

<p>...さあ, コードを書いていきましょう!<br/>
都合のいいことに問題が4つに分かれているので, 1つずつ消化して行くことにします.</p>

<h3>1. ハッシュリファレンスを作る</h3>

<p>まずは, 「名前」と「好きな食べ物」というデータを持つ, ハッシュリファレンスを作る所からですね.</p>

<pre><code>my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};
</code></pre>

<p>...こんな感じのデータ構造になるはずです.</p>

<p>まず, <code>my $papix</code>でスカラ変数「papix」を宣言して, そこに<code>{ ... }</code>という形で, ハッシュのリファレンスを作り出して代入しています.</p>

<p>そのハッシュには, 「name」というキーに「papix」という要素が, 「favorite_foods」というキーに, <code>[ ... ]</code>という形で生成した, 好きな食べ物が格納されている配列のリファレンスが格納されています.<br/>
配列のリファレンス内の要素は, qwショートカットを使って, シンプルに表現しています.</p>

<p>...さて, このコードは, 次のコードの省略形と言うことができます.</p>

<pre><code>my @papix_favorite_food = qw/ sushi niku ramen orinigi /;
my %papix_data = (
    name           =&gt; 'papix',
    favorite_foods =&gt; \@papix_favorite_food,
); 
my $papix = \%papix_data;
</code></pre>

<p>それぞれ, <code>{ ... }</code>と<code>[ ... ]</code>でハッシュ/配列のリファレンスを直接生成するのではなく, 一度<code>%papix_data</code>と<code>@papix_favorite_food</code>というハッシュ/配列を作っています.<br/>
ここからリファレンスを取る事で, 先ほどの例の<code>$papix</code>と同じデータ構造を生成しているわけです.</p>

<p>ただ, <code>%papix_data</code>や<code>@papix_favorite_food</code>は, <code>$papix</code>を生成してしまえば, それらのデータは<code>$papix</code>から<code>%{$papix}</code>だったり<code>@{$papix-&gt;{favorite_foods}}</code>だったりという形で参照できるので, 邪魔になってきますよね?</p>

<p>その為, <code>{ ... }</code>や<code>[ ... ]</code>といった記法で, 直接ハッシュや配列のリファレンスを生成する機能が必要になってくる訳ですね.</p>

<h3>2. ハッシュリファレンスを複数個作る</h3>

<pre><code>my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};
</code></pre>

<p><code>$papix</code>と同様に, <code>$macopy</code>と<code>$moznion</code>を用意しました.</p>

<h3>3. ハッシュリファレンスを配列に格納する</h3>

<p>ここまでに作ってきた, <code>$papix</code>, <code>$macopy</code>, <code>$moznion</code>という3つのハッシュリファレンスを, 配列に格納しましょう.<br/>
それぞれ個人のデータが格納されているので, 配列の名前は<code>@people</code>とします.</p>

<pre><code>my @people = ($papix, $macopy, $moznion);
</code></pre>

<p>リファレンスはスカラなので, このようにシンプルに, 配列に格納することができます.
もちろん,</p>

<pre><code>my @people;
push @people, $papix;
push @people, $macopy;
push @people, $moznion;
</code></pre>

<p>のように書いても問題はありませんが, ちょっとタイプ数が多くて辛くなりますね.</p>

<h3>4. 好きな食べ物のランキングを作る</h3>

<p>...の前に, ここまで書いてきたコードを確認してみましょう.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ($papix, $macopy, $moznion);
</code></pre>

<p>3人それぞれの個人情報が格納されたハッシュリファレンスを作り, それを<code>@people</code>という配列に格納しました.<br/>
ここから, この<code>@people</code>を使って, 好きな食べ物のランキングを作っていきます.</p>

<p>方針としては... そうですね, まず<code>%ranking</code>というハッシュを作って, そこにキーを「食べ物の名前」, 要素を「その食べ物が好きな人の数」という形で格納していきましょう.<br/>
これで, ある食べ物を好きな人は何人いるか? というのが一目でわかるようになるはずです.</p>

<p>というわけで, まずは3人の好きな食べ物が格納された配列を取り出しましょう.<br/>
ついでに, <code>%ranking</code>の宣言も忘れずに.</p>

<pre><code>my %ranking;
for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
}
</code></pre>

<p><code>@people</code>に格納されているハッシュリファレンスが<code>$person</code>に格納されながらループが回っていきます.<br/>
その為, <code>$favorite_foods</code>には, <code>$person</code>というハッシュリファレンスの「favorite_foods」というキーが格納している, 好きな食べ物が格納された配列のリファレンスが代入されるはずです.</p>

<p>確認の為, <code>Data::Dumper</code>モジュールでダンプしてみましょう.</p>

<pre><code>use Data::Dumper;

my %ranking;
for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    print Dumper $favorite_foods;
}
</code></pre>

<p>恐らく, <code>$papix</code>, <code>$macopy</code>, <code>$moznion</code>の順番で, それぞれに格納されている「好きな食べ物」の配列の中身が出力されるはずです.</p>

<pre><code>$VAR1 = [
          'sushi',
          'niku',
          'ramen',
          'onigiri'
        ];
$VAR1 = [
          'sushi',
          'niku'
        ];
$VAR1 = [
          'sushi',
          'ramen'
        ];
</code></pre>

<p>あとは, <code>$favorite_foods</code>から1つずつ食べ物の名前を取り出して, <code>%ranking</code>に格納していけばOKです.<br/>
こんな感じでしょうか.</p>

<pre><code>for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    for my $food (@{$favorite_foods}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p><code>%ranking</code>を<code>print Dumper \%raking</code>といった感じでダンプしてみると,</p>

<pre><code>$VAR1 = {
          'onigiri' =&gt; 1,
          'sushi' =&gt; 3,
          'ramen' =&gt; 2,
          'niku' =&gt; 2
        };
</code></pre>

<p>こんな感じになるはずです.<br/>
ちゃんと, 食べ物の名前がキー, その食べ物を好きな人の数が要素になったハッシュが生成されていますね!</p>

<h4>ところで...</h4>

<p>さっきあっさりと流したのですが, こう思った人はいないでしょうか?
「あれ, <code>$ranking{$food}++</code>ってやってるけど, 最初は<code>$ranking{$food} = 0</code>で初期化したり, 初期化と1票を追加する処理を合わせて<code>$ranking{$food} = 1</code>とか書かなきゃ駄目じゃないの?」...と.</p>

<p>まず, ハッシュの任意のキーに対する要素(中身)は, 初期状態だとすべて<code>undef</code>になっています.<br/>
これは, 次のようなワンライナーで確認できます(ワンライナーについては, 近日中に<a href="http://twitter.com/songmu">@songmu</a>さんがこのブログで執筆してくれるそうです!!!).</p>

<pre><code>$ perl -MData::Dumper -le 'my %hash; print Dumper($hash{hoge});'
$VAR1 = undef;
</code></pre>

<p>で, <code>undef</code>はPerlでは「未定義の値」を意味するのですが, これに1を足そうとすると, なんと「0」として扱われるんですね.</p>

<pre><code>$ perl -le 'my $hoge = undef; $hoge++; print $hoge'
1
</code></pre>

<p>なので, 先ほどのように, いきなり<code>$ranking{$food}++</code>と書いても, うまくいく! という訳です.</p>

<h4>リファクタリング</h4>

<pre><code>for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    for my $food (@{$favorite_foods}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p>筋のいい方はお気づきかもしれませんが, このコードでは<code>$favorite_foods</code>を省略することができます.</p>

<pre><code>for my $person (@people) {
    for my $food (@{$person-&gt;{favorite_foods}}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p>個人的にはこちらの方が好みですが, どちらが書きやすいか/読みやすいかは個人の感性なので, 好きな方を選ぶと良いでしょう.</p>

<h3>更にチャレンジ!</h3>

<p>さて, これで3人の好きな食べ物についての票数を集計することができました.<br/>
でも, どうせなら人気順(票数順)に食べ物を表示してみたいですよね.</p>

<p>というわけで, もう少し頑張ってみましょう.<br/>
方針としては, <code>%votes</code>というハッシュを用意して, 「票数」をキーとして, そのキーに対応する要素として, 「その票数を獲得した食べ物」を配列のリファレンスとして格納していく... という感じにします.</p>

<pre><code>my %votes;
for my $food (keys %ranking) {
    push @{$votes{$ranking{$food}}}, $food;
}
</code></pre>

<p><code>%vote</code>をダンプしてみると, こうなるはずです.</p>

<pre><code>$VAR1 = {
          '1' =&gt; [
                   'onigiri'
                 ],
          '3' =&gt; [
                   'sushi'
                 ],
          '2' =&gt; [
                   'ramen',
                   'niku'
                 ]
        };
</code></pre>

<p>あとは, この<code>%votes</code>のキーを数値としてソートして表示すれば...</p>

<pre><code>for my $vote (sort { $b &lt;=&gt; $a } keys %votes) {
    print "$vote:\n";
    for my $food (@{$sort-&gt;{$vote}}) {
        print "  $food\n";
    }
} 
</code></pre>

<p>このように, 獲得した票数順に食べ物の名前が出てくるはずです!</p>

<pre><code>3:
  sushi
2:
  ramen
  niku
1:
  onigiri
</code></pre>

<h1>まとめ</h1>

<p>...それにしてもvote.pl, なかなか手応えのある問題ですね!      <br/>
ハッシュやリファレンスという道具は, Perlでコードを書く時に必ず必要になるモノなので, 2回, 3回と反復して解いて, 是非自分ものにして下さい.</p>

<p>「どれだけ考えても解けない...」という人は, 一歩ずつ解いていくことを意識すると, 解けるようになるかもしれません.<br/>
極端な話, コードを1行書くごとに実行して, 構文(シンタックス)に問題がないか, 出力が正しいかどうかを確かめていけば, 時間はかかりますが, いつか確実に完成するはずです.<br/>
一気に40行, 50行とコードを書くのは楽しいですが, そこでバグが出てきた場合, それまでに書いてきた50行を虱潰しにチェックして, どこにバグがあるかを探さなくてはなりません.</p>

<p>なので最初は, バグを取る為に調べる必要がある行数を減らす為に, 1行1行(...は, さすがに細かいので, 5行とか10行くらいとかの単位で...)確認しながらコーディングを進めていくことをおすすめします.
ある程度慣れてくると, エラーの出力から問題のあるコードが見えてくるようになるので, そうなれば一気に20行, 30行と書いていっても, 多少困らなくなると思います.</p>

<p>Perlという言語は, #2や#3でもお話した通り, 同じ問題を解いたとしても, ある程度いろいろな解き方が出てきます.<br/>
実行結果が同じであっても, やはり自分や他人が理解しやすいコードの方が後々助かるので, 自分の解答と他人の解答を見比べて, いいところを吸収して行くといいと思います.</p>

<p>「papixのコード, よくないと思う. 自分のコードが最高だ!」という方は, 是非gistやブログに掲載して頂けると嬉しいです. こちらの記事でも紹介させて頂きます.</p>

<h1>次回予告</h1>

<p>というわけで, 「Perl入学式 #3」の復習問題, vote.plの解答とその解説をお送りしました.<br/>
2013年のPerl入学式はあと3回, 大阪と東京で開催しますので, 皆さんと一緒にPerlを楽しめればいいな, と思っています(Perl入学式 in YAPC::Asiaもよろしくおねがいします!).</p>

<p>明日は, 「はてなインターン2013 第六天魔王将軍 ツールチェインギャング(反社会的ではない)見習い」こと, moznionくんに担当して頂く予定です.<br/>
お楽しみに!!!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-02.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-16T09:19:51+09:00</updated>
</entry>
<entry>
<title type="text">Perl meets Hardware #01 Perlとハードウェアが出会うには</title>
<link href="http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html" />
<author>
<name>mackee</name>
</author>
<content><![CDATA[<h1>Perl meets Hardware #01 Perlとハードウェアが出会うには</h1>

<p>オイコラ！　どうも<a href="https://twitter.com/mackee_w">マコピー</a>だ。</p>

<p>オイラのエントリは他の奴らのとはちょいと違う。<a href="http://Hachiojipm.org/">Hachioji.pm</a>だってんのにあるやつは<a href="http://hachiojipm.github.io/entry/2013-09-12-01.html">PHPのエントリ</a>を書いたり、あるやつは<a href="http://hachiojipm.github.io/entry/2013-09-11-01.html">暗黒美夢王って言ったらいいよ</a>といったばかりに<a href="https://twitter.com/ShougoMatsu/status/378156876212338688">ヤツが目覚めちまった</a>。</p>

<p>そんなわけでオイラは徹底的にPerlなエントリを極めてみたいと思う。それも胸焼けを起こさないように連載形式でだ。</p>

<p>Perlと相成れないと思われる存在、ハードウェア、もしくは電子工作を組み合わせたいと思う。</p>

<h2>何故Perlがハードウェアと相成れないのか</h2>

<p>Perlという言語は、元来テキスト処理のための言語だ。C言語でむき出しになっていたI/Oだのメモリだの、そういった泥臭い部分は綺麗に隠蔽化され、オイラたちはなにも気にせずに思う存分テキスト処理できる。</p>

<p>その代償として、処理系の向こうに隠れた電気的な信号まで制御ができない。そう、ピン一本一本まで制御したいオイラのような酔狂な奴にとってはそのベールを脱がしたいと思うのだ。だがそれをやるにはXSなどの硬派な書き方をしたりして回避しなければならない。手間だ。</p>

<p>さらに悲惨なことを、一言で表す。</p>

<pre><code>Only perl can parse Perl.
perl(コマンドとしてのPerl)でしかPerlをパースすることは出来ない。
</code></pre>

<p>RubyやPythonなどの他のモダンなLightweight Languageには第一のインタプリタ(MRIやCPython)のほかにもJRubyやJythonといったJVM上での実装もあればハードウェア上で動くフットプリントの小さい実装(mruby)などもある。</p>

<p>が、Perlには実用的な実装系はperlしかないのだ。
perlのフットプリントは非力なハードウェア上で動かのには厳しすぎる。では、もう少し小さいPerlのサブセットを探そうとしても、そんなものはない。</p>

<p>だが昨今は状況が変わってきた。そんな話題についてもこの連載で触れてみたいと思う。</p>

<h2>ハードウェア側からの歩み寄り RaspberryPi</h2>

<p>科学の進化というものは……その、まあ……驚きの連続だ。
もしハードウェアが進化して太ったPerlを載せられるような代物が出てきたら、Perlはダイエットをする必要がないだろう。</p>

<p><a href="http://www.raspberrypi.org/">RaspberryPi</a>。IT革命とスマートフォンブームが生み出したクレジットカードサイズの$25コンピュータだ。</p>

<p><img src="http://hachiojipm.github.io/static/image/raspberrypi.jpg" alt="RaspberryPi" /></p>

<p>フツーのLinux(カーネルは少々改造されているものの)が動き、フツーに使える。そこまで普遍的であるということは、</p>

<p><strong> Perlが動くということだ </strong></p>

<p>さらにRaspberryPiには、最近のモダンなコンピュータが失った自由に使えるGPIOと言う名のピンが備わっている。これで君は温度センサで部屋の温度を知ったり、GPSモジュールや三軸加速度モジュールを使ってどのような姿勢にあるのかを四六時中ロギングすることが出来るだろう。</p>

<h2>そんなわけで</h2>

<p>当連載ではPerlで書かれたコードをRaspberryPiその他のデバイス上で動かし、物理空間を読み取り物理空間へ影響を与えていくことにチャレンジして行こうと思う。</p>

<p>次回はお決まりのLEDでも光らせて、退屈だと思ったらPerlが得意な何かと組み合わせて小さなエレクトリカルパレードを演出してみようと思う。期待して欲しい。</p>

<p>以下はおちゃめなオイラがモンハン4をDL中に部品を実装しようとしたらはんだを買い忘れていて途方にくれていた時の机の様子だ。コレを見て楽しみに待っていて欲しい。
ちなみに中央右がRaspberryPiで、左がArduinoと呼ばれるもっと低レベルなボードだ。こいつも活用しようと思っている。</p>

<p><img src="http://hachiojipm.github.io/static/image/macopys_desk.jpg" alt="RaspberryPi&amp;Arduino" /></p>

<p>次はmod_perl神、<a href="https://twitter.com/xtetsuji">xtetsuji</a>氏の登場だ。クレイジーな発表を期待している。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-15:entry-2013-09-15-perl_meets_hardware_01.html</id>
<published>2013-09-15T10:10:37+0900</published>
<updated>2013-09-15T00:10:37+09:00</updated>
</entry>
<entry>
<title type="text">Perl5.10以降に追加された機能で良く使うお役立ち機能まとめ</title>
<link href="http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html" />
<author>
<name>Songmu</name>
</author>
<content><![CDATA[<h1>Perl5.10以降に追加された機能で良く使うお役立ち機能まとめ</h1>

<p><a href="https://twitter.com/songmu">Songmu</a>です。</p>

<p>Perlは5.10以降多くの機能が追加されていますが、巷のCPANモジュールの多くは5.8と互換性を保って書かれていることもあり、普段その機能を目にしない人も多いでしょう。<a href="https://metacpan.org/author/SONGMU">僕自身のCPANモジュール</a>も多くは5.8.1以降対応ですが、最近手元で動かすようなものに関しては5.10.1対応にすることも増えてきましたがそれでも、5.10.1止まりです。</p>

<p>実際のプロジェクトにおいては5.10以降の機能も使えるものは積極的に使っているのでその辺りの話。</p>

<h2><code>say</code>: 改行付きprint (5.10)</h2>

<p><code>print</code>してその後に改行を入れてくれる関数です。地味に便利です。</p>

<pre><code>use 5.010;
say 'Hello'; # Hello
</code></pre>

<p>ワンライナーでも -E スイッチで使えるようになるので近年は-eを使わずに専ら-Eです。</p>

<pre><code>% perl -E 'say "Hello"'
Hello
</code></pre>

<h2><code>//</code>: defined-or (5.10)</h2>

<p>初期化されていない変数に初期値を代入するために以下のようなコードを書く事があるでしょう。</p>

<pre><code>my $hoge = $fuga || 10;
$piyo ||= 15;
</code></pre>

<p><code>||</code>で真偽判定をしているわけですが、この場合、<code>$fuga</code>や<code>$piyo</code>に0が入っていた場合に意図しない挙動になってしまうかも知れません。Perlは<code>undef</code>の他に、空文字列や0も偽値として扱います。ただ、上記のような場合、厳密にundefかどうかを判定したいときもあります。そういう時に<code>//</code>を使います。</p>

<pre><code>my $undef;
my $zero = 0;
my $hoge = $zero || 10;  # $hoge == 10
my $fuga = $zero // 10;  # $fuga == 0
my $piyo = $undef // 10; # $piyo == 10
</code></pre>

<p>初期化されてない変数に初期値を入れるみたいな処理を書くときに重宝します。</p>

<pre><code>$hoge //= 10; # undefだったら10を代入する。0の場合は0のまま
</code></pre>

<p>これは5.8以前だと、<code>$hoge = defined $hoge ? $hoge : 10;</code> などと書かないといけませんでした。</p>

<p>ところで、空文字や0が偽値になるっていうのは好き嫌いはあるかと思いますが僕は好きです。</p>

<h2><code>state $var</code>: Persistent Private Variables (5.10)</h2>

<p>永続的なレキシカル変数です。同じスコープに入っても再度初期化処理がされないというのが<code>my</code>と異なります。</p>

<p>毎回同じ値を使うのに、同じ初期化処理が走るのは無駄に感じるときとかに使います。<a href="https://metacpan.org/module/Data::Validator#SYNOPSIS">Data::ValidatorのSYNOPSIS</a>でも使われています。</p>

<p>例えば以下はFurlで指定したURLの内容を取得する処理ですが、この関数が2回目以降に呼ばれた場合は<code>$ua</code>は再度初期化はされずに、同じオブジェクトが使いまわされることになります。</p>

<pre><code>sub get_url {
    my $url = shift;
    state $ua = Furl-&gt;new;
    $ua-&gt;get($url);
}
</code></pre>

<p><code>state</code>では同じ変数が使いまわされることになるので、副作用のある変数を使う時は多くの場合オススメできません。メモリキャッシュ的な用途での使い途はありますが、注意が必要です。</p>

<h2><code>-f -x $file</code>: ファイル演算子が重ねられる (5.10)</h2>

<p>ファイル演算子が重ねられます。具体的には、ファイルであり実行可能であるみたいな条件を以前は</p>

<pre><code>-f $entry &amp;&amp; -x $entry
</code></pre>

<p>などと書いていたところを</p>

<pre><code>-f -x $entry
</code></pre>

<p>と書けます。地味に便利。</p>

<h2><code>~~</code>: smart match (5.10)</h2>

<p>よしなマッチ。5.18から実験的機能に格下げになってしまったので、あまり積極的に使わない方が良いでしょう。僕は配列内の存在チェックとかで地味に便利なのでそこだけは使っています。</p>

<pre><code>$var ~~ [1,2,5,8,10];
</code></pre>

<p>スマートマッチを使わない場合だと以下のように書かないといけないのが地味に面倒です。</p>

<pre><code>grep {$var == $_} 1,2,5,8,10
</code></pre>

<h2><code>given ... when</code>: switch (5.10)</h2>

<p>switch文的なやつ。Rubyのcase式みたいによしなマッチ的なこともしてくれます。と言うか内部的に前項のsmart matchを使ってるからなのです。なので、smart matchが実験的な機能になってしまっているので、<code>given ... when</code>も実験的な機能に格下げされています。悲しいですね。</p>

<p>ちなみに、switchを実現するSwitch.pmというモジュールがあるのですが、これは<strong>絶対に使ってはけません</strong>。これが一番言いたかったことです。理由はググってください。</p>

<h2><code>...</code>: yada-yada operator (5.12)</h2>

<p>未実装の部分を<code>...</code>として宣言することができます。実行時にそこを通った時に例外を吐いてくれます。</p>

<pre><code>% perl -E 'sub { ... }-&gt;()'
Unimplemented at -e line 1.
</code></pre>

<p>あまり使うことはないのですが、<code>...</code>という文字列がサンプルコードとしてvalidであったりするのがちょっと便利。もしくはモジュールなんかでも「このメソッドは将来的には用意するつもりだよ」的なことを示すのに使ったりできます。</p>

<h2><code>use 5.012;</code>: 暗黙的なuse strict (5.12)</h2>

<p>5.12以降は、<code>use 5.012</code>, <code>use 5.018</code> などとすると、そのバージョンのfeatureが使えるほか、自動的に<code>use strict</code>扱いしてくれるようになっています。地味に便利。</p>

<h2><code>s///r</code>: 非破壊的な正規表現置換 (5.14)</h2>

<p><code>s///</code>による置換は破壊的なので、元の文字列に変更を加えたくない場合は別の変数に移し替える必要がありましたが、<code>/r</code>修飾子を使うことで非破壊的になり、置換結果を左辺に返してくれるようになりました。</p>

<pre><code>my $str        = 'moznion';
my $str_result = $str;
$str_result =~ s/moz/hage/; # hagenion
</code></pre>

<p>が以下のように書けます。</p>

<pre><code>my $str        = 'moznion';
my $str_result = $str =~ s/moz/hage/r; #hagenion
</code></pre>

<p>あんま便利に感じられないかもしれませんが、例えば以下のように配列の全要素に置換をかけてその結果を返すみたいなときに威力を発揮します。</p>

<pre><code>my @replaced = map {s/hoge/fuga/r} @orig;
</code></pre>

<p>各要素を置換した結果が<code>@replaced</code>に入ります。元の文字列は破壊されないため、<code>@orig</code>に意図しない変更が入ることもありません。</p>

<h2><code>package NAMESPACE {...}</code>: ブロック付きpackage宣言 (5.14)</h2>

<p>package宣言がブロックを伴うことができます。</p>

<pre><code>package Hoge;
...
</code></pre>

<p>などと書いていたところを</p>

<pre><code>package Hoge {
    ...
}
</code></pre>

<p>と書くことができるようになりました。1つのファイル内に複数のパッケージ宣言を書きたい時とかにスコープをちゃんと分けられます。もともと</p>

<pre><code>{
    package Hoge;
    ...
}
</code></pre>

<p>と書くこともできて、同じことではあるのですが、それがかっちょよく書くことができるようになったということです。</p>

<p>個人的な使い方としてはファイル名と一致するNamespaceのパッケージはブロック付きにはせず、インナーパッケージはブロック付きで宣言するようにしています。以下の様な具合です。</p>

<pre><code># Foo/Bar.pm
package Foo::Bar;
...
package Foo::Bar::Inner {
    ...
}
1;
</code></pre>

<h2><code>push $arrey_ref, 'hoge';</code>: オートデリファレンス (5.14);</h2>

<p>5.14以降に実験的な機能としてオートデリファレンスが実験的な機能として入っています。</p>

<p>便利だと思うのですがあまり好んで使っている人がいないので、僕も使わないようにしています。</p>

<ul>
<li>Perlっぽくない</li>
<li>いつオートデリファレンスが発動するかわかりづらい</li>
<li>意図しない挙動になりそうで怖い</li>
</ul>


<p>というのが理由でしょうか。実際問題として、<code>for my $elm ($array_ref) {...}</code>みたいなところでは、オートデリファレンス効かない(効いたら効いたで困ることもある)ので、わかりづらいってのはありそうです。</p>

<p>Perlには<code>wantarray</code>というちょっとわかりづらいよしな機能があるので、そういう暗黙的に便利なことをしてくれちゃうみたいなことに対しては慎重な態度を取るってのが最近のPerl界隈の傾向かも知れません。</p>

<h2><code>my sub hoge {...}</code>: lexical_subs (5.18)</h2>

<p>名前付き関数はネームスペースで区切ることはできるもののグローバルですが、レキシカルな関数宣言が5.18以降、できるようになっています。まだ実験的な機能で僕も使っていません。</p>

<p><code>my $sub = sub {...}</code> ってやればいいし、別にこの機能いらないんじゃないの？っていう意見が大勢だったのですが、<a href="https://metacpan.org/module/Exporter::Lexical">Exporter::Lexical</a>の登場で、実はこの機能は熱いんじゃないかという感じになってきています。<a href="https://metacpan.org/module/Exporter::AutoClean">Exporter::AutoClean</a>的なことが簡単に実現できるわけです。</p>

<hr />

<p>ということで、Perl5.10機能のお役立ち機能をまとめてみました。明日はpapix君でしょうか。2回目ですね。まこぴーとはなんだったのか。</p>

<p>と思ったらまこぴーが書くようです。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-14:entry-2013-09-14-perlfeature.html</id>
<published>2013-09-14T33:33:26+0900</published>
<updated>2013-09-14T23:26:41+09:00</updated>
</entry>
<entry>
<title type="text">購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</title>
<link href="http://hachiojipm.github.io/entry/2013-09-11-01.html" />
<author>
<name>boolfool</name>
</author>
<content><![CDATA[<h1>購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</h1>

<p><a href="https://twitter.com/bool_fool">boolfool</a>です.<br/>
昨日は, <a href="https://twitter.com/moznion">@moznion</a>氏による<a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</a>で, 今日はこれの Vim 版でお送りしたいと思います.</p>

<h2>ブログ編</h2>

<ul>
<li><h3><a href="http://d.hatena.ne.jp/osyo-manga/">C++でゲームプログラミング</a></h3>

<p><a href="https://twitter.com/manga_osyo">@manga_osyo</a> さんのブログ. 自作プラグインの紹介や tips など毎日更新されておられます.</p></li>
<li><h3><a href="http://cohama.hateblo.jp/">反省はしても後悔はしない</a></h3>

<p>Nagoya.vim の主催者である <a href="https://twitter.com/c0hama">@c0hama</a> さんのブログで, <a href="http://cohama.hateblo.jp/entry/2013/09/09/033028">この記事</a>にあるスライドはVimを使いはじめた人, そうでない人, どちらにもとても分かりやすいですね.</p></li>
<li><h3><a href="http://vinarian.blogspot.jp/">あるVimmerのブログ</a></h3>

<p>NeoBundle, neocomplete といったプラグインの作者の暗黒美夢王 <a href="https://twitter.com/@ShougoMatsu">@ShougoMatsu</a> さんのブログです. 最新の歌やエディタアニメについても仕入れることができます.</p></li>
<li><h3><a href="http://rhysd.hatenablog.com/">sorry, unimplemented:</a></h3>

<p>clever-f の作者 <a href="https://twitter.com/Linda_pp">@Linda_pp</a> さんのブログです. 作成されたプラグインの導入記事が分かりやすいです. また数少ない <a href="http://rhysd.hatenablog.com/entry/2013/08/08/233743">Travis CI に関する記事</a>もあります.</p></li>
<li><h3><a href="http://d.hatena.ne.jp/tyru/">Humanity</a></h3>

<p><a href="https://twitter.com/tyru">@tyru</a> さんのブログです. Vim Advent Calendar への投稿が盛り沢山ですね. 正規表現, コマンドに対するコメントが丁寧に書いてあるので, 一つ一つの記事が大変参考になります.</p></li>
<li><h3><a href="http://mattn.kaoriya.net/">Big Sky</a></h3>

<p>Vim だけでなく様々な界隈で有名な <a href="https://twitter.com/mattn_jp">@mattn_jp</a> さんのブログです.  最近は Go に関する記事が多く, <a href="http://mattn.kaoriya.net/software/vim/20130531000559.htm">Vimを使ったGo言語開発手法</a> という記事がGo入門の際に役立ちそうですね.</p></li>
<li><h3><a href="http://d.hatena.ne.jp/thinca/">永遠に未完成</a></h3>

<p><a href="https://twitter.com/thinca">@thinca</a> さんのブログです. プラグインの紹介だけでなく, 簡単な Unite ソースの作り方, tabline, quickfix など設定に関する記事も多々あります.</p></li>
</ul>


<h2>その他</h2>

<ul>
<li><h3><a href="https://twitter.com">Twiter</a></h3>

<ul>
<li>#vim 等のハッシュタグをウォッチする</li>
<li>#暗黒美夢王 のハッシュタグで暗黒美夢王の降臨を待機する</li>
<li>気になる Vimmer をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="https://github.com">Github</a></h3>

<ul>
<li>気になる vimrc, プラグインをウォッチする</li>
<li><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> は先人の知恵が詰まっています</li>
<li>気になる Vimmer をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="http://lingr.com/room/vim">vim-users-jp</a></h3>

<p>Lingr チャンネルである "vim-users-jp" をウォッチすると良いでしょう.<br/>
毎週土曜日に vimrc読書会 が開催されています</p></li>
<li><h3><a href="http://atnd.org/events/33746">Vim Advent Calendar 2012</a></h3>

<p>まだまだ継続されているので, ここを見ておけば最新の情報を入手できるでしょう.</p></li>
</ul>


<h2>まとめ</h2>

<p>Vim Advent Calendar をチェックして, vim-jp の <a href="http://vim-jp.org/vimmers/">Vimmers</a> の方々をフォローしておくのが良いと思います.<br/>
これからも Vim に感謝の気持ちと愛をもって接していきます.
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" /></p>

<p>明日は <a href="https://twitter.com/mackee_w">@mackee_w</a> さんです.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-11:entry-2013-09-11-01.html</id>
<published>2013-09-11T45:45:06+0900</published>
<updated>2013-09-14T22:33:26+09:00</updated>
</entry>
<entry>
<title type="text">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-03.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</h1>

<p>先日まで“<a href="http://www.hatena.ne.jp/company/staff/intern">はてなインターン2013</a>”に参加しておりました，<a href="https://twitter.com/moznion">@moznion</a>です．はてなインターンの感想エントリすら書いてないのにこのブログで記事を書くのかよ！！　という非難が各方面から聞こえる思いがしますが，書けって脅された……失敬，言われたので書きます．</p>

<p>はてなインターンの感想記事は近いうちに書くので，その際は皆様ここぞとばかりにバカスカはてブしてくださいませね！！　承認欲求！！！！！！！　ｷｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪ！！！！！！！！</p>

<p>さて，先日催されました <a href="http://www.zusaar.com/event/996003">Perl入学式in東京 #3 補講</a> にて，「Perl の情報をどこから得ているのか？」というような話題になった (らしい) ので，僕が普段活用している情報ソースに就いて記します．</p>

<h2>ブログ編</h2>

<ul>
<li><h3><a href="http://weblog.bulknews.net/">Tatsuhiko Miyagawa's blog</a></h3>

<p>言わずと知れた世界の Perl Hacker，<a href="http://twitter.com/miyagawa">@miyagawa</a> さんのブログです．大半の記事が英語なので敷居が高いように感じてしまうかもしれませんが，国内国外を問わない新鮮な情報が得られるので非常に有益です．最高！！！</p></li>
<li><h3><a href="http://blog.64p.org/">tokuhirom's blog</a></h3>

<p>こちらも言わずと知れた Perl Hacker である<a href="http://twitter.com/tokuhirom">@tokuhirom</a> さんのブログです．更新頻度が高く，常に新鮮な情報が得られるので最高です．時折掲載される Tips に何度救われたことかわかりません．</p></li>
<li><h3><a href="http://d.hatena.ne.jp/gfx/">Islands in the byte stream</a></h3>

<p>Mouse や Text::Xslate の作者で有名な <a href="http://twitter.com/__gfx__">@gfx</a> さんのブログです．大変有益な情報が多く重宝しております．それにしても<a href="http://d.hatena.ne.jp/gfx/20130909/1378741015">この記事</a>非常に良いですね！</p></li>
<li><h3><a href="http://d.hatena.ne.jp/charsbar/">Charsbar::Note</a></h3>

<p><a href="https://twitter.com/charsbar">@charsbar</a> さんのブログです．Perl の Toolchain にまつわる話題などが多く，また「ランカスターコンセンサス」等といった海外での議論をわかりやすく日本語で解説されており非常に参考になります．</p></li>
<li><h3><a href="http://www.songmu.jp/riji/">おそらくはそれさえも平凡な日々</a></h3>

<p><a href="https://twitter.com/songmu">@songmu</a> さんのブログです．内容も多岐にわたっていて非常に勉強になります．ところでこのブログのエンジンである Riji は @songmu さんお手製なんですよ．すごいですね！</p></li>
<li><h3><a href="http://blog.yappo.jp/yappo/">YappoLogs</a></h3>

<p><a href="https://twitter.com/yappo">@yappo</a> さんのブログです．こちらのブログも内容が多岐にわたっていて大変参考になります．</p></li>
<li><h3><a href="http://blog.livedoor.jp/xaicron/">にひりずむ::しんぷる</a></h3>

<p><a href="https://twitter.com/xaicron">@xaicron</a> さんのブログです．便利情報が多くて最高です．背景のせいで読みにくい，という話を良く耳にしますが僕はそこまで気になりません．</p></li>
<li><h3><a href="http://yusukebe.com/">ゆーすけべー日記</a></h3>

<p>日本の誇るエロギークこと <a href="https://twitter.com/yusukebe">@yusukebe</a> さんのブログです．ムフフな記事が多めかと思いきや真面目な記事が多く大変有益です．Mojolicious の記事が多い印象があります．</p></li>
<li><h3><a href="http://lestrrat.ldblog.jp/">D-7 <altijd in beweging></a></h3>

<p>JPA 代表理事の<a href="https://twitter.com/lestrrat">@lestrrat</a> さんのブログです．お役立ち Tips や時折入ってくるお子さんの情報が最高です．あと，YAPC の話題ならここ！！　って感じですね．</p></li>
<li><h3><a href="http://blog.papix.net/">Masteries</a></h3>

<p><a href="https://twitter.com/__papix__">@papix</a> さんのブログです．チュートリアル的な記事が多く，またその解説も丁寧なので大変参考になります．</p></li>
<li><h3><a href="http://www.dagolden.com/">dagolden</a></h3>

<p>世界的 Perl Hacker である David Golden さんのブログです．全編に渡って英語ですが，Toolchain や Perl 運用関連のシステムの解説が多く，参考になります．</p></li>
<li><h3><a href="http://blog.nomadscafe.jp/">blog.nomadscafe.jp</a></h3>

<p>インフラの巨頭であられる <a href="https://twitter.com/kazeburo">@kazeburo</a> さんのブログです．サーバー周りだとこのブログを超えてくる情報はなかなか無いでしょう．普段参考にしまくっているはずなのに，なぜか載せ忘れていましたが他意はありません．本当に申し訳ない気持ちでいっぱいです！ あばばばば</p></li>
</ul>


<p>他にも色々と最高のブログがあると思うので，そこら辺はみなさん探してみてください！　そして教えてください！！</p>

<h2>その他</h2>

<ul>
<li><h3><a href="https://twitter.com">Twitter</a></h3>

<ul>
<li>#perl 等のハッシュタグで 検索・監視する</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="https://github.com">Github</a></h3>

<ul>
<li>気になるモジュールをウォッチする</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="http://lingr.com/room/perl_jp/">Perlの話題を日本語で</a></h3>

<p>Lingr チャンネルである “Perlの話題を日本語で” をウォッチすると良いでしょう．</p></li>
<li><h3><a href="http://www.cpan.org/modules/01modules.mtime.html">CPAN's 150 most recent uploads</a></h3>

<p>ここ最近で新たにアップロードされたモジュールの一覧が見れるので便利．RSS リーダとかに突っ込んでおくと良いかもしれません．</p></li>
<li><h3><a href="http://rebuild.fm/">Rebuild</a></h3>

<p><a href="http://twitter.com/miyagawa">@miyagawa</a> さんが配信されている Podcast です．毎回面白い放送が配信されているので購読すると良いでしょう．</p></li>
</ul>


<p>だいたいこんな感じかと思います！！　参考になれば幸いです！！！
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-10:entry-2013-09-09-03.html</id>
<published>2013-09-10T17:17:22+0900</published>
<updated>2013-09-14T22:33:26+09:00</updated>
</entry>
<entry>
<title type="text">八王子 CPANモジュールコレクション 2013 秋</title>
<link href="http://hachiojipm.github.io/entry/2013-09-13-01.html" />
<author>
<name>ytnobody / satoshi azuma</name>
</author>
<content><![CDATA[<h1>八王子 CPANモジュールコレクション 2013 秋</h1>

<p>タイトルはテキトーです。みなさんどうも、一見さんにはtwitterアカウントの読み方がわからない<a href="https://twitter.com/ytnobody">ytnobody</a>です。ちなみに読み方は、<a href="https://twitter.com/Yappo/status/369724942733946880">この人ならたぶんしってる</a>んじゃないでしょうか。お好きなように読んでください。</p>

<h2>まこぴーファンの皆様へお詫び</h2>

<p>全国およそ２００万人のまこぴーファンのみなすぁーん！大変もうしわけございませんが、まこぴー氏お取り込み中につき、今回はワタクシめが執筆担当を代行いたします。</p>

<p>ファンの皆様におかれましては、これに懲りず、気長にまこぴー氏の登場をお待ちいただけますと幸いです。</p>

<h2>CPANモジュールコレクション</h2>

<p>冒頭にも書きましたが、タイトルはテキトーです。ちょっとだけパリコレに肖ってみようとしただけです。</p>

<p>さて、要するに今回の記事は2013年秋現在において、とってもよく使われている（と僕が思っている）CPANモジュールをごく簡単に紹介していく、というものです。まとめ記事みたいなもんですね。たぶんそのうち(12時間以内くらいに)もっとちゃんとした記事をきっとPerlのすごい人が書いてくれると思いますが、なにか書かないとまたアイコンを変更する羽目になるので、とにかく紹介していきます。</p>

<h3>Perlをインストールするところから - perl-build (Perl::Build)</h3>

<p>指定したバージョンのperlを、指定した場所にインストールしてくれるツールです。使い方はこんな感じ。</p>

<pre><code>% curl https://raw.github.com/tokuhirom/Perl-Build/master/perl-build | perl - 5.16.2 /opt/perl-5.16/
</code></pre>

<p>なお最近では、（今やCPANモジュールではなくなってしまいましたが）plenvというツールを使うことで、かなり容易にPerl環境の構築を行うことができるようになりました。</p>

<ul>
<li><a href="http://search.cpan.org/perldoc?perl-build">perl-build on CPAN</a></li>
<li><a href="http://blog.papix.net/entry/2013/06/04/081554">続･plenvを使ってみた - Masteries</a></li>
</ul>


<h3>CPANモジュールをインストールするなら - cpanm (App::cpanminus)</h3>

<p>いまどきはcpanコマンドやcpan shellをつかってモジュールをインストールする必要がすっかりなくなってしまい、代わりにこのcpanmを使ってインストールするケースがほとんどになりました。</p>

<p>導入方法は簡単。</p>

<pre><code>curl -LOk http://xrl.us/cpanm &amp;&amp; chmod +x cpanm
</code></pre>

<p>あとはパスの通ったディレクトリに置くといいでしょう。</p>

<p>もしくは、plenvをお使いの場合はもっと楽で、</p>

<pre><code>plenv install-cpanm
</code></pre>

<p>これで導入完了。すばらしいですね。</p>

<p>そして使い方も簡単。インストールしたいモジュール名を指定するだけ。すごい。</p>

<pre><code>cpanm Some::Module
</code></pre>

<ul>
<li><a href="http://search.cpan.org/perldoc?cpanm">cpanm on CPAN</a></li>
</ul>


<h3>現代的なWebAppの基礎 - Plack</h3>

<p>かつてならば「PerlといえばCGI」だったりしたものですが、今や時代はPSGI。今時Perlでwebappを書くなら、PSGIのリファレンス実装であるPlackを使うケースがほとんどでしょう。</p>

<p>たとえば常に 'Hello, moznion!' をかえすwebappは PSGIでは以下のようになります。</p>

<pre><code>sub { [200, [], ['Hello, moznion!']] };
</code></pre>

<p>これを適当な名前(例えばfoo.psgi)で保存しておき、Plackに同梱されているplackupコマンドを使って以下のように実行すると http://hachiojipm.github.io:5000/ にアクセス出来るようになり、Hello, moznion! と返ってきます。</p>

<pre><code>plackup foo.psgi
</code></pre>

<p>ちなみにwebappを終了する場合は Ctrl+C です。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc?Plack">Plack on CPAN</a></p></li>
<li><p><a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub/000102">第1回　PSGI/Plack―フレームワークとサーバをつなぐエンジン　（2）：Perl Hackers Hub｜gihyo.jp … 技術評論社</a></p></li>
</ul>


<h3>テストを書くならこれ - Test::More</h3>

<p>今の時代もテストについてはそれほど大きく変化しておらず、Test::Moreを使ったやり方が主流です。
それは、このモジュールがわずかなな機能しか提供しないにもかかわらず、それで必要十分であることの証左であるといえます。</p>

<p>もちろん、Test::Moreは必要最低限の機能しか提供していませんので、必要に応じて追加のモジュールを利用すればよいのです。
また、機能が少ない分、動作が高速である点も見逃せません。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/Test::More">Test::More on CPAN</a></p></li>
<li><p><a href="http://blog.64p.org/entry/2012/11/12/094307">Perl テスティングハンドブックという電子書籍をだしてみた - blog.64p.org</a></p></li>
</ul>


<h3>超軽量なクラスビルダ - Class::Accessor::Lite</h3>

<p>アクセサメソッドの作成(Read Only / Read Write)とnewメソッドの実装省略ができるようになります。
同様のモジュールには Class::Accessor::Fast が存在しますが、Class::Accessor::Liteのほうが高速であり、継承をする必要がない点において優れていると僕は思います。</p>

<p>例えばドーナツ袋を表すクラスは以下のように定義できます。</p>

<pre><code>package Doughnut::Bag;
use strict;
use Class::Accessor::Lite (
    new =&gt; 1,
    ro  =&gt; [qw[ flavor ]],
    rw  =&gt; [qw[ net ]],
);
1;
</code></pre>

<p>実際にこのクラスを使う場合は、</p>

<pre><code>my $bag = Doughnut::Bag-&gt;new(flavor =&gt; 'Chocolate', net =&gt; 10);
</code></pre>

<p>のようにできます。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/Class::Accessot::Lite">Class::Accessor::Lite on CPAN</a></p></li>
<li><p><a href="http://d.hatena.ne.jp/kazuhooku/20081126/1227691412">Class::Accessor::Lite 書いた - kazuhoのメモ置き場</a></p></li>
</ul>


<h3>割と本気だけど爆速なクラスビルダ - Mouse</h3>

<p>こちらもクラスビルダですが、単純なアクセサ作成に止まらず、デフォルト値や型チェック、Roleなどに対応しており、高機能です。にもかかわらず、速度面においても十分すぎるほどのパフォーマンスを実現しています。また、同様のモジュールにMooなどがあり、海外ではそちらの方が人気がある様ですが、細かい面で仕様に違いがあります。</p>

<p>こちらもドーナツ袋を表すクラスを例に取ると、</p>

<pre><code>package Doughnut::Bag;
use Mouse;
has flavor =&gt; ( is =&gt; 'ro', isa =&gt; 'Str', default =&gt; 'Sugar' );
has net    =&gt; ( is =&gt; 'rw', isa =&gt; 'Int' );
1;
</code></pre>

<p>となり、利用する場合は、</p>

<pre><code>my $bag = Doughnut::Bag-&gt;new(net =&gt; 10); ### flavor を省略したので flavorは'Sugar'となる
</code></pre>

<p>のようになります。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/Mouse">Mouse on CPAN</a></p></li>
<li><p><a href="http://perl-users.jp/articles/advent-calendar/2010/hacker/25">Mouseに関する4つの誤解 - JPerl Advent Calendar 2010 Hacker Track</a></p></li>
</ul>


<h3>テンプレートエンジンの決定版 - Text::Xslate</h3>

<p>かつてはTemplate.pm(TT2等と呼ばれている)が主流だったのですが、最近はこのText::Xslateがスタンダードになりつつあるように思います。</p>

<p>このモジュール独自のテンプレート文法であるSyntax::Kolonに加え、TT2との互換性がとても高いSyntax::TTerseが使えるのが、その理由の一つと言えそうです。</p>

<p>また、数あるテンプレートエンジンの中でも特に速度面で突出しており、それでいて大手webサービスでの採用実績もあり、安定性とパフォーマンスを両立していると言えます。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/Text::Xslate">Text::Xslate on CPAN</a></p></li>
<li><p><a href="http://xslate.org/">Xslate</a></p></li>
<li><p><a href="http://gihyo.jp/dev/serial/01/modern-perl/0043">第43回　Text::Xslate：永続環境に特化したテンプレートエンジン：モダンPerlの世界へようこそ｜gihyo.jp … 技術評論社</a></p></li>
</ul>


<h3>HTMLのフォームへデータを流し込む - HTML::FillInForm::Lite</h3>

<p>HTML::FillInFormと比較して倍くらいの速度で動作します。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/HTML::FillInForm::Lite">HTML::FillInForm::Lite on CPAN</a></p></li>
<li><p><a href="http://search.cpan.org/~gfuji/HTML-FillInForm-Lite-1.09/lib/HTML/FillInForm/Lite/JA.pod">日本語ドキュメント</a></p></li>
</ul>


<h3>近頃のバリデーション処理はこれ - FormValidator::Lite</h3>

<p>バリデーション処理をざくざく書ける、比較的軽量なバリデータです。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/FormValidator::Lite">FormValidator::Lite on CPAN</a></p></li>
<li><p><a href="http://blog.64p.org/entry/20090308/1236515220">FormValidator::Lite を CPAN にあげた - blog.64p.org</a></p></li>
</ul>


<h3>CPANモジュール作成ツール - Minilla</h3>

<p>CPANモジュールの雛形を作ってくれるツールです。僕自身もいくつかCPANにモジュールをアップロードしていますが、それらも大抵はこのMinillaを使って構築しています。</p>

<ul>
<li><p><a href="http://search.cpan.org/perldoc/Minilla">Minilla on CPAN</a></p></li>
<li><p><a href="http://t.nzk.me/entry/2013/04/12/162608">CPANモジュール開発ツール、Minillaをつかってみる - コードを舐める日々</a></p></li>
<li><p><a href="http://yellowstore.blogspot.jp/2013/05/perlminilla.html">YellowStore: [Perl]せっかくだから俺はこのMinillaを選ぶぜ</a></p></li>
</ul>


<p>さて、いくつかの鉄板とおもわれるモジュールを紹介しました。まだまだここに挙げた他にも鉄板モジュールはありますが、最近とくに目にする物に絞って列挙させていただきました。</p>

<h2>YAPC::Asiaで僕と握メ！</h2>

<p>来週9/20(金)～9/21(土)にPerlの祭典 <a href="http://yapcasia.org/2013/">YAPC::Asia</a> が開催されますが、実は9/19(木)には前夜祭が催されます。</p>

<p>そして今年は前夜祭にて、<a href="http://hachiojipm.org/">hachioji.pm</a>の首領 uzulla氏が司会進行をつとめる<a href="http://ltthon-yapc2013.hachiojipm.org/">LTthon</a>が行われます。（ちなみに僕はサクラ兼お手伝いとして参加する予定です！）</p>

<p>LTthonは非常に懐が深いLTマラソンイベントとなっております。昨年はスープカレーや格闘ゲームの話でLTを行った方もいらっしゃいました。</p>

<p>このように非常にカジュアルで最高のイベントですし、気後れとか遠慮はいらないですので、どんどんトーカーとしてに応募しましょう！！<a href="https://twitter.com/uzulla/status/377863278019743744">uzulla氏の頭髪を保全するため</a>にもぜひお願いします！</p>

<p>最後になりますが、YAPC::Asia閉会後には、yusukebe氏主催イベント<a href="http://peatix.com/event/17621">大人のYAPC</a>が催されます。僕も僭越ながらLTで発表する予定ですので、参加予定の方はよろしくお願いいたします。</p>

<h2>明日のHachioji.pm日めくりテックトーク</h2>

<p>このブログシステムの作者であるSongmuさんが書いてくれるそうですよ！</p>

<p>見逃すなっ！！！</p>

<div class="animebox">
<img class="animate" src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png">
</div>




<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>


<script type="text/javascript">
$(function(){
    var width = parseInt($('img.animate').parent().width());
    var img_width = parseInt($('img.animate').width());
    var max_margin = width - img_width;
    var animation_moz = function () {
        $('img.animate').animate({'margin-left': '0%'}, 1400, 'swing', function(){ 
            $('img.animate').animate({'margin-left': max_margin + 'px'}, 1400, 'swing', animation_moz);
        });
    };
    animation_moz();
});
</script>

]]></content>
<id>tag:hachiojipm.github.io,2013-09-13:entry-2013-09-13-01.html</id>
<published>2013-09-13T05:05:36+0900</published>
<updated>2013-09-14T22:33:26+09:00</updated>
</entry>
<entry>
<title type="text">PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</title>
<link href="http://hachiojipm.github.io/entry/2013-09-12-01.html" />
<author>
<name>uzulla</name>
</author>
<content><![CDATA[<h1>PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</h1>

<p>みなさん今日もPHP書いてますか？（挨拶）ここのブログの一番したにAuthorとかかいてあるけど、実際には初めてこのブログに触る<a href="http://twitter.com/uzulla/">uzulla</a>です。</p>

<p>まこぴーさんファンの皆様、もうしわけございません、まこぴー氏多忙につき繰り上げの代替原稿です。</p>

<p>普段は<a href="http://uzulla.hateblo.jp/">自分のブログ</a>に記事かいてるのですが、なんか寄稿しないと気まずいので寄稿します。</p>

<p>私は今日も元気にPHPをかいてます。勿論イヤイヤなどではありません、私はPHPerです！</p>

<h2>ところで</h2>

<p>来週Perlのお祭りである所の<a href="http://yapcasia.org/2013/">YAPC::Asia Tokyo 2013</a>が開催されますね、最高のイベントです、皆さん行くと思います。
私は前夜祭にて、<a href="http://hachiojipm.org/">hachioji.pm</a>の面々と、LTソン::Tinyを開催します</p>

<p><a href="http://ltthon-yapc2013.hachiojipm.org/">http://ltthon-yapc2013.hachiojipm.org/</a></p>

<p>先日からトーカーを募集しておりますが、今のところ去年同様に非常にスロースタートな感じで、人があつまらなくて主催の胃がいたいので、YAPC前夜祭に参加する方で、LTしたいかもしれない！という方は是非お待ちしております。</p>

<p>去年同様、飛び込みも（出切る範囲で）受け入れたいと思いますので、一身上や宗教上の理由などでATNDに登録できなくとも、当日は是非宜しくお願い致します。</p>

<p>あ、YAPCはPerlの祭典ですけど、LTソンはPHPでも全然いいですよ。去年もPerlまったく関係ない楽しいトーク沢山ありましたし。なにせ司会がPHPerですから、PHPなら優遇する可能性すらあります。（というか去年、PHPだけは居なかった感）</p>

<h2>さて本題もおわりましたので、余談です。</h2>

<p>PHP 5.4からはいった、PHPのBuilt-in Server，皆さん活用していることとおもわれます。してますよね？
してないし、phpなんか今後も使う気がない、という人はここまでの宣伝もよんでいただけましたでしょうし、有り難うございました、お気を付けてお帰りください。</p>

<p>さて、知らない人に説明すると、DocRootに相当するDirに移動してから</p>

<pre><code>php -S 127.0.0.1:1234
</code></pre>

<p>などとすると、Httpdがたちあがって、そのままPHPや、ウェブサイトの開発ができちゃう、というもの凄い便利な憎いやつです。
世の中には「ワンライナーでHTTPを立ち上げて確認」などいうお役立ち情報に注目があつまる事がありますが、PHPならコマンド一発ですよ、まったくすごい。</p>

<p>私も最近はできるだけBSで開発するようになっています、楽なので。
もうApache+mod_phpの環境を何個もならべるのには疲れたのですよ…。</p>

<p>ただ、今現在ちょっとしたところで躓いたので、その話です。
ちなみに、わたし は今php5.5.1で作業をしています。</p>

<h2>PHP Builtin Serverの挙動</h2>

<p>PHP Builtin serverは、</p>

<pre><code>http://127.0.0.1:1234/hogehoge/test
</code></pre>

<p>などしてアクセスしたとき、内部的にindex.phpをよびだすように</p>

<pre><code>/index.php/hogehoge/test
</code></pre>

<p>等と変換してくれて、世間一般的に.htaccessとかで設定される感じの、まあ良い感じにしてくれるのですが、</p>

<p>この時、</p>

<pre><code>/hogehoge/pseudo_file_name.html
</code></pre>

<p>とかURLにドットがはいると、index.phpに渡されずに、静的ファイルを探しに行ってしまいます。当然404になってつらい</p>

<p>その場合、</p>

<pre><code>php -S 127.0.0.1:1234 index.php
</code></pre>

<p>などとして、ルータのPHPファイルを強制指定してあげると良いよ〜というのが定番の解決策です。</p>

<p>でも、これやると全部がPHPの処理になっちゃうから静的ファイルどうするの？不便だ！とおもわれるかもしれません。
大丈夫です、余り細かく説明はしませんが、もし静的ファイルを送りたいときは、<code>return false</code>でおとすと
再度PHPがファイルをさがしにいってくれるので、ちょっとした追記で心配ご無用の助です（本エントリ後半に、軽いサンプルコードあります）。</p>

<p><a href="http://php.net/manual/pt_BR/features.commandline.webserver.php">http://php.net/manual/pt_BR/features.commandline.webserver.php</a></p>

<h2>しかし…</h2>

<p>そういう風に説明はされているんですけど、
.がはいってると、どうも$_SERVERまわりの変数が、.なしとくらべてかわってしまうのですよね、具体的にはPATH_INFOがおかしくなる。</p>

<p>例えば,</p>

<pre><code>&lt;?php
var_dump($_SERVER);
</code></pre>

<p>をindex.phpとしておいてある場合に、</p>

<pre><code>http://127.0.0.1:1234/
-出力-
array (size=21)
（略
  'REQUEST_URI' =&gt; string '/' (length=1)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/index.php' (length=10)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PHP_SELF' =&gt; string '/index.php' (length=10)
（略
</code></pre>

<p>と</p>

<pre><code>http://127.0.0.1:1234/test
-出力-
array (size=22)
（略
  'REQUEST_URI' =&gt; string '/test' (length=5)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/index.php' (length=10)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PATH_INFO' =&gt; string '/test' (length=5)
  'PHP_SELF' =&gt; string '/index.php/test' (length=15)
（略
</code></pre>

<p>以上二つは良いのですけれど、ここで<code>test.php</code>などとしてみると</p>

<pre><code>http://127.0.0.1:1234/test.php
-出力-
array (size=21)
（略
  'REQUEST_URI' =&gt; string '/test.php' (length=9)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/test.php' (length=9)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PHP_SELF' =&gt; string '/test.php' (length=9)
（略
</code></pre>

<p>こうなってしまって、<code>/test</code>と<code>/test.php</code>で、<code>PATH_INFO</code>が変わってしまって辛い。</p>

<p>最近のWAFは<code>PATH_INFO</code>を積極的につかって、routingやargのキャプチャを実現していますが、そいつがコケてしまう…。つらい。</p>

<h2>惜しい</h2>

<p>まあ、解決策がないわけではなくて、BSの時だけ、処理の前段でPATH_INFOが無い場合にREQUEST_URIを加工して、PATH_INFOをねつ造するというテクもあるのですが、たとえばこういうかんじ。</p>

<pre><code>// Builtin Serverの時だけ処理する、Apacheなどでは無視される
if (php_sapi_name() == 'cli-server') {
    // PATH_INFOを捏造
    if(!isset($_SERVER['PATH_INFO'])){
            $_SERVER['PATH_INFO'] = $_SERVER['REQUEST_URI'];
    }

    // ここで、適切な正規表現で静的ファイルか、PHPへのリクエストかきりわける。
    // 静的ファイルならreturn falseさせるように、色々判定させる
    if ( !preg_match('#^/(blog|post|nom)/#', $_SERVER["PATH_INFO"])) {
        return false;
    }
    if ( preg_match('#\.(jpg|png|gif|js|css|and_other)$#', $_SERVER["PATH_INFO"])) {
        return false;
    }
}

// ここから先、通常の処理
var_dump($_SERVER);
</code></pre>

<p>まあ、あんまりやりたくないですよね。ここらへん直って欲しいなぁ〜〜。静的ファイルがなかったら、処理するという.htaccessでいうところの</p>

<pre><code>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [QSA,L]
</code></pre>

<p>このような挙動をする実装になっていてくれたほうがありがたかった。</p>

<p>PATH_INFOのリカバリが基本になったり、登録されていないrouteならreturn falseしてくれるような感じにWAF側にとりこまれてもいいのですが…。</p>

<p>PHP Builtin serverは開発にとってもイイナイスなものですが、既存環境との差もちらほらあります、これがどう今後埋まっていくのか？という感じですね！</p>

<p>この辺り、もっと良い感じになってくれるといいなーとかおもって今日の話は終わりです。</p>

<h2>非常になげやりで、謎な宣伝</h2>

<p>友人かつhachioji.pm メンバーのmoznion君（彼女募集中）が承認欲求不満なそうなので、皆さん大変お手数なのですが、ブクマ乞食にブクマをめぐんであげて下さい…。</p>

<p><a href="http://moznion.hatenadiary.com/entry/2013/09/11/163554">http://moznion.hatenadiary.com/entry/2013/09/11/163554</a></p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="承認欲求の権化" /></p>

<p>ここの所「アイドルに勝ちたい！まけられない！勝たなければセップクしかない！超えられるなら、毛髪をかけてもよい！きえええええ！！！」と大騒ぎしていて、さっさとアイドルのブクマをぬいてもらってmoznion君（彼女募集中）におかれましては精神を安定して頂きたい所です。
<a href="http://yancha.hachiojipm.org/quot?id=115773,115771,115770,115557,115552,115551,115533,115499,115492,115086,115082,115076,114745,114743,114523,114522,114517,114514,114513,114512,114511,114505,114492,114485,114483">参考</a></p>

<p>今確認したら、あとちょっとでこえられそう、あと一息、あと一息でございます！</p>

<p>一応本文についても触れておくと、マトモなことがかかれています。テック的な話は勿論参考になりますし（俺もはてなインターンで修行したい！と思った、両手で足りないほど遅い）、紋切り型の読書感想文みたいなものではなく、moznion君（彼女募集中）がインターンで得たものを彼なりに説明しているので、良エントリだと思います。moznion君（彼女募集中）の気づきはみなさんにとって既知かもしれませんが、オトク情報だけがネットではありません。</p>

<p>ただ、個人的にいわせてもらえば、ブクマ稼ぎたいならもっと煽ったりネタ画像を貼るべきだった、moznion君（彼女募集中）の実直さ、誠実さが邪魔をしたのでしょう。</p>

<p>そして、LTソンの宣伝をすべきだった。</p>

<p>さておき、「で、誰？」というブクマだけでもよろこばれると思いますので、是非。</p>

<p><a href="http://moznion.hatenadiary.com/entry/2013/09/11/163554">http://moznion.hatenadiary.com/entry/2013/09/11/163554</a></p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="承認欲求の権化" /></p>

<p>ところで、この写真ボクは<a href="http://blogimg.goo.ne.jp/user_image/56/b1/31a3dbb6d2470b712e2140a5c7b30a81.jpg">変わり兜</a>をかぶった武将にしかみえないんですけど、ボクだけですかね？</p>

<h2>さ〜て、明日のHachioji.pm日めくりテックトークは？</h2>

<p>東の東（ひがしのあずまさん）さんこと、ytnobodyさんです。</p>

<p>（期待してたまこぴーさんファンは、もうちょ〜っとまっててネ！）</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-12:entry-2013-09-12-01.html</id>
<published>2013-09-12T46:46:52+0900</published>
<updated>2013-09-14T22:33:26+09:00</updated>
</entry>
</feed>
