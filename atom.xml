<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.9">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-09-10T01:36:26+09:00</updated>
<entry>
<title type="text">｢Perl入学式 第3回｣の復習問題, vote.plを解いてみよう!</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>｢Perl入学式 第3回｣の復習問題, vote.plを解いてみよう!</h1>

<p>皆様こんにちは.
｢Perl入学式 in 東京 #3 補講｣の待ち時間に, プロジェクターに映しながら艦これで3-2-1へ1回出撃したら, 那珂ちゃんがドロップして超爆笑したりしたpapixです.</p>

<p>...というわけで, 突如始まった｢Hachioji.pm 日めくりテックトーク｣の第一陣を務めさせて頂きます.
このテックトークは, Hachioji.pmらしく(?), 割と"何でもアリ"な感じでゆるふわにやって行きたいと思っています.
多分, 今後songmuさんがRijiの話をしたり(このブログもRijiで作られています!), ytnobodyさんがNephiaの話をしたり, mackee_wさんがヘリの話をしたり, moznionくんがXMLモジュールの話をしたり, xtetsujiさんがmod_perlの話をしたり, boolfoolがVimの話をしたり, あとはHachioji.pmは｢Hachioji PHP Monster｣の略なので, 総帥のuzullさんがPHPの話をしたりすると思います.</p>

<p>そんな｢日めくりテックトーク｣の記念すべき第1回ですが, 最初からガチな感じで行くと身構えられてしまうかもしれないので, 今回はゆるふわに, 以前開催した｢Perl入学式 #3｣の復習問題の｢vote.pl｣をネタとして取り上げてみたいと思います.</p>

<p>｢Perl入学式 #3｣では, ハッシュやリファレンスといった, Perlのキモとも言うべき部分にチャレンジしました.
復習問題の｢vote.pl｣も, それらの要素がゴロゴロ入ったいい問題に仕上がっています.</p>

<ol>
<li>「自分の名前 (name)」と「好きな食べ物の配列のリファレンス (favorite_foods)」を持ったハッシュリファレンスを作成しましょう (つまり、好きな食べ物は複数個書いてください)</li>
<li>同様のハッシュリファレンスを2, 3個作ってみましょう (周りの人のリアルデータを使ってハッシュrefを作ると良いかもしれません)</li>
<li>作成した複数のハッシュリファレンスを1つの配列に格納しましょう (配列を操作する関数を使っても良いですし、直で代入しても良いです)</li>
<li>どんな方法でも良いので、好きな食べ物のランキングを作って表示してみて下さい</li>
</ol>


<h2>解答例</h2>

<p>...さあ, どういうコードが出来上がったでしょうか?
というわけで, いきなりですが解答例を見てみましょう.</p>

<p>あくまでpapixが考えた｢解答例｣なので, この通りに書いていないとダメ! という訳ではありません.
あえて言えば, 結果が同じであれば, 自分の書き方とpapixの書き方のどちらが書きやすいか見比べてみて, ｢こっちの方が理解できる! わかりやすい!｣と思う方が(あなたにとっての)正解, と言えると思います.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ($papix, $macopy, $moznion);

my $ranking;
for my $person ( @people ) {
    for my $food ( @{$person-&gt;{favorite_foods}} ) {
        $ranking-&gt;{$food}++; 
    }
}

use Data::Dumper;
warn Dumper $ranking;
</code></pre>

<p>この場合, 出力はこんな感じになるはずです(それぞれの要素が出現する順番が変わっているかもしれませんが...).</p>

<pre><code>$ perl vote.pl
$VAR1 = {
          'onigiri' =&gt; 1,
          'sushi' =&gt; 3,
          'ramen' =&gt; 2,
          'niku' =&gt; 2
        };
</code></pre>

<h2>更にチャレンジ</h2>

<p>さて, 3人の好きな食べ物についての票数を集計することができました.
でも, どうせなら人気順に表示してみたいですよね.</p>

<p>...ということで, こんな感じになりました.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ( $papix, $macopy, $moznion );

my $ranking;
for my $person ( @people ) {
    for my $food ( @{$person-&gt;{favorite_foods}} ) {
        $ranking-&gt;{$food}++; 
    }
}

my $sort;
for my $food (keys %{$ranking}) {
    push @{$sort-&gt;{$ranking-&gt;{$food}}}, $food;
}

for my $votes (sort { $b &lt;=&gt; $a } keys %{$sort}) {
    print "$votes:\n";
    for my $food (@{$sort-&gt;{$votes}}) {
        print "  $food\n";
    }
} 
</code></pre>

<p>このコードの出力は, こうなります.</p>

<pre><code>$ perl vote.pl
3:
  sushi
2:
  ramen
  niku
1:
  onigiri
</code></pre>

<p>人気の食べ物が上に来ていますね!</p>

<h1>細かい解説</h1>

<p>(スイマセン明日書きます...)</p>

<h1>まとめ</h1>

<p>それにしてもvote.pl, なかなか手応えのある問題ですね!
ハッシュやリファレンスという道具は, Perlでコードを書く時に必ず必要になるモノなので, 2回, 3回と反復して解いて, 是非自分ものにして下さい.</p>

<p>｢どれだけ考えても解けない...｣という人は, 一歩ずつ解いていくことを意識すると, 解けるようになるかもしれません.
極端な話, コードを1行書くごとに実行して, 構文(シンタックス)に問題がないか, 出力が正しいかどうかを確かめていけば, 時間はかかりますが, いつか確実に完成するはずです.</p>

<p>一気に40行, 50行とコードを書くのは楽しいですが, そこにバグが生じた場合, バクを見つける為には, 前回実行して, 正常に動くことを確認したタイミングより後にコーディングした, 全ての行をチェックしていく必要があります.</p>

<p>なので最初は, バグを取る為に調べる必要がある行数を減らす為に, 1行1行(...は, さすがに細かいので, 5行とか10行くらいとかの単位で...)確認しながらコーディングを進めていくことをおすすめします.</p>

<p>ある程度慣れてくると, エラーの出力から問題のあるコードが見えてくるようになるので, そうなれば一気に20行, 30行と書いていっても, 多少困らなくなると思います.</p>

<p>Perlは, #2や#3でもお話しましたが, Perlは同じ問題を解いても, ある程度いろいろな解き方が出てきます.
結果が同じであっても, 出来れば自分や他人が理解しやすいコードの方がいいので, 自分の解答と私を含む他人の解答を見比べて, いいところを吸収していって下さい.</p>

<p>｢papixのコード, よくないと思う. 自分のコードが最高だ!｣という方は, 是非gistやブログに掲載して頂けると嬉しいです. こちらの記事で紹介させて頂きます.</p>

<h1>次回予告</h1>

<p>というわけで, ｢Perl入学式 #3｣の復習問題, vote.plの解答とその解説をお送りしました.
2013年のPerl入学式はあと3回, 大阪と東京で開催しますので, 皆さんと一緒にPerlを楽しめればいいな, と思っています(Perl入学式 in YAPC::Asiaもよろしくおねがいします!).</p>

<p>明日は, ｢はてなインターン2013 第六天魔王将軍 ツールチェインギャング(反社会的ではない)見習い｣こと, moznionくんがXMLに関するモジュールの話をしてくれる予定です. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-02.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-09T23:47:09+09:00</updated>
</entry>
<entry>
<title type="text">｢Hachioji.pm 日めくりテックトーク｣について</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>｢Hachioji.pm 日めくりテックトーク｣について</h1>

<p>Hachioji.pmが主催する, 日替わりで何らかのテックトークが投稿されていくカレンダーのようなものです.
書きたい人からじゃんじゃん書いていって下さい. Hachioji.pm以外の方も大歓迎です.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-01.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-09T23:47:09+09:00</updated>
</entry>
</feed>
