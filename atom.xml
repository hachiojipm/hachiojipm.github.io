<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.10">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-09-10T16:19:21+09:00</updated>
<entry>
<title type="text">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-03.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</h1>

<p>先日まで“<a href="http://www.hatena.ne.jp/company/staff/intern">はてなインターン2013</a>”に参加しておりました，<a href="https://twitter.com/moznion">@moznion</a>です．はてなインターンの感想エントリすら書いてないのにこのブログで記事を書くのかよ！！　という非難が各方面から聞こえる思いがしますが，書けって脅された……失敬，言われたので書きます．</p>

<p>はてなインターンの感想記事は近いうちに書くので，その際は皆様ここぞとばかりにバカスカはてブしてくださいませね！！　承認欲求！！！！！！！　ｷｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪ！！！！！！！！</p>

<p>さて，先日催されました <a href="http://www.zusaar.com/event/996003">Perl入学式in東京 #3 補講</a> にて，「Perl の情報をどこから得ているのか？」というような話題になった (らしい) ので，僕が普段活用している情報ソースに就いて記します．</p>

<h2>ブログ編</h2>

<ul>
<li><h3><a href="http://weblog.bulknews.net/">Tatsuhiko Miyagawa's blog</a></h3>

<p>言わずと知れた世界の Perl Hacker，<a href="http://twitter.com/miyagawa">@miyagawa</a> さんのブログです．大半の記事が英語なので敷居が高いように感じてしまうかもしれませんが，国内国外を問わない新鮮な情報が得られるので非常に有益です．最高！！！</p></li>
<li><h3><a href="http://blog.64p.org/">tokuhirom's blog</a></h3>

<p>こちらも言わずと知れた Perl Hacker である<a href="http://twitter.com/tokuhirom">@tokuhirom</a> さんのブログです．更新頻度が高く，常に新鮮な情報が得られるので最高です．時折掲載される Tips に何度救われたことかわかりません．</p></li>
<li><h3><a href="http://d.hatena.ne.jp/gfx/">Islands in the byte stream</a></h3>

<p>Mouse や Text::Xslate の作者で有名な <a href="http://twitter.com/__gfx__">@gfx</a> さんのブログです．大変有益な情報が多く重宝しております．それにしても<a href="http://d.hatena.ne.jp/gfx/20130909/1378741015">この記事</a>非常に良いですね！</p></li>
<li><h3><a href="http://d.hatena.ne.jp/charsbar/">Charsbar::Note</a></h3>

<p><a href="https://twitter.com/charsbar">@charsbar</a> さんのブログです．Perl の Toolchain にまつわる話題などが多く，また「ランカスターコンセンサス」等といった海外での議論をわかりやすく日本語で解説されており非常に参考になります．</p></li>
<li><h3><a href="http://www.songmu.jp/riji/">おそらくはそれさえも平凡な日々</a></h3>

<p><a href="https://twitter.com/songmu">@songmu</a> さんのブログです．内容も多岐にわたっていて非常に勉強になります．ところでこのブログのエンジンである Riji は @songmu さんお手製なんですよ．すごいですね！</p></li>
<li><h3><a href="http://blog.yappo.jp/yappo/">YappoLogs</a></h3>

<p><a href="https://twitter.com/yappo">@yappo</a> さんのブログです．こちらのブログも内容が多岐にわたっていて大変参考になります．</p></li>
<li><h3><a href="http://blog.livedoor.jp/xaicron/">にひりずむ::しんぷる</a></h3>

<p><a href="https://twitter.com/xaicron">@xaicron</a> さんのブログです．便利情報が多くて最高です．背景のせいで読みにくい，という話を良く耳にしますが僕はそこまで気になりません．</p></li>
<li><h3><a href="http://yusukebe.com/">ゆーすけべー日記</a></h3>

<p>日本の誇るエロギークこと <a href="https://twitter.com/yusukebe">@yusukebe</a> さんのブログです．ムフフな記事が多めかと思いきや真面目な記事が多く大変有益です．Mojolicious の記事が多い印象があります．</p></li>
<li><h3><a href="http://lestrrat.ldblog.jp/">D-7 <altijd in beweging></a></h3>

<p>JPA 代表理事の<a href="https://twitter.com/lestrrat">@lestrrat</a> さんのブログです．お役立ち Tips や時折入ってくるお子さんの情報が最高です．あと，YAPC の話題ならここ！！　って感じですね．</p></li>
<li><h3><a href="http://blog.papix.net/">Masteries</a></h3>

<p><a href="https://twitter.com/__papix__">@papix</a> さんのブログです．チュートリアル的な記事が多く，またその解説も丁寧なので大変参考になります．</p></li>
<li><h3><a href="http://www.dagolden.com/">dagolden</a></h3>

<p>世界的 Perl Hacker である David Golden さんのブログです．全編に渡って英語ですが，Toolchain や Perl 運用関連のシステムの解説が多く，参考になります．</p></li>
</ul>


<p>他にも色々と最高のブログがあると思うので，そこら辺はみなさん探してみてください！　そして教えてください！！</p>

<h2>その他</h2>

<ul>
<li><h3><a href="https://twitter.com">Twitter</a></h3>

<ul>
<li>#perl 等のハッシュタグで 検索・監視する</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="https://github.com">Github</a></h3>

<ul>
<li>気になるモジュールをウォッチする</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="http://lingr.com/room/perl_jp/">Perlの話題を日本語で</a></h3>

<p>Lingr チャンネルである “Perlの話題を日本語で” をウォッチすると良いでしょう．</p></li>
<li><h3><a href="http://www.cpan.org/modules/01modules.mtime.html">CPAN's 150 most recent uploads</a></h3>

<p>ここ最近で新たにアップロードされたモジュールの一覧が見れるので便利．RSS リーダとかに突っ込んでおくと良いかもしれません．</p></li>
<li><h3><a href="http://rebuild.fm/">Rebuild</a></h3>

<p><a href="http://twitter.com/miyagawa">@miyagawa</a> さんが配信されている Podcast です．毎回面白い放送が配信されているので購読すると良いでしょう．</p></li>
</ul>


<p>だいたいこんな感じかと思います！！　参考になれば幸いです！！！
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-10:entry-2013-09-09-03.html</id>
<published>2013-09-10T17:17:22+0900</published>
<updated>2013-09-10T16:19:21+09:00</updated>
</entry>
<entry>
<title type="text">｢Perl入学式 第3回｣の復習問題, vote.plを解いてみよう!</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>｢Perl入学式 第3回｣の復習問題, vote.plを解いてみよう!</h1>

<p>皆様こんにちは.
｢Perl入学式 in 東京 #3 補講｣の待ち時間に, プロジェクターに映しながら艦これで3-2-1へ1回出撃したら, 那珂ちゃんがドロップして超爆笑したりしたpapixです.</p>

<p>...というわけで, 突如始まった｢Hachioji.pm 日めくりテックトーク｣の第一陣を務めさせて頂きます.
このテックトークは, Hachioji.pmらしく(?), 割と"何でもアリ"な感じでゆるふわにやって行きたいと思っています.
多分, 今後songmuさんがRijiの話をしたり(このブログもRijiで作られています!), ytnobodyさんがNephiaの話をしたり, mackee_wさんがヘリの話をしたり, moznionくんがXMLモジュールの話をしたり, xtetsujiさんがmod_perlの話をしたり, boolfoolがVimの話をしたり, あとはHachioji.pmは｢Hachioji PHP Monster｣の略なので, 総帥のuzullさんがPHPの話をしたりすると思います.</p>

<p>そんな｢日めくりテックトーク｣の記念すべき第1回ですが, 最初からガチな感じで行くと身構えられてしまうかもしれないので, 今回はゆるふわに, 以前開催した｢Perl入学式 #3｣の復習問題の｢vote.pl｣をネタとして取り上げてみたいと思います.</p>

<p>｢Perl入学式 #3｣では, ハッシュやリファレンスといった, Perlのキモとも言うべき部分にチャレンジしました.
復習問題の｢vote.pl｣も, それらの要素がゴロゴロ入ったいい問題に仕上がっています.</p>

<ol>
<li>「自分の名前 (name)」と「好きな食べ物の配列のリファレンス (favorite_foods)」を持ったハッシュリファレンスを作成しましょう (つまり、好きな食べ物は複数個書いてください)</li>
<li>同様のハッシュリファレンスを2, 3個作ってみましょう (周りの人のリアルデータを使ってハッシュrefを作ると良いかもしれません)</li>
<li>作成した複数のハッシュリファレンスを1つの配列に格納しましょう (配列を操作する関数を使っても良いですし、直で代入しても良いです)</li>
<li>どんな方法でも良いので、好きな食べ物のランキングを作って表示してみて下さい</li>
</ol>


<h2>解答例</h2>

<p>...さあ, どういうコードが出来上がったでしょうか?
というわけで, いきなりですが解答例を見てみましょう.</p>

<p>あくまでpapixが考えた｢解答例｣なので, この通りに書いていないとダメ! という訳ではありません.
あえて言えば, 結果が同じであれば, 自分の書き方とpapixの書き方のどちらが書きやすいか見比べてみて, ｢こっちの方が理解できる! わかりやすい!｣と思う方が(あなたにとっての)正解, と言えると思います.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ($papix, $macopy, $moznion);

my $ranking;
for my $person ( @people ) {
    for my $food ( @{$person-&gt;{favorite_foods}} ) {
        $ranking-&gt;{$food}++; 
    }
}

use Data::Dumper;
warn Dumper $ranking;
</code></pre>

<p>この場合, 出力はこんな感じになるはずです(それぞれの要素が出現する順番が変わっているかもしれませんが...).</p>

<pre><code>$ perl vote.pl
$VAR1 = {
          'onigiri' =&gt; 1,
          'sushi' =&gt; 3,
          'ramen' =&gt; 2,
          'niku' =&gt; 2
        };
</code></pre>

<h2>更にチャレンジ</h2>

<p>さて, 3人の好きな食べ物についての票数を集計することができました.
でも, どうせなら人気順に表示してみたいですよね.</p>

<p>...ということで, こんな感じになりました.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ( $papix, $macopy, $moznion );

my $ranking;
for my $person ( @people ) {
    for my $food ( @{$person-&gt;{favorite_foods}} ) {
        $ranking-&gt;{$food}++; 
    }
}

my $sort;
for my $food (keys %{$ranking}) {
    push @{$sort-&gt;{$ranking-&gt;{$food}}}, $food;
}

for my $votes (sort { $b &lt;=&gt; $a } keys %{$sort}) {
    print "$votes:\n";
    for my $food (@{$sort-&gt;{$votes}}) {
        print "  $food\n";
    }
} 
</code></pre>

<p>このコードの出力は, こうなります.</p>

<pre><code>$ perl vote.pl
3:
  sushi
2:
  ramen
  niku
1:
  onigiri
</code></pre>

<p>人気の食べ物が上に来ていますね!</p>

<h1>細かい解説</h1>

<p>(スイマセン明日書きます...)</p>

<h1>まとめ</h1>

<p>それにしてもvote.pl, なかなか手応えのある問題ですね!
ハッシュやリファレンスという道具は, Perlでコードを書く時に必ず必要になるモノなので, 2回, 3回と反復して解いて, 是非自分ものにして下さい.</p>

<p>｢どれだけ考えても解けない...｣という人は, 一歩ずつ解いていくことを意識すると, 解けるようになるかもしれません.
極端な話, コードを1行書くごとに実行して, 構文(シンタックス)に問題がないか, 出力が正しいかどうかを確かめていけば, 時間はかかりますが, いつか確実に完成するはずです.</p>

<p>一気に40行, 50行とコードを書くのは楽しいですが, そこにバグが生じた場合, バクを見つける為には, 前回実行して, 正常に動くことを確認したタイミングより後にコーディングした, 全ての行をチェックしていく必要があります.</p>

<p>なので最初は, バグを取る為に調べる必要がある行数を減らす為に, 1行1行(...は, さすがに細かいので, 5行とか10行くらいとかの単位で...)確認しながらコーディングを進めていくことをおすすめします.</p>

<p>ある程度慣れてくると, エラーの出力から問題のあるコードが見えてくるようになるので, そうなれば一気に20行, 30行と書いていっても, 多少困らなくなると思います.</p>

<p>Perlは, #2や#3でもお話しましたが, Perlは同じ問題を解いても, ある程度いろいろな解き方が出てきます.
結果が同じであっても, 出来れば自分や他人が理解しやすいコードの方がいいので, 自分の解答と私を含む他人の解答を見比べて, いいところを吸収していって下さい.</p>

<p>｢papixのコード, よくないと思う. 自分のコードが最高だ!｣という方は, 是非gistやブログに掲載して頂けると嬉しいです. こちらの記事で紹介させて頂きます.</p>

<h1>次回予告</h1>

<p>というわけで, ｢Perl入学式 #3｣の復習問題, vote.plの解答とその解説をお送りしました.
2013年のPerl入学式はあと3回, 大阪と東京で開催しますので, 皆さんと一緒にPerlを楽しめればいいな, と思っています(Perl入学式 in YAPC::Asiaもよろしくおねがいします!).</p>

<p>明日は, ｢はてなインターン2013 第六天魔王将軍 ツールチェインギャング(反社会的ではない)見習い｣こと, moznionくんがXMLに関するモジュールの話をしてくれる予定です. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-02.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-09T23:47:09+09:00</updated>
</entry>
<entry>
<title type="text">｢Hachioji.pm 日めくりテックトーク｣について</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>｢Hachioji.pm 日めくりテックトーク｣について</h1>

<p>Hachioji.pmが主催する, 日替わりで何らかのテックトークが投稿されていくカレンダーのようなものです.
書きたい人からじゃんじゃん書いていって下さい. Hachioji.pm以外の方も大歓迎です.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-01.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-09T23:47:09+09:00</updated>
</entry>
</feed>
