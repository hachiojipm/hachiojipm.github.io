<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm 日めくりテックトーク</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.10">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-12-02T05:56:49+09:00</updated>
<entry>
<title type="text">App::Nakachanを作ってみた</title>
<link href="http://hachiojipm.github.io/entry/2013-12-06-nakachan.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>App::Nakachanを作ってみた</h1>

<p><strong>気合! 入れて! 書きます!!!</strong></p>

<p>...という訳で皆様, 師走ですね. アドベントカレンダーの時期ですね.<br/>
本日は, Hachioji.pm Advent Calendar 兼 <a href="http://atnd.org/events/45245">艦これAdvent Calendar</a>の6日目という事でお送りしていきます.</p>

<p>さて皆さん. 突然ですが, ｢遠征｣の情報ってどうやって確認していますか?<br/>
移動時間や作業時間の間に, 愛しい艦娘が提督の為に資源をかき集めてくれる遠征は, 艦これの醍醐味(?)であり, もはやなくてはならない要素の1つです.</p>

<p>要求Lv, 所要時間, 報酬, 遠征を成功させる為に必要な編成... 遠征を効率よく, かつ失敗させずに行う為には, 遠征に関する諸々の情報を覚えておく必要があるのですが, 流石にこれらを全て覚えているのは, 記憶力のいい人か<strong>艦これ廃人</strong>のいずれかだと思います.<br/>
おそらく多くの方は<a href="http://wikiwiki.jp/kancolle/?%B1%F3%C0%AC">｢艦隊これくしょん -艦これ- 攻略Wiki｣の遠征ページ</a>とかで確認しているのではないでしょうか.</p>

<p>今回は, 艦これの遠征に関する情報をコマンドラインで確認できるツール, ｢App::Nakachan｣というものを作ってみたので, 紹介したいと思います.<br/>
余談ですが, ここのところ学会論文や修士論文の執筆に追われていて, App::Nakachanを完成させる為に久々に2時間程度コーディングをしたのですが, <strong>とても楽しかったです.</strong></p>

<h2>App::Nakachanのインストール</h2>

<p>App::Nakachanのコードは, githubで公開しています.</p>

<p><a href="https://github.com/papix/App-Nakachan">https://github.com/papix/App-Nakachan</a></p>

<p>Perlで書いているので, <strong>よしなにインストールしましょう.</strong></p>

<h2>App::Nakachanの使い方</h2>

<p>App::Nakachanをインストールすると, <code>nakachan</code>コマンドが使えるようになります.<br/>
とりあえず今日のアドベントカレンダーに間に合わせる為に機能はあまりありません.</p>

<p><code>nakachan --id 4</code>と打ち込むと, 遠征IDが4である遠征の情報が表示されます.</p>

<pre><code>$ nakachan --id 4  
Select: Expedition - ID: 4  
========================================  
04 - [D] 対潜警戒任務 (鎮守府海域) / 要求Lv 3 / 所要時間 00:50:00  
  報酬: 石油 0 / 弾薬 60 / 鋼材 0 / ボーキ 0  
        高速修復材 0,1  
  編成: 全3隻 軽1隻, 駆2隻  
  消費: 燃料 5目盛り / 弾薬 0目盛り  
</code></pre>

<p>また, <code>nakachan --area [0-4]</code>と打ち込むと, 該当する海域の遠征を全て見ることができます.<br/>
ちなみに, 0が鎮守府海域, 1が南西諸島海域, 2が北方海域, 3が西方海域, 4が南方海域です.</p>

<pre><code>$ perl -Ilib bin/nakachan --area 4  
Select: Expedition - Area ID: 4  
========================================  
33 - [E] 前衛支援任務 (南方海域) / 要求Lv unknown / 所要時間 00:15:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 0 / ボーキ 0  
  編成: 全2隻 駆2隻  
  消費: 燃料 5目盛り / 弾薬 4,8目盛り  
========================================  
34 - [E] 艦隊決戦支援任務 (南方海域) / 要求Lv unknown / 所要時間 00:30:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 0 / ボーキ 0  
  編成: 全2隻 駆2隻  
  消費: 燃料 5目盛り / 弾薬 4,8目盛り  
========================================  
35 - [S] MO作戦 (南方海域) / 要求Lv 40 / 所要時間 07:00:00  
  報酬: 石油 0 / 弾薬 0 / 鋼材 240 / ボーキ 280  
        (開発資材 0,1)  
  編成: 全6隻 空母2隻, 駆1隻, 重1隻  
  消費: 燃料 8目盛り / 弾薬 8目盛り  
========================================  
36 - [S] 水上機基地建設 (南方海域) / 要求Lv 30 / 所要時間 09:00:00  
  報酬: 石油 300 / 弾薬 0 / 鋼材 150 / ボーキ 150  
        (高速修復材 0,1)  
  編成: 全6隻 水母2隻, 軽1隻, 駆1隻  
  消費: 燃料 8目盛り / 弾薬 8目盛り  
========================================  
</code></pre>

<p>便利... なのか...?<br/>
将来的には, ｢あるを効率良く獲得できる遠征一覧｣とかを出せるようにすれば, もっと便利になりそうです.</p>

<h2>まとめ</h2>

<p>艦これの遠征情報をコマンドラインで確認するツール, ｢App::Nakachan｣を作ってみました.<br/>
今日のアドベントカレンダーに間に合わせるために2時間でガサっと実装した機能だけでは, 正直そこまでありがたみがないので, 細かい検索を出来るようにしたり, あるいは艦娘のステータス情報とかも検索･表示できるようになればいいなー, と思っています.</p>

<p>というわけで, 明日の艦これアドベントカレンダーは@pugiemonnさん, 明日のHachioji.pm Advent Calendarは@hirobanexさんの予定です. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-06:entry-2013-12-06-nakachan.html</id>
<published>2013-12-06T36:36:45+0900</published>
<updated>2013-12-06T00:44:30+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜北海道/フェリー編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-04-travel04.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜北海道/フェリー編〜</h1>

<p><font size='1'>
　　　　∩＿∩　　　　　人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人人<br/>
　　 ／ ＼ ／＼　　　＜ すごいアドベントカレンダーを感じる。今までにない何か熱いアドベントカレンダーを。　＞<br/>
　　|　 （ﾟ）=（ﾟ）　|　　 ＜ 記事・・・なんだろう増えてきてる確実に、着実に、25日に向けて。.　　　　　　　　　　　　　＞<br/>
　　|　　●_●　 |　　 ＜ 中途半端はやめよう、とにかく最後までやってやろうじゃん。　　　　　　　　　　　　　　　　　 ＞<br/>
　/　　　　　　　　ヽ　 ＜ Yanchaの向こうには沢山の仲間がいる。決して一人じゃない。　　　　　　　　　　　　　　　 ＞<br/>
　| 〃 ------ ヾ　|　＜ 信じよう。そしてともに記事を書こう。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 ＞<br/>
　＼＿＿二＿＿ノ　 ＜ ツッコミや邪魔は入るだろうけど、絶対にくじけるなよ。　　　　　　　　　　　　　　　　　　　　＞<br/>
　　　　　　　　　　　　　 ＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹＹ
</font></p>

<p>...というわけで(どういう訳だ), Hachioji.pm Advent Calendarの4日目です.<br/>
@bool_foolにはお願いしてみたのですが, ｢パワハラ!!!｣と力強く断られてしまったので, 今日も私が担当致します.<br/>
今日は, 昨日宣言しました通り, フェリーを使った北海道への格安移動手段を紹介したいと思います.</p>

<p>さて, 関東から北海道へ向けてフェリーで移動する場合, 大きく分けて2つの選択肢が候補となります.<br/>
一つは新潟から日本海を経由して小樽へ向かうルート, もうひとつは大洗から太平洋を経由して苫小牧へ移動するルートです.<br/>
というわけで, 今回はこの2ルートについて紹介したいと思います.</p>

<h2>日本海ルート</h2>

<p>新潟から北海道を結ぶ船舶としては, ｢<a href="http://www.snf.jp/">新日本海フェリー</a>｣が新潟〜小樽航路を運行しています.<br/>
新潟から小樽への便は火曜日から日曜日に運航されており, 朝10:30に新潟港を出て, 翌日04:30に小樽に到着するスケジュールで運航しています.<br/>
小樽から新潟への便も火曜日から日曜日に運航されていますが, 日曜日とそれ以外で運行スケジュールが異なっていて, 火曜日〜土曜日は小樽を10:30に出発して新潟着は翌日06:00, 日曜日は19:30小樽発翌15:30新潟着, というスケジュールになっています.</p>

<p>もう1つ, 新日本海フェリーは新潟〜苫小牧東港を秋田経由で結ぶ便(日によっては敦賀始発･終着)もありますが, ダイヤが複雑な上, 秋田に寄港する分所要時間がかかるのでオススメしません.<br/>
加えて, 小樽〜札幌と苫小牧〜札幌で言えば, 明らかに小樽から札幌の方が移動しやすいので, 苫小牧に行く用事がないのであれば, 新潟〜小樽航路を利用するのが賢い選択だと思います.</p>

<h2>太平洋ルート</h2>

<p>一方, 太平洋から北海道へ行く場合, ｢商船三井フェリー｣を使う事になるでしょう.<br/>
大洗と苫小牧を結ぶ船舶を1日2便運行していて, 大洗発は18:30発〜翌13:3着と01:45発〜19:45着, 苫小牧発は18:45発〜翌14:00着と10:30発〜19:45着のスケジュールとなっています.</p>

<h2>関西から北海道へ</h2>

<p>一方, 関西から北海道を目指す場合, ｢新日本海フェリー｣の舞鶴〜小樽航路を使うのが便利です.<br/>
運休日はあるものの, 基本的には毎日運航しており, 00:05舞鶴発〜20:45小樽着と, 23:30小樽発〜21:15舞鶴着のスケジュールで運航しています.<br/>
特定日のみではありますが, 敦賀〜小樽航路や舞鶴〜苫小牧航路もあるようです.</p>

<p>また, 太平洋経由で｢<a href="http://www.taiheiyo-ferry.co.jp/">太平洋フェリー</a>｣を利用するという手もあります.<br/>
19:00名古屋発〜翌16:40仙台着, 19:40仙台発〜翌11:00苫小牧着と, 苫小牧19:00発〜翌10:00仙台着, 12:50仙台発〜翌10:30名古屋着, というスケジュールで運航しています.<br/>
太平洋側ルートとは異なり, 船上で2泊する必要はありますが, 太平洋フェリーの｢きそ｣, ｢いしかり｣及び｢きたかみ｣は船の内装やサービスが非常に良いので, ｢慌ただしい日常から離れた, ゆったりとした時間｣を過ごすには最適な選択肢になるでしょう.</p>

<h2>船舶の料金</h2>

<p>一番安い船室を選んだ場合, 閑散期であれば新日本海フェリー(新潟〜小樽)で6300円, 商船三井フェリー(大洗〜苫小牧)で8500円が片道の料金となります.<br/>
但し, 会社によっては(閑散期限定の場合が多いですが)早期予約や学割, 往復といった各種割引を適用することで, 40%〜50%の割引料金で利用できる場合もあります.</p>

<p>例えば, 新日本海フェリーの新潟〜小樽･苫小牧航路では, 現在｢<a href="http://www.snf.jp/news/whatsnew/925">新潟寄港40週年プレシーズン割</a>｣というインターネット限定の割引を行なっており, 新潟〜小樽･苫小牧航路を往復で利用することで, 一番安い船室であるツーリストJが片道3,300円で利用できるようになったりします.<br/>
また太平洋フェリーの場合, 乗船日28日前までの予約で最大50%割引となる｢<a href="http://www.taiheiyo-ferry.co.jp/unchin/plan06.html">早割</a>｣が用意されています.</p>

<p>料金や割引制度については, 時期によって変わることがありますので, 各社ホームページ等でしっかり確認するようにして下さい.</p>

<h2>船舶利用時の注意点</h2>

<p>船舶を利用する際に注意すべき点は, ｢駅から港までの移動手段｣です.<br/>
小樽港や大洗港は, 徒歩圏内になんとか駅がありますが, 新潟駅や苫小牧駅はバス等の公共交通機関を利用する必要があります.<br/>
駅から港まで, 或いは港から駅までのバスは, 便数が少ない(場合によっては, 利用できる時間に運転しているバスがない)場合があるので, 予約前に接続可能な公共交通期間についてしっかり確認しておく必要があります.<br/>
港からのバス路線等については, 各社ホームページに掲載されていることが多いです.</p>

<p>また, 商船三井フェリーでは, <a href="http://www.sunflower.co.jp/ferry/campaign/story/index.shtml">フェリーと高速バスの連絡切符</a>を用意しており, 東京から大洗までと, 苫小牧から札幌, 小樽, 旭川の間を, 高速バスを利用して移動することができるようです.<br/>
このような企画を利用するという手もアリでしょう.</p>

<h2>まとめ</h2>

<p>簡単ではありますが, 船舶を利用して北海道へ向かう方法についてまとめてみました.<br/>
船舶の旅は, 利用する航路(と会社)によって, 発着時間や料金プラン, 割引制度, 船室のクオリティなど異なりますので, 事前に利用する会社のホームページで確認しておくことが大切になります.</p>

<p>船舶の旅は時間こそかかりますが, 航空機を使うよりも安い上, 鉄道よりも楽(乗り換えが不要)です.<br/>
何より, 船上で海を眺めながらゆったりとした時間を過ごす... というのは, 非常に心が落ち着くので, 精神衛生的にも良いです.</p>

<p>...ちなみに携帯電話の電波ですが, 案外繋がります.<br/>
以前, 太平洋フェリーで名古屋から苫小牧へ移動した際は, 青森〜苫小牧の一部区間を除けば, ほとんどauの3G回線を拾ってインターネットが使えました.</p>

<p>というわけで奇跡的にまだまだ続いているHachioji.pm Advent Calendar, 明日はなんと! 初めてpapix以外の方が執筆します!!!<br/>
明日の担当は@ytnobodyさん, 一体どのようなお話が聞けるのでしょうか. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-06:entry-2013-12-04-travel04.html</id>
<published>2013-12-04T59:59:00+0900</published>
<updated>2013-12-06T00:40:01+09:00</updated>
</entry>
<entry>
<title type="text">Hackを支える作業用BGM事情</title>
<link href="http://hachiojipm.github.io/entry/2013-12-05-shoutcast.html" />
<author>
<name>ytnobody</name>
</author>
<content><![CDATA[<h1>Hackを支える作業用BGM事情</h1>

<h2>作業用BGMが支えてきた僕のOSSプロジェクト</h2>

<p>こんばんはこんばんは！おしさしぶりですね！<a href="http://ytnobody.net/">ytnobody</a>です！</p>

<p>さて、みなさん素敵なHackしてますか？！</p>

<p>ぼくは今年は<a href="https://github.com/testament-testing-env/Testament">Testament</a>(test向け仮想環境構築ツール、最近は放置プレイ)とか<a href="https://github.com/nephia/Nephia">Nephia</a>(マイクロコア・WAF)あたりに結構リソースを注ぎました。</p>

<p>で、じつはぼく、作業用BGMが無いとなかなか思考が働いてくれません。</p>

<p>そんなもんで、これらのプロジェクトのコードを書くときには大体何かしらの音楽を聴きながら作業してきたわけですが、毎回同じ楽曲だと人間飽きてくるもの。かと言って、毎週iTunesで新しいアルバムを3つ4つ購入できるほど潤沢な資金があるわけでもないですし、むしろそれだと自分の気に入った楽曲ばかりになって、やっぱりそのうち飽きるのが見え見えです。</p>

<h2>お金もそんなにない、でも毎回同じ曲は飽きる・・・</h2>

<p>じゃあどうするか。答えは簡単。「作業用BGMとして適度にWebラジオを取り入れようじゃないか」。</p>

<h2>Webラジオを聴くための環境</h2>

<p>僕の場合は大体iPhoneで<a href="http://tunein.com/">TuneIn Radio</a>というアプリを使って聴いています。</p>

<p>ほかにはiTunesでもいいですし、Windowsの方ならMedia Playerという選択肢もあると思います。</p>

<p>TuneInのいいところとかそういうのは、各種レビューサイトでも見てもらえればと思いますが、ざっくり言うと、検索して出てくる放送局の数が結構多くていい感じっていうところでしょうか。</p>

<h2>趣味丸出し！ytnobodyが聴いてる放送局</h2>

<p>ここから先は僕の趣味をひけらかすところになっちゃいますけど、興味のある方はどうぞ読み進めてください。</p>

<h3>Rising Metal (ヘヴィメタル)</h3>

<p>常習性:★★★★  万人受け:★★ メタル魂:★★★★★</p>

<p><a href="http://www.rising-metal.com/">http://www.rising-metal.com/</a></p>

<p>メタルミュージックなら大体ここですね。ANTHRAX, Children Of Bodom, CARCASSというスラッシュメタル、デスメタルから、 SONATA ARCTICA, ANGRA, RHAPSODYといったスピメロ、シンフォニックメタルまで幅広くカヴァー。</p>

<p>メタルが好きなら、常用すること請け合いでしょう。</p>

<h3>Groove Salad (アンビエント/チル)</h3>

<p>常習性:★★★ 万人受け:★★★ シャレオツ感:★★★★</p>

<p><a href="http://somafm.com/groovesalad/">http://somafm.com/groovesalad/</a></p>

<p>SomaFMというネットラジオ曲の中のチャンネルの一つ。多分超有名どころ。</p>

<p>リズミカルかつ落ち着いた雰囲気のシャレオツな楽曲ばかり垂れ流しています。リラックスムードにはいいかも。</p>

<h3>[DI] Chiptunes (チップチューン)</h3>

<p>常習性:★★★★ 万人受け:★ 8bitっぷり:★★★★★</p>

<p><a href="http://www.di.fm/chiptunes">http://www.di.fm/chiptunes</a>(音に注意)</p>

<p>チップチューンというのを手っ取り早く説明するなら、ファミコンっぽい音源を中心に構成された楽曲のことですね。</p>

<p>もともと僕はYMCKという日本のチップチューンユニット(元々は違うはず)のファンなのですが、もっとチップチューンを聴きたい！というときには、ここをおすすめします。</p>

<p>ちなみに、ここの[DI]とは Digitally Imported というサイトの頭文字です。SomaFM同様、ここも色々なチャンネルを運営している様なので、気になる方はぜひ探検してみてはいかがでしょうか。</p>

<h3>Calm Radio - JS Bach (クラシック)</h3>

<p>常習性:★★★★★ 万人受け:★★★★ 覚醒機能:★</p>

<p><a href="http://tunein.com/radio/Calm-Radio---JS-Bach-s177684/">http://tunein.com/radio/Calm-Radio---JS-Bach-s177684/</a>(音に注意)</p>

<p>名前を見ての通り、かの偉大な作曲家である「バッハ」の曲ばかり垂れ流しています。</p>

<p>クラシックミュージックの中では、僕は特にショパンとバッハが大好きです（ただし詳しくない）。</p>

<p>ただし、眠い時に聴くと誘眠作用があるのか、とても眠くなる可能性も高いです。偉大過ぎる。</p>

<h3>Final Fantasy Radio (ゲームミュージック)</h3>

<p>常習性:★★★ 万人受け:★★★ エオルゼアへの憧れ:★</p>

<p><a href="http://finalfantasyradio.co/">http://finalfantasyradio.co/</a></p>

<p>なんとなくドメインが不穏な雰囲気ありますが、みんな大好き(?)FF関連の音楽ばかり垂れ流しているラジオ局です。</p>

<p>極まれに聴いたりしますが、ゲームミュージックが集中力に与える効果は絶大らしく、多分Hackとの相性は一番良いのではないでしょうか。</p>

<p>ただ、これを聴いてもエオルゼアにいきたいなぁ～とはならないです。</p>

<h2>最後に</h2>

<p>だばだばぁ～っと紹介していきましたが、今回は本当に技術とはまったく関係の無い話題でしたね！</p>

<p>さーて、次回のはちぴーアドベントカレンダーは、またしても大御所P氏こと<strong>papix</strong>さんが書いてくれるらしいですよ！お楽しみに！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-05:entry-2013-12-05-shoutcast.html</id>
<published>2013-12-05T10:10:44+0900</published>
<updated>2013-12-05T20:10:44+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜首都圏宿泊施設編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-01-travel01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜首都圏宿泊施設編〜</h1>

<p>というわけでスタートしてしまった｢Hachioji.pm Advent Calendar 2013｣の第1日目, 先陣はこの私, papixが切らせて頂きます!<br/>
...というか, これから先, 一緒にこのアドベントカレンダーを書いてくれる人がいなければ, 30日分(25日分)を全部自分が書かないといけない感じになってしまったので, 皆さん積極的に書いて行きましょう...!</p>

<p>以下, その経緯です.</p>

<p><img src="http://hachiojipm.github.io/static/image/hachioji-advent-2013.png" alt="適当〜" /></p>

<p>今回の教訓は, <strong>勢いで適当な事を言うと後で後悔する</strong>, ということですね!</p>

<h2>首都圏の格安宿泊施設</h2>

<p>首都圏含め, 地域PMに行く際の宿泊先として, まず候補に上がるのは知人の家でしょう.<br/>
家族, 親族, 友人などがその行き先に住んでいるならば, 交通費さえなんとかすれば宿泊費はほぼ0に抑えることができます.</p>

<p>ただ, 諸々の都合(例えば部屋が狭いとか, お子さん等々の家族がいるとか...)で泊めてもらうのが難しい場合も多々ありますし, そもそも行く先々に親族や友人が必ずいるとは限りません.<br/>
という訳で, 今回は首都圏, 特にPerl関連の会社が多数存在する山手線の西側エリア(新宿〜渋谷〜品川)近辺を中心とした, 格安宿泊施設情報をまとめてみました.</p>

<h2>漫画喫茶</h2>

<p>自分が知る限り, 山手線の西側にある駅の徒歩圏内でかなり安い漫画喫茶は, <a href="http://www.utahiro.com/store/storelist/storeinfo/tabid/64/pdid/0206/Default.aspx">｢カラNET24 新宿三丁目店｣</a>です.<br/>
新宿駅から靖国通りを東に向かって, 明治通りと重なる新宿五丁目交差点の角にある漫画喫茶です.<br/>
雨天時は, 新宿三丁目駅のE3, E4出口から明治通りを北に行けば, 地上の移動距離は最短になります.</p>

<p>このお店の料金プランはこんな感じです.</p>

<hr />

<table>
<thead>
<tr>
<th style="text-align:left;"> 時間   </th>
<th style="text-align:left;"> 料金  </th>
<th style="text-align:left;"> 備考                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 3時間  </td>
<td style="text-align:left;"> 580円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前680円  </td>
</tr>
<tr>
<td style="text-align:left;"> 8時間  </td>
<td style="text-align:left;"> 780円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前980円  </td>
</tr>
<tr>
<td style="text-align:left;"> 12時間 </td>
<td style="text-align:left;"> 980円 </td>
<td style="text-align:left;"> 24時間受付, PC席のみ金土日祝前1280円 </td>
</tr>
</tbody>
</table>


<hr />

<p>｢PC席のみ金土日祝全+200円｣となっていますが, この店舗でPC席を利用するメリットは0に近いです.<br/>
｢PC席｣とそうでない席の違いはPCが置いてあるか否かだけなので, どうせこのブログを読んでいるような人は常時ノートPCと, デザリング可能な機器 or WiFi/WiMAXルータを持っているでしょうから問題ありません, よね!<br/>
また, ｢PC席｣はもちろん, そうでない席も自由に利用可能なコンセントがあるので, ノートPCや携帯の充電の心配もありません.<br/>
更に更に, ｢PC席｣は都条例の問題で会員登録をして毎回会員証を提示する必要があるのですが, ｢PC席｣でない場合は会員登録も会員証の提示も必要ない... っぽいです.</p>

<p>複数プランを重ねたり(例えば, 8時間プラン+8時間パックで16時間, とか)できるので, 結構柔軟に滞在できますし, 各ブースに鍵が付いている(但し外側から閉じれない)ので, 盗難の心配も, 他店の鍵がないブースに比べれば低いです.</p>

<p>山手線西側エリアにある同系列の漫画喫茶としては, 他に渋谷の<a href="http://www.utahiro.com/store/storelist/storeinfo/tabid/64/pdid/0204/Default.aspx">｢カラNET24 渋谷道玄坂店｣</a>と池袋の｢まんが広場 北池袋店｣がありますが, 前者は1500円, 後者は12時間1180円で, 新宿三丁目店に比べるとやや値段が高いです.<br/>
が, ｢朝早くにヒカリエに行く｣などという場合, 新宿三丁目店に泊まると東京の朝ラッシュに巻き込まれる事になるので, 若干コストがかかりますが, 渋谷道玄坂店を使うという手も考慮する価値が出てくると思います.</p>

<p>余談ですが, 新宿三丁目店の近くには, <a href="http://www.koukaiya.co.jp/">｢航海屋｣</a>というラーメン屋の新宿店があります.<br/>
この店のチャーシューおこわがとてもとても美味なので, 是非行きましょう!<br/>
チャーシューおこわは2回おかわりできるので, 1杯目は普通に, 2杯目は辛い薬味を乗せて, 3杯目はつけ麺のスープと薬味でお茶漬け風にして頂くと, 最高です.</p>

<h2>ホテル</h2>

<p>ホテルは, 何となく<a href="http://travel.rakuten.co.jp/">｢楽天トラベル｣</a>で検索することが多いです. 割と格安なホテルも載っています.</p>

<p>｢山手線西側エリア｣からは外れますが, 入谷駅(上野駅からメトロ日比谷線で1駅)の近くにある, <a href="http://hotelink.co.jp/iriya/">｢入谷ステーションホテル｣</a>はかなり頻繁に利用していました.<br/>
このホテルには, ｢学生応援学割プラン｣があり, シングルなら曜日を問わず<a href="https://asp.hotel-story.ne.jp/ver3d/ASPP0200.asp?hidSELECTPLAN=29963&amp;hidSELECTCOD1=65830&amp;hidSELECTCOD2=001">2980円</a>, カプセルなら<a href="https://asp.hotel-story.ne.jp/ver3d/ASPP0200.asp?hidSELECTPLAN=29962&amp;hidSELECTCOD1=65830&amp;hidSELECTCOD2=001">1600円</a>で一泊することができます.</p>

<p>建物はそれほど綺麗ではありませんが, 鍵付きで, プライバシーのある空間(?)を確保したいのであれば, オススメです.</p>

<h2>カプセルホテル</h2>

<p>格安で泊まる手法としてはカプセルホテルもあります.<br/>
ただ, 広島のカプセルホテルの風呂で, 見知らぬオッサンに｢なあ, 兄ちゃん. サウナ行こうや...｣と誘われて身の危険を感じて以来, あまり行かなくなりました.<br/>
カプセルホテルはネットカフェに比べてお風呂が豪華なのですが, カプセルが小さくて圧迫感がある事, 何よりカプセル内にコンセントがない事が多いのも問題です.</p>

<p>ただ, 最近徐々に増えつつある｢キャビンタイプ｣と呼ばれるタイプ(<a href="http://rexinn.co.jp/capsule.html">こんなの</a>です)では, カプセル風の就寝スペースに加えて, 就寝スペースと同程度の個人スペースが用意されています.<br/>
個人スペースには, デスクとロッカーが置いてある場合が多いです. 更に言うまでもないですが, コンセントも用意されています.<br/>
ただ, カプセルホテル同様, 廊下などの共有スペースと個人スペースの区切りは間仕切り程度で鍵もないので, 盗難には気をつける必要があります.</p>

<h2>まとめ</h2>

<p>｢地域PM遠征を支える技術｣として, まずは｢東京都内の格安宿泊施設情報｣をまとめてみました.<br/>
先日告知された｢YAPC::Asia Tokyo 2014｣や, 就活や各種勉強会で都内に来られる際に参考にして頂ければと思います.</p>

<p>明日, 12月2日(月)は再びpapixで, ｢地域PM遠征を支える技術 〜関東関西移動編〜｣をお送りします. お楽しみに!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-02:entry-2013-12-01-travel01.html</id>
<published>2013-12-01T59:59:00+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜関東関西移動編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-02-travel02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜関東関西移動編〜</h1>

<p>というわけでHachioji.pm Advent Calendarの2日目です. 今日の担当はpapixです.</p>

<p>昨日は関東圏の格安宿泊施設情報をまとめてみましたが, 今日は関東と関西を移動する格安移動手段についてご紹介したいと思います.<br/>
関西の方が就活等で関東へ行く場合, あるいは逆に, 関東の方がKyoto.pmやKansai.pmといった関西地方の勉強会に格安で行きたい...! と思った時にご活用下さい.</p>

<h2>バス</h2>

<p>まず第一の候補は, ｢格安移動手段の王｣とも言える高速バス.<br/>
多少疲労が貯まりますが(最近無茶ができなくなったので, 結構疲れが残る事が多いです...), 高速夜行バスを利用すれば｢寝ている時間｣に移動できるので, それなりに時間を有効活用することができます.<br/>
高速昼行バスは高速夜行バスに比べ便数が少ない上, 値段も若干高いですが, 日中に移動する方がスケジュール的に都合がいい場合は考慮に入れると良いでしょう.</p>

<p>さて, 関西と関東を結ぶ高速バスは多くの会社が運転していますが, 基本的にはJRバスを利用しておけばいいのでは? と思っています.<br/>
JRの高速バスは, <a href="https://www.kousokubus.net/PC/index.aspx">｢高速バスネット｣</a>から予約することができます.</p>

<p>JRバスの魅力は, 何といってもバスの便数. 加えて, コストパフォーマンスの良さも見逃せません.<br/>
バスの出発時間は21時代から23時代まで, 到着時間では6時代から8時代まで, スケジュールに合わせてバスを選ぶことができます.</p>

<p>また, 座席数制限がありますが, 5日前までに予約をすれば料金が割引になる｢早売5｣制度が準備されている点も魅力です.<br/>
この制度を利用すれば, 4列シートなら3500円(閑散期)〜4000円(繁忙期), 3列シートならプランにもよりますが, 6000円(閑散期)〜8000円(繁忙期)で乗車することができます.<br/>
加えて, 乗車回数による割引も実施していて, プランや乗車時期にかかわらず, 関西と関東を結ぶバスに1回乗車するごとに50円, 最大で500円(10回乗車した場合)の割引が適用されます.</p>

<p>次点は, かつて高速ツアーバスの雄だった<a href="http://travel.willer.co.jp/">Willer Express</a>.<br/>
現在は, 関越道の事故をきっかけに制定された, 新しい高速乗合バスの運行制度に則って運行しているようです.<br/>
料金はJRバスとほぼ同額か, やや高い程度ですが, シートの綺麗さには定評があります.<br/>
...というか, 後述しますが, JRバスのシートが若干酷い, という感じです.</p>

<p>ウィラーを利用する場合の注意点は, 大阪梅田のバス停が大阪駅から微妙に遠い, という点.<br/>
JRバスは大阪駅にあるバスターミナルから出発します(JR大阪駅の改札から5分, 阪急や阪神, 地下鉄の改札からなら10分もあれば確実に到着します)が, ウィラーは梅田スカイビルにある｢ウィラーバスターミナル大阪梅田｣もしくは｢プラザモータープール｣から出発します.<br/>
どちらも大阪駅から10分〜15分程度歩く必要があるので, 大阪駅到着時間によってはバスの出発時間に間に合わない, という事もあり得ます.</p>

<p>あとは｢ウィラーバスターミナル大阪梅田｣と｢プラザモータープール｣を間違えるという罠もあります.<br/>
これらの2施設と大阪駅は三角形のような配置になっているので, 交互に移動するのも10分〜20分くらいは必要になります.<br/>
先日それでバスを乗り損ねてしまい, ひとまず梅田のネカフェで一泊して, 翌朝新幹線で東京に移動するという失態を繰り広げてしまいました.<br/>
高速バスに乗る際は, バスの出発時間と乗車するバス停の場所, そしてバス停までの移動手段とルートはしっかり確認しておきましょう!</p>

<h3>バスの座席</h3>

<p>バスのシートは, 大まかに分けると｢4列｣と｢3列｣に別けられます.<br/>
ウィラーはコクーンと呼ばれる2列シートのバスを運転していますが, 片道1万円近くするので乗ったことがありません.</p>

<p>若い間は4列シートでも耐えられます(耐えられました)が, それなりの歳になると4列シートの環境は耐えられなくなります.<br/>
4列シートは前後左右のスペースが狭い上, 隣の人の影響をモロに受ける(意識せざるを得ない)ので, ハズレを引くと非常に辛いです.<br/>
...特にJRバスの4列シートは｢家畜運搬車｣です. JRの高速バスの場合, 夜行バスは基本的に全てダブルデッカー(2階建てバス)で運転している為, 前後左右だけでなく, 上下も狭い! という圧迫空間で寝ることになります.<br/>
座席もそれほど倒れませんし, 前日徹夜して疲れを貯めておくという禁じ手を使わない限り, 快眠は難しいです(まあ, 前日徹夜して疲れを貯めてからの睡眠が快眠になるのか? というのはいろいろ意見がありそうですが).</p>

<p>...ただ, 平日出発･平日到着の閑散期の場合, 隣の席が空いている可能性がかなり高くなるので, そうなれば隣を意識することなく, 格安でバスを利用することができます.<br/>
特に高速バスネットの場合, バスの座席を指定して予約することができるので, これを狙う事も難しくはありません.<br/>
問題としては, 何故か高速バスネットの座席指定システムが, インターネットエクスプローラーでしか動作しないという点です. <strong>致命的じゃねーか!!!</strong><br/>
UbuntuのChrome/Firefoxはもちろん, WindowsのChrome/Firefoxでも動きませんでした(座席を選択できない). つ, つら...</p>

<p>一方3列シートですが, バスによっては2列+1列のようになっているものがあります(JRの高速バスの場合, ドリーム号等の1階席はそうなっている場合があります)が, それでも4列シートよりは左右の間隔が広いので気持ちはかなり楽です.<br/>
｢3列独立シート｣の場合, ｢1列+1列+1列｣になることが保障されているので, より精神的には楽になります(前述のドリーム号でも, 2階席は1列+通路+1列+隙間+1列, という配置になっているようです).</p>

<p>JRバスの場合, 4列シート(4列)以外では｢3列｣, ｢S席｣, ｢P席｣を選ぶことができます.<br/>
3列は いわゆる｢左右にスペースがある4列シート座席｣程度ですが, S席になると座席をかなり倒すことができますし, 座席も左右に広い上, カーテンで隣と空間を区切ることができるのでかなり快適になります.<br/>
S席は, 2列シートでP席よりもいいらしいんですが, 流石に乗ったことがないのでわかりません...</p>

<p>まとめとしては, ｢ちょっと関西と関東を格安で移動してみたいなー｣と軽い気持ちで思い立ったような時は, 悪い事は言わないので値段を犠牲にして3列シートを予約しましょう.<br/>
｢どうしても関西と関東を移動する必要があるのに所持金が少なすぎる! ヤバイ!｣というように, ｢節約｣の覚悟ができているのであれば, 4列シートでも大丈夫と思います.</p>

<h3>高速バスのルート</h3>

<p>関西と関東を結ぶ高速バスのルートは, 大きく分けると新名神･東名高速を経由するルートと, 名神･中央道を経由するルートがあります.<br/>
JRバスの場合, 中央道を経由するバスは便名に｢中央｣が入るので区別することができます(例: 青春中央エコドリーム号).<br/>
所要時間は中央道経由の方が若干長い(東京駅･大阪駅間の場合, 新名神･東名ルートが約7〜8時間, 中央道経由ルートが約8〜9時間, 但し京都駅を経由する場合は更に伸びる)ですが, 南武線･中央線を経由して八王子に移動しやすい南武線JR谷保駅に止まるので, 関西からHachioji.pmに行く場合は中央道経由の方が都合がいい場合もあります.</p>

<p>より八王子に近い｢中央道八王子バス停｣にも停車しますが, 西八王子駅から徒歩数十分の距離にありますので, あまりオススメはしません.</p>

<h2>鉄道</h2>

<p>お次は鉄道. まずは王道の新幹線ですね.<br/>
のぞみ号を利用すれば約2時間半で関西と関東を移動することができます.<br/>
料金は片道約13000円ですが, 学割を利用するか, 金券ショップで回数券を買えば片道約12000円程度にまで抑えることができます.<br/>
だいたい, 夜行バスの2〜3倍と思えば良さそうです.</p>

<p>新幹線の場合, <a href="http://www.jrtours.co.jp/kodama/">｢ぷらっとこだま｣</a>を利用すれば, 新大阪から品川･東京まで1万円ポッキリまで抑えることができます.<br/>
...が, 乗車できるのがこだま号に制限される(約3時間半)上, 前日までに予約する必要がありますので使い所は難しい(ぷらっとこだまに乗るくらいなら, 2000円〜3000円を自己負担してのぞみに乗るか, 夜行バスでの移動を選ぶ)です.</p>

<p>お次は新幹線を使わない鈍行ルート.<br/>
<a href="http://ja.wikipedia.org/wiki/%E9%9D%92%E6%98%A518%E3%81%8D%E3%81%A3%E3%81%B7">｢青春18きっぷ｣</a>を利用すれば, 利用期間の制限はあるものの, コストパフォーマンスは最高です.<br/>
なんてったって, 青春18きっぷを使えば, 1日2300円で全てのJR路線の普通列車, 快速列車の普通車自由席に乗車することができるので, 関西と関東の間を2300円で移動できるんですから!</p>

<p>...ただ, 頻繁に乗り換える必要がありますし, 片道9時間〜10時間は必要になる為, 1日潰す事になってしまうので, 基本的に鈍行を利用するのは旅好き, もしくはマゾの所業と思ってよいです.<br/>
但し, 後述しますが青春18きっぷは途中下車も自由なので, 名古屋や浜松, 熱海あたりで途中下車して, 観光したり, 食事したり... というのもできますので, 人生に一度くらいはやってみてもいいのでは? と思ったりしています.<br/>
｢青春18きっぷ｣については, ｢地域PM遠征を支える技術｣でも頻繁に出てくると思うので, 12月4日あたりのHachioji.pm Advent Calendarで詳しく解説したいと思います.</p>

<p>前述の通り, 青春18きっぷを利用して関東から関西に行く場合, 9時間〜10時間は必要になります.<br/>
平日に東京駅を始発で出た場合のルートは8時間13分で, 次のようなルートになります.</p>

<p>東京 04:42 -> 04:52 品川 05:10 -> 06:21 小田原 06:22 -> 06:45 熱海 06:49 -> 09:19 浜松 09:23 -> 09:56 豊橋 10:03 -> 11:31 大垣 11:42 -> 12:17 米原 12:20 -> 13:43 大阪</p>

<p>一方, 大阪駅から東京駅へ移動する場合は9時間4分必要で, 次のようなルートになります.</p>

<p>大阪 05:00 -> 05:45 京都 05:49 -> 06:56 米原 07:07 -> 10:06 浜松 10:10 -> 11:21 静岡 11:53 -> 13:07 熱海 13:17 -> 15:05 東京</p>

<p>なお, <a href="http://www.jorudan.co.jp/">ジョルダン</a>では, 青春18きっぷで乗車出来る列車のみを利用した乗換案内を検索できるので, 青春18きっぷで移動するプランを立てる場合は積極的に活用してみるとよいでしょう.</p>

<p>注意点としては, 豊橋〜熱海間は基本的に各駅停車しか運転されておらず, 車両数も時間帯にもよりますが3両〜4両と1編成が短いという点.<br/>
豊橋までは6〜8両, 熱海までは10〜15両に乗っている乗客が3〜4両の列車に集中することになるので, 青春18きっぷ真っ盛りの時期(例えばコミケ前後)になると, 豊橋から熱海まで立ちっぱなし, という事も十分あり得ます.</p>

<p>...それでもなお, 2300円というコストパフォーマンスは圧倒的(閑散期4列夜行バスよりも安い!)なので, ｢1円でもいいから節約したい!｣という場合は, 考慮に入れる余地があると思います.</p>

<p>最後に, 大阪から東京に行く場合のみ利用できるルートではあるのですが, ｢寝台特急｣を利用する... というルートがあります.<br/>
｢会社や大学から交通費が出るけど, 朝早くに東京に着かなければならない. 高速バスは遅延が怖いし, 新幹線は朝早く起きる必要があって寝坊すると怖いし...｣という場合にオススメです.</p>

<p>東京と, 出雲市駅･高松駅を結ぶ寝台特急｢サンライズ瀬戸･出雲｣という寝台特急があるのですが, この特急は東京行きに限り大阪駅にも停車します(出雲市･高松駅行きは, 関西圏最初の停車駅が姫路駅になります).<br/>
この列車が横浜駅に到着する時間は6時44分, 東京駅に到着する時間は7時8分なので, 新幹線の始発に乗るよりも2時間ほど早く東京に到着することができます.</p>

<p>通常, 寝台特急は乗車券, 特急券の他に寝台券が必要になる為コストパフォーマンスは悪いのですが, この列車に限っては｢ノビノビ座席｣と呼ばれるシートが2両用意されており, このシートに限っては乗車券と特急券のみ(約12000円, 学割適用で約11000円)で利用することができます.<br/>
バスに比べると振動, 騒音も少なく(ノビノビ座席のある車両はモーターなどが搭載されている電動車で, 比較的煩いはずなのですが, それでもバスよりはマシのように感じました), 鉄道なのでダイヤも比較的安定しているのでオススメです.<br/>
以前, YAPC::Asia 2012に参加する際に利用した時は, 大阪駅を30分遅れで出発したにも関わらず, 東京駅には定時で到着していました.</p>

<h2>飛行機</h2>

<p>関西と関東を移動するのであれば, 飛行機の利用はあまりおすすめしません.<br/>
飛行機のみの移動時間を見れば新幹線よりも早いですが, 羽田空港がある関東側はともかく, 関西側は伊丹空港, 関西国際空港と都心部から離れた空港ばかりなので, 空港まで移動する時間とコストが必要になります.<br/>
空港から都心部までの移動コストを考えると, 料金面も新幹線と遜色ないレベルになるので, 駅を降りればすぐJRで目的地に移動できる新幹線の方が使い勝手はいいと思います.</p>

<h2>まとめ</h2>

<p>関西と関東を移動する際の移動手段について, 簡単ではありますがまとめてみました.<br/>
移動手段は時間, 料金, スケジュールを考えて, 最適なものを選ぶのが大事なので, その助けになれば嬉しいです.</p>

<p>明日は... 明日もpapixの担当日となっておりますので, 謹んで記事を書かせて頂きます.<br/>
明日のテーマですが, 12月28日に<a href="http://atnd.org/events/45823">Hokkaido.pm #28</a>が開催されるので, 関東と北海道の格安移動手段について紹介したいと思います.<br/>
王道というか, 普通は十中八九飛行機を使うと思うのですが, それ以外にも面白いルートがあるんだよ! と感じて頂けるようにかんばります.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-03:entry-2013-12-02-travel02.html</id>
<published>2013-12-02T59:59:00+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">地域PM遠征を支える技術 〜北海道/鉄道編〜</title>
<link href="http://hachiojipm.github.io/entry/2013-12-03-travel03.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>地域PM遠征を支える技術 〜北海道/鉄道編〜</h1>

<p>ぱんぱかぱ〜ん! (挨拶) Hachioji.pm Advent Calendar, はっじまっるよー!<br/>
というわけで今日の担当もpapixです. 3日連続です. そろそろネタ切れそうです.</p>

<p>今日は昨日予告しました通り, 北海道への格安移動手段を紹介したいと思います.<br/>
道外から北海道への移動手段は, とりあえず飛行機が王道です. ...が, 年末年始や夏のような繁忙期で値段がとても高くなりますし, 最近流行りのLLCは安いものの, 予定変更が難しかったり, 運休時の対応や機材に心配が... と若干の不安が残ります.</p>

<p>そこで今回は, 道外から北海道への航空機以外の格安移動手段についてまとめてみることにしました.<br/>
小出しにネタを出して行かないと途中でネタが切れそうなので, 今回は鉄道を利用したルートについて紹介する｢北海道/鉄道編｣と, フェリーを利用したルートについて紹介する｢北海道/フェリー編｣に分けたいと思います.</p>

<p>｢年末年始, 帰省で北海道に戻ってるけど, 飛行機そろそろ飽きたな...｣という方, 是非参考にしてみて下さい.</p>

<p>...さて, 関東から北海道へ行く場合は, 昨日紹介した<a href="http://ja.wikipedia.org/wiki/%E9%9D%92%E6%98%A518%E3%81%8D%E3%81%A3%E3%81%B7">｢青春18きっぷ｣</a>に加え, <a href="http://ja.wikipedia.org/wiki/%E5%8C%97%E6%B5%B7%E9%81%93%26%E6%9D%B1%E6%97%A5%E6%9C%AC%E3%83%91%E3%82%B9">北海道&amp;東日本パス</a>を利用することができます.</p>

<p>北海道&amp;東日本パスと青春18きっぷの違いは, ざっくり説明すると...</p>

<hr />

<table>
<thead>
<tr>
<th style="text-align:left;">                  </th>
<th style="text-align:left;"> 青春18きっぷ </th>
<th style="text-align:left;"> 北海道&amp;東日本パス                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 価格             </td>
<td style="text-align:left;"> 11500円      </td>
<td style="text-align:left;"> 10000円                                                          </td>
</tr>
<tr>
<td style="text-align:left;"> 利用期間         </td>
<td style="text-align:left;"> 任意の5日間  </td>
<td style="text-align:left;"> 連続した7日間                                                    </td>
</tr>
<tr>
<td style="text-align:left;"> 乗車可能エリア   </td>
<td style="text-align:left;"> 全JR路線     </td>
<td style="text-align:left;"> JR北海道/JR東日本/青い森鉄道/IGRいわて銀河鉄道/北越急行/富士急行 </td>
</tr>
</tbody>
</table>


<hr />

<p>...となっています.<br/>
これらの切符の違いについては, 近日中に｢地域PM遠征を支える技術 〜切符編〜｣で紹介したいと思います.</p>

<p>さて, 東京から, 鉄道のみかつ低コストかつ宿泊施設の利用なし(車内泊はあり)で北海道に行く場合, 青森から北海道までのルートは青森駅を22:42に出発し, 札幌には翌朝06:07に到着する寝台急行｢はまなす｣になります.<br/>
はまなすは寝台車の他, 自由席, 指定席, ドリームカー(グリーン席相当の指定席), のびのびカーペットカー(サンライズ瀬戸･出雲のノビノビ座席のようなもの)があります.<br/>
青春18きっぷでは急行列車には乗車できないのですが, 北海道&amp;東日本パスは急行券を別途購入すれば, 乗車可能エリア内の急行列車に乗車することができるので, はまなすも乗車できるのです.</p>

<p>はまなすは通常7両で運転していますが, 年末年始などの繁忙期はB寝台を1両増備することがあります.<br/>
それでも指定席(ドリームカー)はほぼ満席になっていたので(昨年末にHokkaido.pmに参加した際に利用しました), はまなすを利用するのであれば, 事前に指定席を予約しておくことをおすすめします.</p>

<p>さて, 青森から札幌までのルートは決まりました. 残るは札幌までのルートです.<br/>
北海道&amp;東日本パスを利用するのであれば, 東京からのルートは2つあります. 1つは日本海側を通って行くルート, もう1つは太平洋側を通って行くルートです.<br/>
青森までは青春18きっぷで, そこから先は北海道&amp;東日本パスを利用するのであれば, 太平洋側のルートは途中青春18きっぷで乗車できない青い森鉄道とIGRいわて銀河鉄道を経由する必要があるので, 選択肢は日本海側ルートのみになります.</p>

<h2>日本海ルート</h2>

<p>日本海ルートを利用するのであれば, 青春18きっぷや北海道&amp;東日本パスが利用可能な時期の一部日程で運転される臨時夜行快速｢ムーンライトえちご｣の利用が必要になります.<br/>
ムーンライトえちごは新宿駅を23:10に出発し, 新潟駅には04:51に到着します</p>

<p>後は羽越本線･奥羽本線を北上するだけです. 具体的には...</p>

<p>新潟 06:08 -> 06:46 新発田 06:49 -> 09:30 酒田 09:38 -> 11:30 秋田 13:35 -> 15:24 大館 15:55 -> 16:37 弘前 16:42 -> 17:33 青森</p>

<p>が, 最短ルートです.<br/>
日中のスケジュールに余裕がありますので, 途中酒田や秋田, 青森で観光したりできますし, 秋田から青森までを, 五能線経由の｢リゾートしらかみ｣を利用するという手もあります. <br/>
この場合, 秋田駅を14:10駅発のリゾートしらかみ5号に乗車し, 青森駅には19:20に到着します.<br/>
リゾートしらかみは, いわゆる｢ジョイフルトレイン｣と呼ばれる種類の観光用の快速列車ですが, 全席指定の快速列車なので, 指定席券を用意すれば青春18きっぷや北海道&amp;東日本パスでも利用できます.</p>

<p>年末年始などの繁忙期は, このような｢指定席券を用意すれば青春18きっぷや北海道&amp;東日本パスでも乗れる臨時快速｣が多く運転されているので, 快適な車両を狙って積極的に使ってみるといいでしょう.</p>

<p>日本海側ルートでは, 他に新潟駅と酒田駅･象潟駅を結ぶ｢きらきらうえつ｣があります.<br/>
車内で地酒が飲めたりとサービス抜群にも関わらず, 臨時快速列車なので指定席券のみで乗車可能で, しかもダイヤは特急並ということで, かなり使い得の列車になっています.</p>

<h2>太平洋ルート</h2>

<p>太平洋ルートは, 日本海側ルートと異なり, 朝出発して夜に青森に着く... というルートです.</p>

<p>東京 07:45 -> 07:52 上野 07:57 -> 09:27 宇都宮 09:34 -> 10:25 黒磯 10:33 -> 11:37 郡山 11:56 -> 12:3 福島 13:00 -> 14:13 仙台 14:45 -> 16:23 一ノ関 16:28 -> 18:00 盛岡 18:15 -> 19:41 三戸 19:51 -> 21:48 青森</p>

<p>青森駅からはまなすを利用するのであれば, これが東京駅発の終電になります.<br/>
途中, 最長の待ち時間が14:13〜14:45の仙台(32分)のみなので, 結構過酷なルートです.<br/>
予め, 出発前に飲み物や昼食, おやつなどを買っておく必要がありそうです.</p>

<p>また, 日本海ルートも同様ですが, 青春18きっぷや北海道&amp;東日本パスでは, 遅延した場合の保障は基本的にない(悪天候で列車が運転できなくなった場合のバス代行は利用できるようですが...)ので, 終電1本前に乗って余裕を持っておく(太平洋ルートの場合, 終電の1本前は東京駅を06:49発で青森に20:48着になります)とか, 途中特急･新幹線に乗車できるように財布と旅費に余裕を持っておくなどの備えが必要になります.</p>

<h2>青森駅での時間潰し</h2>

<p>いずれのルートも, はまなすの出発時刻まで, 青森駅でそれなりの時間を待つ必要が出てきます.<br/>
時間潰しのオススメは, 青森駅から徒歩5分〜10分程度の位置にある<a href="http://www12.ocn.ne.jp/~machinak/">｢青森まちなか温泉｣</a>. <br/>
入浴料は大人420円, バスタオルを借りても+200円の620円で, 休憩室もあるので, 旅の疲れをしっかり癒すことができます.</p>

<h1>まとめ</h1>

<p>というわけで, 鉄道を使って東京から北海道まで, 格安で移動するルートについてまとめてみました.<br/>
今回紹介したテクニック(?)は, あと2〜3年程度で使えなくなります. というのも, 北海道新幹線が開業すると, 青函トンネルを通る全ての寝台列車(はまなすの他, トワイライトエクスプレスや北斗星, カシオペアなど)が廃止になる予定だからです.</p>

<p>新幹線開業時にどうなるかわかりませんが, 青春18きっぷや北海道&amp;東日本パスの特例で, 新青森〜新函館間の新幹線自由席が乗車可能となり, かつはまなすが函館駅〜札幌駅間のみの運転になる... という形になれば, このテクニックを多少改変すれば適用可能になるかもしれません.<br/>
このテクニックが使えなくなった場合, 格安で北海道に行くルートは, LLCを利用するか, フェリーを利用するか... の二択になってくるのではないかと思います.</p>

<p>さて, 明日は, 最近研究室からMac Book Airを支給されてウキウキの@bool_foolくんが担当する予定... というか担当してもらえるようにお願いするつもりですが, <strong>｢papixパイセン酷い! パワハラだ! 指導教員に訴えてやる!!!｣</strong>とゴネた場合は仕方がないのでpapixが担当する事になります.<br/>
その場合は, ｢地域PM遠征を支える技術 〜北海道/フェリー編〜｣をお送りするつもりです.</p>

<p>...お楽しみに!?</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-03:entry-2013-12-03-travel03.html</id>
<published>2013-12-03T23:23:20+0900</published>
<updated>2013-12-03T12:28:15+09:00</updated>
</entry>
<entry>
<title type="text">Time::PieceのParseで%zを使うのは無理ゲー</title>
<link href="http://hachiojipm.github.io/entry/2013-12-07-time-piece-trap.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Time::PieceのParseで%zを使うのは無理ゲー</h1>

<p>「タイムゾーンマタギはおいておいて、そうでないケースにおいて、Date::Timeはオワコンで、Time::Pieceが主流」的なノリになってからだいぶ長いですが、最近やっとTime::Pieceを使い始めたのですが、メールのヘッダーのDateのところをぴっぱろうとしたらはまったんで、そのあたりをまとめておきます。あまり、直接的なタイトルの日本語記事がなかったので。</p>

<h2>ダメのコード</h2>

<p>さて、問題となる具体的なコードは以下です。</p>

<pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Time::Piece;

{
    my $datetime = "Thu, 28 Nov 2013 18:32:29 +0900 (JST)";
    my $t = localtime(Time::Piece-&gt;strptime($datetime,'%a, %d %h %Y %H:%M:%S %z (%Z)'));
    warn $t-&gt;datetime; # 2013-11-28T09:32:29
}

{
    my $datetime = "Thu, 28 Nov 2013 18:32:29";
    my $t = localtime(Time::Piece-&gt;strptime($datetime,'%a, %d %h %Y %H:%M:%S'));
    warn $t-&gt;datetime; # 2013-11-28T18:32:29
}
</code></pre>

<p><a href="http://www2u.biglobe.ne.jp/MAS/perl/waza/strftime.html">日付の書式指定</a>にあるように、日付をいろいろパースするときの記号はいろいろあるわけですが、「%z」という「+0900」という「タイムゾーンのGMTへのオフセット時間」ってやつが、Time::Pieceでうまくいかないのはご存知でしょうか。</p>

<p>下の方ではしっかりパースできるのに、上の「+0900 (JST)」のコードのほうが、見事に9時間ズレてしまっています。</p>

<h2>既存文献と対応方法</h2>

<p>重要な問題だからこそでしょうが<a href="http://blog.64p.org/entry/2013/03/01/112510">Time::Piece::strftime and time zone issue</a>という英語の記事でtokuhiromさんが、問題と対応方法を書いているんですが、なんかややっこしいので、どうしたものかと思ったら、sonmguさんが、<a href="http://search.cpan.org/~gaas/HTTP-Date-6.02/lib/HTTP/Date.pm">HTTP::Date</a>を使うのがいいかもねって教えてもらったので、ぼくはそうしました。</p>

<pre><code>use HTTP::Date;

my $datetime = "Thu, 28 Nov 2013 18:32:29 +0900 (JST)";
my $t = localtime(HTTP::Date::str2time(HTTP::Date::parse_date($datetime)));
warn $t-&gt;datetime; # 2013-11-28T18:32:29 
</code></pre>

<p>まぁ便利でわかりやすい。Date::Time使うのとCPUとかメモリのコストがどれほど違うのかよくわかりませんが、わかりやすさ間違いないでしょう。毎度、sonmgu++という感じでいつか恩返ししなきゃいけないところです。</p>

<h2>終わりに</h2>

<p>日付周りのモジュールは何が何だったかすっかり忘れてことが多いので、しっかりメモっておきたい今日この頃です。</p>

<p>こういう軽いTipsをこちこちやっていきたいところです。年末はたくさんアドベントカレンダーあるんで、ちょっと胃もたれがちですからねー。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-12-02:entry-2013-12-07-time-piece-trap.html</id>
<published>2013-12-02T56:56:49+0900</published>
<updated>2013-12-02T05:56:49+09:00</updated>
</entry>
<entry>
<title type="text">Fukuoka.pmに乱入してきた!</title>
<link href="http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Fukuoka.pmに乱入してきた!</h1>

<p>皆さんこんにちは, 提督業と修論業で慌ただしい日々を送っている｢地域PMエバンジェリスト(自称)｣ことpapixです.<br/>
最近は駆逐艦の良さがわかってきた気がしています. ...あ, そういう意味ではないですヨ?</p>

<p>...さて今日は, 紆余曲折を経て10月26日(土)に開催された｢Fukuoka.pm #24｣に行ってきたので, その感想レポートをお送りしたいと思います.</p>

<h2>スポンサー紹介</h2>

<p>今回, Fukuoka.pmへ参加するにあたり, 往路の交通費を以下の方々にスポンサードして頂きました.<br/>
この場をお借りして御礼申し上げます. 本当にありがとうございました!</p>

<ul>
<li><a href="https://twitter.com/yusukebe">@yusukebe</a>さん</li>
<li><a href="https://twitter.com/uzulla">@uzulla</a>さん</li>
<li><a href="https://twitter.com/xtetsuji">@xtetsuji</a>さん</li>
</ul>


<h2>Fukuoka.pm #24</h2>

<p>Fukuoka.pmの雰囲気等々についてはゆーすけべーさんの感想ブログ記事, ｢<a href="http://yusuke.be/post/65193797413">福岡のPerl Workshop「Fukuoka.pm#24」に行ってきました！</a>｣がよくまとまっているので, こちらを読めばいいのではないでしょうか.</p>

<p>ゆーすけべーさんもブログ記事で書いていますが, 参加人数が少ない分(ATNDの参加申し込み人数で14人), 発表者と参加者の距離が近いので, 参加者の反応を感じやすかったですし, 質疑応答やツッコミといったコミュニケーションが生まれやすい雰囲気が出来ていたので, とても良かったです.</p>

<h2>トーク</h2>

<p>今回のスピーカーは, JPAの講師派遣制度で来ていたゆーすけべーさん, 東京から参戦のcharsbarさん, Fukuoka.pmのヒラタさん(<a href="https://twitter.com/debility">@debility</a>), そして私の4人でした.</p>

<p>ゆーすけべーさんのトークは, 最近チャレンジしているボケての構造化について.
ざっくりまとめると, ｢フロントエンド(テンプレートエンジンとかを使って, 実際にブラウザに表示する部分を担う)｣と, ｢APIフレームワーク(フロントエンドのAPIリクエストに応じて, DBにアクセスしたりして, 適切な(フロントエンドで表示したい)データを返す)｣の2つに分離して, 分業化するというアイデアを実践している... という話でした.</p>

<p>社内プロダクトならともかく, ボケてのような社の垣根を越えた少人数のチームで開発している場合, このように(開発者の/Webサービスの)役割を明確に区切る, というアプローチは有効そうな気がします.<br/>
今後, この方針がどのように進展していくかが, とても気になる発表でした!</p>

<p>charsbarさんは, CPANTSやCPANモジュールのKwalitee, MinilやMinillaを使ったモジュール開発等々についてのお話でした.<br/>
何故か自分がKwaliteeランキングで10位に入っていましたが, あれは｢よしKwaliteeランキングで上位に入ってやろう!｣と思って頑張った訳ではなくて, モジュール開発の為に漬かっているMinillaがよしなにやってくれただけだと思います.
そういう意味を含めて, Minillaはとても便利なツールなので, これからモジュールを作る! という方はMinillaを採用することをおすすめしますし, 既存モジュールも, 積極的にMinillaに切り替えていく価値があると思っています.</p>

<p>ヒラタさんの発表は, 社内の余興で某クイズ番組をPHPやNodeを駆使して再現した, というお話.
弊社も割とそういう空気がありますが, ああいう余興(?)に全力を尽くせるノリっていいなあ... と感じました.
というか, あのシステムはすごい出来が良いので, 某局とコラボするとか, ロゴ等々のマズい部分をなんとかしてOSSのような形で公開したりとか, そういう展開があってもいいですよね. 今後どうなるか期待です.</p>

<h2>自分のトーク</h2>

<p>で, 自分ですが｢GPGPUとXSとわたし｣というタイトルで, PerlにおけるGPGPUの現状と, XSについての話をして来ました.<br/>
資料はこちらです(後でアップします...)</p>

<p>前半は割と学術っぽいネタで, 後半はXSという人を選ぶ中級者向けなネタだったので, ビギナーな方には｢あー, こういう世界があるんだなー｣というのを感じて頂けるように努力... したつもりなんですが如何でしたでしょうか.<br/>
人を選ぶネタなので, お昼寝兼内職タイムになっちゃうのでは? と懸念していたのですが, 予想以上に興味津々な感じで聞いて頂けましたし, 質問もいくつか飛んできたので非常に嬉しかったです.</p>

<p>あと, PerCUDAの成果として完成した｢PerCUDA::Backend::GPU｣ですが, これ普通にPerlからPTXをデバイスAPIを使って呼び出すツールとして使える気がするので, ｢CUDA::DeviceAPI｣みたいな名前で独立したモジュールとして公開してもいいんじゃないかなー, と思ったりしました.<br/>
人柱よろしくです! (To GPGPUで研究をしている八王子在住のPerl Monger)</p>

<h2>福岡最高!</h2>

<p>常日頃から言っていますが, 福岡は自分にとって最高の都市の1つです.<br/>
まず都市の規模が程よくコンパクトで, 移動がとても楽. 東京で言えば新宿と渋谷と銀座が徒歩圏内にある, みたいなイメージでしょうか.
あと空港から中心部までの距離が異常に近いのも良いですね. 博多駅から福岡空港まで, 地下鉄で2駅ですし.</p>

<p>あと食いしん坊バンザイな自分やゆーすけべーさんからすると, 屋台だったり居酒屋だったり, 飲食店のレベルが高いのも高印象でした. 要するに, 適当な店に行っても大抵メシがウマイ.
そして焼酎がとても安いですね! 黒霧島とか, 多分大阪や東京の100〜200円引きくらいの値段で飲めます.</p>

<p>そしてあれです. Fukuoka.pmとかに行くと, 地元の方が自信を持っておすすめするお店とかに行く事になるので, まあマズいはずがないですよね, ええ.</p>

<p><img src="http://hachiojipm.github.io/static/image/nabe.jpg" alt="モツ鍋" /></p>

<p>こちらのモツ鍋は, Fukuoka.pmの懇親会(1次回)で行ったモツ鍋屋のモツ.<br/>
ちなみにこの後, 2次会でラーソーメンを食べ, 3次会で屋台に行って鶏の炭火焼や餃子を食べたりしてました.<br/>
最終的な解散時間は午前1時...! そして地元の方はずっとビールなり焼酎なりを飲み続けていました. お酒に強すぎィ!</p>

<p><img src="http://hachiojipm.github.io/static/image/mentaiko.jpg" alt="明太子御飯" /></p>

<p>こちらの明太子御飯は, Fukuoka.pmの翌日(つまり今日), ｢ここ超よさそうじゃね!?｣とゆーすけべーさんが見つけたお店で食べたもの.<br/>
多分, これ東京で食べたら間違いなく1.5〜2倍くらいの値段がするんじゃないかなあ...</p>

<h2>さいごに</h2>

<p>Fukuoka.pm最高! 呼ばれなくてもまた来ますし, 呼ばれたら絶対に行きます!!!<br/>
ちなみに次のFukuoka.pmには<a href="http://yancha.hachiojipm.org/quot?id=168623,168617">｢ツールチェインギャング見習い｣として有名なmoznion氏も参加</a>するみたいなので, とても楽しみですね!</p>

<p>Fukuoka.pm #24に参加された皆様, そして交通費をスポンサードして頂いたゆーすけべーさん, uzullaさん, てつじさん, 本当に本当に, ありがとうございました!</p>

<center>Fukuoka.pm最高〜〜〜〜〜〜〜〜〜〜〜ッ!!!!!</center>



]]></content>
<id>tag:hachiojipm.github.io,2013-10-27:entry-2013-10-27-fukuokapm.html</id>
<published>2013-10-27T22:22:55+0900</published>
<updated>2013-11-04T18:02:29+09:00</updated>
</entry>
<entry>
<title type="text">CUDA::DeviceAPIでPerlからお手軽GPGPUライフ!</title>
<link href="http://hachiojipm.github.io/entry/2013-11-04-cuda-device-api.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>CUDA::DeviceAPIでPerlからお手軽GPGPUライフ!</h1>

<p>おはようございます. 三連休で生活リズムが崩れに崩れ, 朝6時に寝て昼15時に起きるという生活をしているpapixです.<br/>
今日は, 艦これのイベントのE-5で詰んでしまったので, 修論の一環で作成した拙作モジュール, <a href="https://github.com/papix/CUDA-DeviceAPI">CUDA::DeviceAPI</a>についていろいろ書いて行きたいと思います.</p>

<h2>GPGPUとは?</h2>

<p><a href="http://ja.wikipedia.org/wiki/GPGPU">GPGPU</a>は, GPU(グラフィックボード)の演算資源を画像処理以外に応用する技術のことです.<br/>
複数の計算を, GPUが持つ多数のコア(64個とか128個とか...)で並列に計算することで, シミュレーションや暗号解読などを高速に処理することができます.</p>

<p>ここ最近, いわゆるLL言語でのGPGPUという分野が多少活発になりつつあります. 有名どころだと, PythonのPyCUDAとかはその一例です.<br/>
学術研究レベルでも, 東大が開発した<a href="http://www.graco.c.u-tokyo.ac.jp/ppp/index.php?Projects%2FRubyGPU">Ikra</a>や, 同志社大学が開発した<a href="http://mikilab.doshisha.ac.jp/research/graduate_thesis/2011/nakamura/rnakamura.pdf">ParaRuby</a>など, いくつかのフレームワークが研究･実装されています.</p>

<p>Perlではどうなのか? というと, CPANにはあがっていませんが, <a href="https://github.com/run4flat/perl-CUDA-Minimal">CUDA::Minimal</a>というモジュールが存在します.<br/>
これは, CUDAのランタイムAPIを利用して, Inline::CのようにCUDAのコード(CUDA C言語)を書いて, GPUで実行することができる... というものです.</p>

<p>今回紹介する｢CUDA::DeviceAPI｣は, CUDAが持つもう1つのAPI, デバイスAPIを使って, PerlからGPGPUを利用するモジュールです.</p>

<h2>CUDA::DeviceAPIのインストール</h2>

<p>CUDA::DeviceAPIはCUDA 5.0を要求します. 最新版のCUDA 5.5だと動かない... んじゃないでしょうか. 試してませんが.<br/>
CUDAのインストールは基本的にめんどくさいのですが, Ubuntu 13.04以降だと,</p>

<pre><code>$ sudo apt-get install nvidia-common nvidia-cuda-dev nvidia-cuda-toolkit
</code></pre>

<p>でインストールできるようになっています. いやはや, 便利な時代になったものです...<br/>
なお, 言うまでもありませんがNVIDIA製のGPUが搭載されていることが前提条件ですので今すぐ日本橋か秋葉原にでも行って買ってきましょう. GPUを使えばPerCUDAの開発者になれる上, Minecraftとかもサクサク動くようになるので一石二鳥です.</p>

<p>CUDAのインストールが終われば,</p>

<pre><code>$ git clone https://github.com/papix/CUDA-DeviceAPI.git
$ cd CUDA-DeviceAPI
$ minil install
</code></pre>

<p>とかすれば, インストールが出来るはずです.</p>

<h2>CUDA::DeviceAPIを使ってみる</h2>

<p>さて, 早速CUDA::DeviceAPIを使って, PerlからCUDAを使ってみましょう.
まず, CUDAで実行するコードを用意します.</p>

<pre><code>extern "C" __global__ void kernel(float *a, float *b, float *c, int n)
{
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int row = blockIdx.y * blockDim.y + threadIdx.y;

    c[col + row * n] = 0;
    if(col &lt; n &amp;&amp; row &lt; n) {
        float tmp = 0.0f;
        for (int i = 0; i &lt; n; i++) {
            tmp = tmp + a[row * n + i] * a[col + n * i];
        }
        c[col + row * n] = tmp;
    }
}
</code></pre>

<p>この<code>kernel</code>関数は, n行n列のfloat型配列を3つ受け取り, 1つ目のfloat型配列と2つ目のfloat型配列の乗算を計算して, 3つ目のfloat型配列に格納する, というコードです. 多分.<br/>
今回は, このコードを<code>sample.cu</code>という名前で保存します.</p>

<p>このコードを, CUDA::DeviceAPIから実行できるように, CUDAのアセンブリ表現であるPTXに変換します.<br/>
CUDAのインストールが終わっていれば, <code>nvcc</code>というCUDA用コンパイラが使えるようになっているはずなので,</p>

<pre><code>$ nvcc -ptx sample.cu
</code></pre>

<p>すると, <code>sample.ptx</code>というファイルが生成されるはずです.</p>

<p>最後に, 生成したPTXを呼び出すPerlのコードを書きます.</p>

<pre><code>use strict;
use warnings;

use CUDA::DeviceAPI;
use CUDA::DeviceAPI::Array;
use Data::Dumper;

my $LENGTH = 4;
my $block_size = 32;

my $matrix = [
    [ 1, 2, 3, 4 ],
    [ 1, 2, 3, 4 ],
    [ 1, 2, 3, 4 ],
    [ 1, 2, 3, 4 ],
];

my $path = 'sample.ptx';
my $host_data = CUDA::DeviceAPI::Array-&gt;new($matrix);

my $ctx = CUDA::DeviceAPI-&gt;new();

my $dev_ptr_1 = $ctx-&gt;malloc_from($host_data =&gt; 'f');
my $dev_ptr_2 = $ctx-&gt;malloc_from($host_data =&gt; 'f');
my $dev_ptr_3 = $ctx-&gt;malloc($host_data-&gt;size() =&gt; 'f');

my $size = $ctx-&gt;ceil($LENGTH / $block_size);

$ctx-&gt;run($path, 'kernel_sum', [
    $dev_ptr_1 =&gt; 'p',
    $dev_ptr_2 =&gt; 'p',
    $dev_ptr_3 =&gt; 'p',
    $LENGTH    =&gt; 'i',
], [
    $size, $size, 1, $block_size, $block_size, 1
]
);

my $result = $ctx-&gt;return($dev_ptr_3);

print Dumper $result;
</code></pre>

<p>今回は, 4行4列の配列の乗算を計算してみました.</p>

<p>計算する行列は<code>my $matrix</code>に入っていて, これを<code>CUDA::DeviceAPI::Array-&gt;new($matrix)</code>とすることで, CUDA::DeviceAPIでよしなに扱える形式にしています.</p>

<p><code>malloc_from</code>は<code>CUDA::DeviceAPI::Array</code>型のオブジェクトを第1引数に受け取って, 第2引数の型(今回は<code>f</code>なのでfloat型)でGPUのメモリに領域を確保し, 値を配置するメソッドです.<br/>
<code>malloc</code>は, 第1引数に<code>{ x =&gt; 3, y =&gt; 2, z =&gt; 1 }</code>のようなハッシュリファレンスを受け取ると, 第2引数の型に応じて, 第1引数で指定したサイズの配列を格納する為に必要な領域を, GPUのメモリに確保してくれます.</p>

<p>あとは, ここまで生成した値を利用してPTXを呼び出し, 実行するだけです.<br/>
実行は<code>run</code>メソッドから行います.<br/>
このメソッドの第1引数は実行するPTXへのパス, 第2引数は実行する関数の名前を指定します.</p>

<p>第3引数は関数に渡す引数を配列リファレンスで指定しています.
配列リファレンスの2n番目には, GPUで実行する関数のn番目の引数となるポインタ(<code>malloc_from</code>や<code>malloc</code>が返すもの)ないし数値を指定します. <br/>
配列リファレンスの2n + 1番目には, 2n番目で指定した引数の構造を指定します. 配列のポインタであれば<code>p</code>, 整数であれば<code>i</code>, float型の数値であれば<code>f</code>といった形です.</p>

<p>第4引数はCUDAのグリッドサイズやブロックサイズを指定する部分になります.</p>

<p>最後に, GPUで計算した結果は, <code>return</code>で取得する事ができます.<br/>
引数に<code>malloc_from</code>や<code>malloc</code>で生成したポインタを指定すれば, そのポインタが指す値をGPUから取得し, 適切な配列リファレンス構造に変換した上で返します.</p>

<h2>まとめ, そしてCUDA::DeviceAPIからPerCUDAへ...</h2>

<p>...というわけで, Perlから, CUDAのデバイスAPIを利用してGPGPUを実現するCUDA::DeviceAPIというモジュールを作りました.</p>

<p>CUDA::DeviceAPIやCUDA::Minimalによって, PerlからCUDAを利用する環境というのは整いつつありますが, まだまだ使い勝手が万全, という訳ではありません.<br/>
そこで現在, このモジュールを利用して, PerCUDAというPerl向けGPGPUフレームワークを作ろうとしています.</p>

<p>PerCUDAでは, CUDA::DeviceAPIの分かりにくい部分を極力隠蔽するのはもちろん, Perlのコードから自動的にPTXを生成し, ｢Perlのコーディングのみ｣でGPGPUを実現できるようにする予定です.</p>

<p>これによって｢GPUがない場合はPerlのみで実行｣, ｢GPUがある場合はPerl + GPUで実行｣という2つの手法を簡単に使い分けることができるようになるので, ｢GPUがないPC(例えばMBAやノートPC)でコードを書いて小規模の計算で検証｣, ｢細かな調整と大規模な計算はGPUがあるPCで高速に実行｣といった開発手法ができるようになる, ...はずです.</p>

<p>近日中にPerCUDAの方もコードを公開したいと思っておりますので, CUDA::DeviceAPIともども, patchやissue, バグ報告等々をお待ちしております!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-11-04:entry-2013-11-04-cuda-device-api.html</id>
<published>2013-11-04T02:02:29+0900</published>
<updated>2013-11-04T18:02:29+09:00</updated>
</entry>
<entry>
<title type="text">「Hachioji.pm 日めくりテックトーク」について</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>「Hachioji.pm 日めくりテックトーク」について</h1>

<h2>これまでの記事</h2>

<table>
<thead>
<tr>
<th>日時           </th>
<th> 筆者       </th>
<th> タイトル</th>
</tr>
</thead>
<tbody>
<tr>
<td>2013/12/06(金) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-06-nakachan.html">App::Nakachanを作ってみた</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-06-nakachan.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-06-nakachan.html"></a></td>
</tr>
<tr>
<td>2013/12/05(木) </td>
<td> ytnobody </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-05-shoutcast.html">Hackを支える作業用BGM事情</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-05-shoutcast.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-05-shoutcast.html"></a></td>
</tr>
<tr>
<td>2013/12/04(水) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-04-travel04.html">地域PM遠征を支える技術 〜北海道/フェリー編〜</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-04-travel04.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-04-travel04.html"></a></td>
</tr>
<tr>
<td>2013/12/03(火) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-03-travel03.html">地域PM遠征を支える技術 〜北海道/鉄道編〜</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-03-travel03.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-03-travel03.html"></a></td>
</tr>
<tr>
<td>2013/12/02(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-02-travel02.html">地域PM遠征を支える技術 〜関東関西移動編〜</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-02-travel02.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-02-travel02.html"></a></td>
</tr>
<tr>
<td>2013/12/02(月) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-07-time-piece-trap.html">Time::PieceのParseで%zを使うのは無理ゲー</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-07-time-piece-trap.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-07-time-piece-trap.html"></a></td>
</tr>
<tr>
<td>2013/12/01(日) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-12-01-travel01.html">地域PM遠征を支える技術 〜首都圏宿泊施設編〜</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-12-01-travel01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-12-01-travel01.html"></a></td>
</tr>
<tr>
<td>2013/11/04(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-11-04-cuda-device-api.html">CUDA::DeviceAPIでPerlからお手軽GPGPUライフ!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-11-04-cuda-device-api.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-11-04-cuda-device-api.html"></a></td>
</tr>
<tr>
<td>2013/11/01(金) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html">Minilla（Module::Build）でproveオプションを渡したい</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html"></a></td>
</tr>
<tr>
<td>2013/10/27(日) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html">Fukuoka.pmに乱入してきた!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-27-fukuokapm.html"></a></td>
</tr>
<tr>
<td>2013/10/14(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html">Compiler::CodeGenerator::LLVMで遊ぼう!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html"></a></td>
</tr>
<tr>
<td>2013/10/04(金) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html">Perlの警告と例外を両方握りつぶすtypesterハック</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html"></a></td>
</tr>
<tr>
<td>2013/10/01(火) </td>
<td> moznion </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-10-01-encoding.html">Perl の文字列エンコーディングの話</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-10-01-encoding.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-10-01-encoding.html"></a></td>
</tr>
<tr>
<td>2013/09/29(日) </td>
<td> ytnobody </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-29-nephia.html">肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-29-nephia.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-29-nephia.html"></a></td>
</tr>
<tr>
<td>2013/09/25(水) </td>
<td> mackee </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html">Perl6をかいま見るためにSeisを使ってみる</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html"></a></td>
</tr>
<tr>
<td>2013/09/24(火) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-24-selenium.html">SeleniumとPerlの話</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-24-selenium.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-24-selenium.html"></a></td>
</tr>
<tr>
<td>2013/09/23(月) </td>
<td> Hiroyuki Akabane </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html">phpcon2013所見</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html"></a></td>
</tr>
<tr>
<td>2013/09/18(水) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html">perlでTravisCI、Coverallsを使ってみる</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html"></a></td>
</tr>
<tr>
<td>2013/09/17(火) </td>
<td> ichigotake </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html">最近のPerlに足りないモノ</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html"></a></td>
</tr>
<tr>
<td>2013/09/16(月) </td>
<td> OGATA Tetsuji </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html">Perlの一文字変数の攻略</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-16-perlonechar.html"></a></td>
</tr>
<tr>
<td>2013/09/15(日) </td>
<td> mackee </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html">Perl meets Hardware #01 Perlとハードウェアが出会うには</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-15-perl_meets_hardware_01.html"></a></td>
</tr>
<tr>
<td>2013/09/14(土) </td>
<td> Songmu </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html">Perl5.10以降に追加された機能で良く使うお役立ち機能まとめ</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-14-perlfeature.html"></a></td>
</tr>
<tr>
<td>2013/09/13(金) </td>
<td> ytnobody / satoshi azuma </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-13-01.html">八王子 CPANモジュールコレクション 2013 秋</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-13-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-13-01.html"></a></td>
</tr>
<tr>
<td>2013/09/12(木) </td>
<td> uzulla </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-12-01.html">PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-12-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-12-01.html"></a></td>
</tr>
<tr>
<td>2013/09/11(水) </td>
<td> boolfool </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-11-01.html">購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-11-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-11-01.html"></a></td>
</tr>
<tr>
<td>2013/09/10(火) </td>
<td> moznion </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-03.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-03.html"></a></td>
</tr>
<tr>
<td>2013/09/09(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-02.html">「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-02.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-02.html"></a></td>
</tr>
<tr>
<td>2013/09/09(月) </td>
<td> papix </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-01.html">「Hachioji.pm 日めくりテックトーク」について</a> <a href="http://b.hatena.ne.jp/entry/http://hachiojipm.github.io/entry/2013-09-09-01.html"><img src="http://b.hatena.ne.jp/entry/image/small/http://hachiojipm.github.io/entry/2013-09-09-01.html"></a></td>
</tr>
</tbody>
</table>


<h2>概要</h2>

<p>Hachioji.pmが主催する, 日替わりで何らかのテックトークが投稿されていくカレンダーのようなものです.<br/>
書きたい人からじゃんじゃん書いていって下さい. Hachioji.pm以外の方も大歓迎です!</p>

<p>記事を書いてみたい人は, コミット権くれって言えば適当に誰かが対応してくれると思います。あとはお好きにどうぞ！</p>

<h2>おやくそく</h2>

<ul>
<li><code>git push -f</code>は厳禁. 同志ソムーリンに粛清されます.</li>
<li>ブログのネタは何でもよいのではないでしょうか. ただ炎上だけは勘弁な.</li>
<li>「Hachioji.pmメンバーによるテックブログ」というよりは「Hachioji.pmが主催するテックブログ」という雰囲気なので, Hachioji.pm以外の方もどしどし書いていきましょう.

<ul>
<li>書いてみたい! と思った方はHachioji.pmっぽい人に声をかけてみて下さい.</li>
</ul>
</li>
<li>「Hachioji.pm 日めくりテックトーク, 楽しそう!」という発言を不用意にしてしまうと, papixに強制的にアサインされる事例が多発しています.</li>
<li>楽しくやりましょう.</li>
</ul>

]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-01.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-11-04T17:30:07+09:00</updated>
</entry>
<entry>
<title type="text">Minilla（Module::Build）でproveオプションを渡したい</title>
<link href="http://hachiojipm.github.io/entry/2013-11-03-minilla-tips1.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Minilla（Module::Build）でproveオプションを渡したい</h1>

<p>最近はやりのモジュールセットアップ＆管理ツールの<a href="http://search.cpan.org/~tokuhirom/Minilla/">Minilla</a>で使うminil testでprove --jobs 10的な並列処理をかけたいなーと思って、いろいろ調べて教えてもらったのでその話です。</p>

<h2>感謝！</h2>

<p>この記事書いたらtokuhiromさんがコメントくれて、しかもMinilla v0.8.2をリリースし、tap_harness_argsというModule::Buildのオプションに対応して頂けました！詳細は後述。</p>

<p>ありがとうございます！！！！</p>

<h2>proveのオプションって？</h2>

<p>proveはPerlの動作確認テストを一括実行するコマンドです。proveのオプションとか知らない方は、こちらのxaicronさんの記事を参照→<a href="http://perl-users.jp/articles/advent-calendar/2011/test/21">prove についてのおさらい</a></p>

<p>テストの並列処理とかカラーリングとか時間出したりできます。モジュールのテストでも並列処理させたいことはしばしばあると思いますので、結構ニーズあるような設定だと思いますね。</p>

<h2>Makefile.PLの場合</h2>

<p><a href="http://perl-users.jp/articles/advent-calendar/2011/test/18">テストのためにデーモンを自動的に起動するやりかた2011年版</a>にあるように、.provercとかもりもりかいて、以下のようにMakefile.PLに書けばいいのです。</p>

<pre><code>sub MY::test_via_harness { "\tprove --rc=t/proverc t\n" }
</code></pre>

<p>ただ、Minillaは最近はやりのBuild.PL形式で<a href="http://search.cpan.org/~leont/Module-Build-0.4007/lib/Module/Build.pm">Module::Build</a>使っているんですが、ドキュメントがモリモリでよくわからん！という感じなりました。ググってもあまり出てこないし。。。</p>

<h2>Build.PLの場合</h2>

<p><a href="http://search.cpan.org/~leont/Module-Build-0.4007/lib/Module/Build.pm">Module::Build</a>にもよくみたらかいてあるんですが、全然よくわかりません（苦笑）</p>

<p>Mminilla( v0.8.2)が生成するBuild.PLをみるとよくわかります。生でBuild.PLを書く場合は以下の設定します。</p>

<pre><code>my $builder = Module::Build-&gt;new(
    tap_harness_args =&gt; {"jobs" =&gt; 19,"timer" =&gt; "true","color" =&gt; "true"},
);
</code></pre>

<h2>[追記]Minillaのproveの並列オプションの渡し方 ～tap_harness_args編～</h2>

<p>Minilla v0.8.2では、以下のようにminil.tomlに設定するということです。</p>

<pre><code>[tap_harness_args]
jobs=19
color=true
timer=true
</code></pre>

<h2>[元記事]Minillaのproveの並列オプションの渡し方 ～オレオレbuild_class編～</h2>

<p>builder::MyBuilderでカスタマイズできるという参考程度に。</p>

<p>さてはて、困ったなーと思っていたんですが、こんなときこそはちぴー仲間の集うYanchaだ！！ということで聞いてみたら、<a href="http://d.hatena.ne.jp/gfx/20110313/1300027796">gfxさんの記事</a>をさらっと<a href="http://yancha.hachiojipm.org/quot?id=172960,172953,172951,172949">tsuttchiさんにおしえてもらった</a>。マジ感謝です！！！で以下のようにproveのオプションは環境変数で設定できるということです。</p>

<pre><code>HARNESS_OPTIONS=j19 minil test
</code></pre>

<p>で、毎回環境変数渡すのだ類のでMinillaにいれたいんですが、Build.PLを自動生成するMinillaなので、どうするかというと、<a href="http://search.cpan.org/~tokuhirom/Minilla/lib/Minilla.pm#CONFIGURATION">Minillaのminil.tomlの設定のドキュメント</a>とtokuhiromさんの<a href="http://blog.64p.org/entry/20111202/1322803079">Module::Buildでテストの前とかあとにフックする方法</a>を参考に以下のようになります。</p>

<h3>minil.tomlで以下のようにオレオレbuild_classを設定</h3>

<pre><code>[build]
build_class = "builder::MyBuilder"
</code></pre>

<h3>オレオレbuildクラスで以下のようにテストをフック</h3>

<p>./buidler/ディレクトリ作って、vi /builder/MyBuilder.pmに書き込みます</p>

<pre><code>package builder::MyBuilder;
use strict;
use warnings;
use parent qw(Module::Build);

sub ACTION_test {
    my $self = shift;

    local $ENV{HARNESS_OPTIONS} = ($ENV{HARNESS_OPTIONS} ||'') . 'j19';
    $self-&gt;SUPER::ACTION_test(@_);
}

1;
</code></pre>

<h3>いろいろ渡す方法</h3>

<p><a href="http://search.cpan.org/~ovid/Test-Harness-3.29/lib/Test/Harness.pm#ENVIRONMENT_VARIABLES_THAT_AFFECT_TEST::HARNESS">HARNESS_OPTIONSのドキュメント</a>をみると、たくさんオプションを渡すときは、「:」区切りで渡すようです。</p>

<pre><code>HARNESS_OPTIONS=j9:c make test
</code></pre>

<h3>余談、do_system('prove --jobs 19 -r t')には注意</h3>

<p>最初ACTION_testの中で、$self->SUPER::ACTION_test(@_)呼ばないで、$self->do_system('prove --jobs 19 -r t')でやればよくね？って思ってやったんですが、Minillaがいい感じに裏でやっていると思われるxt系のテストがよばれなくなっちゃうので、ちとうれしくないと思いやめました。xt系のテストあまりわかっていないので、とりあえず、tokurhiromオススメを不都合が出るまで使っておきましょうという感じです。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-11-01:entry-2013-11-03-minilla-tips1.html</id>
<published>2013-11-01T03:03:02+0900</published>
<updated>2013-11-04T03:33:25+09:00</updated>
</entry>
<entry>
<title type="text">肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</title>
<link href="http://hachiojipm.github.io/entry/2013-09-29-nephia.html" />
<author>
<name>ytnobody</name>
</author>
<content><![CDATA[<h1>肉の日にぴったり！肉料理の付け合わせにさっぱり味のWAFはいかが？</h1>

<p>はい、ハチオージピーエム日めくりテックトークのお時間がやってまいりました！9月29日の土曜日、時刻は16時54分を回ったところです。皆さんこんばんは！今日は私、わいとんぼーい(ytnobody)がお茶の間にテックな話題をお届けしてまいります！</p>

<p>さて、今日は肉の日です。えー皆さん、お肉たべてますか？お肉たべましょうね！もちろんお肉だけじゃダメなので、野菜もバランスよく食べるといいですよー。今日の夕御飯はどんな肉料理が食卓に並ぶのでしょうか、楽しみですねー。</p>

<p>そして！年に一度の「苦肉の策」の日でもあります。まあこれは私あたりが勝手にそう言ってるだけではありますけれども、そろそろわれらがハチオージピーエムの面々もエントリを書くのがだるくなってきたせいか、3日ほどこちらの日めくりテックトークも「苦肉の策」として、わたくしにパーソナリティのバトンが回ってきた次第です。・・・嘘です（笑</p>

<p>えー、それではそろそろ本日のメインコーナーにまいりたいと思います。</p>

<p>実はですね、今朝8:30ころにわたくし「ネフィア(Nephia)」というモジュールをCPANにリリース致しました！あーどうもどうも！ありがとうございますー！</p>

<p>それでですね、今日はその簡単な使い方の説明と、あとざっくりとした特徴といいますか、そう言うところをですね、説明していきたいと思うんですねー、どうですかちょっと楽しみになってきたんじゃないですか？</p>

<p>えーまずですね使いかたの方を説明していきますねー、っと、今日はこの説明のためにノートパソコンを用意していただいたんですけども、こちらのパソコンにはplenvと言うものが入っていてですね、そこにcpanmというものが用意されていると、いうことです。あ、もうNephiaもインストール済みなんですか？・・・あー、入ってるんですね、すいません、もう入ってるそうです！</p>

<p>じゃあ早速ですけど、すごく単純なwebアプリを作っていきましょうねー、大丈夫です20秒くらいで出来上がりますので！あっさりしていて今晩のおかずにもぴったりですよ！じゃあ次のようなコマンドを実行してみますねー、はいっ！</p>

<pre><code>$ nephia-setup MyApp
</code></pre>

<p><img src="http://hachiojipm.github.io/static/image/nephia-01.png" alt="実行！" /></p>

<p>そうすると、ほら、何か色々でてきましたねー！なんとですね、これで完成です・・・！！じゃあ早速試食してみましょう！</p>

<pre><code>$ cd MyApp
$ plackup
</code></pre>

<p>はい！これで http://hachiojipm.github.io:5000/ にアクセスしてみるとですね、なんともシンプルな味わいのページが表示されましたね！中身も非常にシンプルでして、こんな感じになっておりまーす！</p>

<pre><code>MyApp/
├── Changes
├── app.psgi
├── cpanfile
├── lib
│   └── MyApp.pm
└── t
    └── 001_use.t
</code></pre>

<p>肝になりそうなファイルをみていきますと、まずapp.psgiですがこんな感じ。</p>

<pre><code>use strict;
use warnings;
use File::Spec;
use File::Basename 'dirname';
use lib (
    File::Spec-&gt;catdir(dirname(__FILE__), 'lib'), 
);
use MyApp;

MyApp-&gt;run;
</code></pre>

<p>だいぶシンプルですねー、そして、本体であるlib/MyApp.pmはこんな感じになっています！</p>

<pre><code>package MyApp;
use strict;
use warnings;
use Nephia;

our $VERSION = 0.80;

app {
    [200, [], 'Hello, World!'];
};

1;
</code></pre>

<p>はい！こちらもまたえらくシンプルですねー！見て分かると思いますけど、Nephia自体ではなんとディスパッチャーとかルーターと呼ばれるものをですね、持っていないんですねー。そしてそして、テンプレートエンジンも含んでいないんです！とにっかく小さいwebアプリケーションに特化していますので、Nephia＝Plackに毛のはえた程度 と思っていただいて大体間違いないんじゃないかと思います！</p>

<p>まあでも、さすがにこれではちょっとシンプル過ぎて・・・という奥様方もいらっしゃると思います。そうでしょうそうでしょう！実はですね、今やったのはMinimalセットアップという方法でプロジェクトをでっち上げたんですね。で、ミニマルというだけあって、本当になにもないんですよ。なので、もう少しダシの効いた仕上がりになるセットアップ方法という物もご紹介いたします。</p>

<p>はい、それでは今度はcpanmでNephia::Setup::Plugin::Normal というものをですね、準備しておいていただきまして、以下のようにセットアップを実行してみてください。</p>

<pre><code>$ nephia-setup SuperMyApp --plugins Normal
</code></pre>

<p><img src="http://hachiojipm.github.io/static/image/nephia-02.png" alt="実行！" /></p>

<p>これでできあがりです。先ほどと同じようにplackupして、ブラウザでアクセスしてみますと、なんとbootstrapでレイアウトが組まれたページがでてきましたね！</p>

<p>中身をみてみますと、こんな感じです。</p>

<pre><code>SuperMyApp/
├── Changes
├── app.psgi
├── cpanfile
├── lib
│   └── SuperMyApp.pm
├── static
│   ├── bootstrap
│   │   ├── css
│   │   │   ├── bootstrap-responsive.css
│   │   │   ├── bootstrap-responsive.min.css
│   │   │   ├── bootstrap.css
│   │   │   └── bootstrap.min.css
│   │   ├── img
│   │   │   ├── glyphicons-halflings-white.png
│   │   │   └── glyphicons-halflings.png
│   │   └── js
│   │       ├── bootstrap.js
│   │       └── bootstrap.min.js
│   └── js
│       └── jquery.min.js
├── t
│   └── 001_use.t
└── view
    └── index.html
</code></pre>

<p>で、先ほどと同様にこちらもapp.psgiをみてみますと、</p>

<pre><code>use strict;
use warnings;
use Plack::Builder;
use Plack::Session::Store::Cache;
use Cache::SharedMemoryCache;
use File::Spec;
use File::Basename 'dirname';
use lib (
    File::Spec-&gt;catdir(dirname(__FILE__), 'lib'), 
);
use SuperMyApp;

my $app           = SuperMyApp-&gt;run;
my $root          = File::Spec-&gt;rel2abs(File::Spec-&gt;catdir(dirname(__FILE__)));
my $session_cache = Cache::SharedMemoryCache-&gt;new({
    namespace          =&gt; 'SuperMyApp',
    default_expires_in =&gt; 600,
});

builder {
    enable_if { $ENV{PLACK_ENV} =~ /^dev/ } 'StackTrace', force =&gt; 1;
    enable 'Static', (
        root =&gt; $root,
        path =&gt; qr{^/static/},
    );
    enable 'Session', (
        store =&gt; Plack::Session::Store::Cache-&gt;new(
            cache =&gt; $session_cache,
        ),
    );
    enable 'CSRFBlock';
    $app;
};
</code></pre>

<p>そして lib/SuperMyApp.pmは、この様になっております。</p>

<pre><code>package SuperMyApp;
use strict;
use warnings;
use File::Spec;

our $VERSION = 0.01;

use Nephia plugins =&gt; [
    'JSON',
    'View::MicroTemplate' =&gt; {
        include_path =&gt; [File::Spec-&gt;catdir('view')],
    },
    'ResponseHandler',
    'Dispatch',
];

app {
    get '/' =&gt; sub {
        {template =&gt; 'index.html', appname =&gt; 'SuperMyApp'};
    };

    get '/simple' =&gt; sub { 
        [200, [], 'Hello, World!']; 
    };

    get '/json' =&gt; sub { 
        {message =&gt; 'Hello, JSON World'};
    };
};

1;
</code></pre>

<p>よく見ると、ディスパッチャーがありますけれど、このセットアップ方法はNormalセットアップといいまして、このノーマルな方法でセットアップをこなすと、ディスパッチャーとテンプレート、それからなんとJSON出力機能がついてくるんですねー、非常に便利になりました！</p>

<p>さて、ここまでざくざくーっと使い方と中身を見ていただきましたが、このNephia、最大の特徴は「DSL」です！プラグインをどんどん読み込んでいくと、その分DSLが追加される、というのが基本です。っと、どうやら時間となってしまった模様です！</p>

<p>次回の放送予定は明日ですが、無事に放送に至ることができるのか！？ご期待ください！！！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-29:entry-2013-09-29-nephia.html</id>
<published>2013-09-29T10:10:07+0900</published>
<updated>2013-10-14T23:35:28+09:00</updated>
</entry>
<entry>
<title type="text">Compiler::CodeGenerator::LLVMで遊ぼう!</title>
<link href="http://hachiojipm.github.io/entry/2013-10-14-codegenerator-llvm.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>Compiler::CodeGenerator::LLVMで遊ぼう!</h1>

<p>今日は, <a href="https://twitter.com/goccy54">@goccy54</a>さんが開発された<a href="https://github.com/goccy/p5-Compiler-CodeGenerator-LLVM">Compiler::CodeGenerator::LLVM</a>を導入して, ひと通り動かすまでのアレコレをご紹介したいと思います.</p>

<h2>LLVMのインストール</h2>

<p>Compiler::CodeGenerator::LLVMはLLVM 3.3に依存しているので, まず最初にLLVM 3.3を導入します.<br/>
ついでにLLVMを基盤とするコンパイラのClangと, ランタイムライブラリのCompiler RTも入れてしまいましょう.</p>

<p>まず, <a href="http://www.llvm.org/releases/download.html#3.3">こちらのページ</a>から, <code>Clang source code</code>, <code>LLVM source code</code>, <code>Compiler RT source code</code>をクリックして, 必要なソースコードをダウンロードします.</p>

<pre><code>$ wget http://llvm.org/releases/3.3/cfe-3.3.src.tar.gz
$ wget http://llvm.org/releases/3.3/compiler-rt-3.3.src.tar.gz
$ wget http://llvm.org/releases/3.3/llvm-3.3.src.tar.gz
</code></pre>

<p>それぞれ, <code>cfe-3.3.src.tar.gz</code>, <code>llvm-3.3.src.tar.gz</code>, <code>compiler-rt-3.3.src.tar.gz</code>というファイルがダウンロードできるので, さっさと解凍してしまいます.</p>

<pre><code>$ tar -xf cfe-3.3.src.tar.gz
$ tar -xf llvm-3.3.src.tar.gz
$ tar -xf compiler-rt-3.3.src.tar.gz
</code></pre>

<p>解凍してできた<code>llvm-3.3.src</code>の中の適切な位置に, <code>cfe-3.3.src</code>と<code>compiler-rt-3.3.src</code>を配置していきます.</p>

<pre><code>$ mv cfe-3.3.src llvm-3.3.src/tools/clang
$ mv compiler-rt-3.3.src llvm-3.3.src/projects/compiler-rt
</code></pre>

<p>続いて, <code>llvm-3.3.src</code>ディレクトリに移動して, <code>configure</code>で設定を行います.</p>

<pre><code>$ cd llvm-3.3.src
$ ./configure
</code></pre>

<p>問題なく<code>configure</code>が終われば, <code>make</code>, <code>make check</code>, <code>make install</code>でビルドして, インストールまで済ませます.<br/>
ちなみに<code>configure</code>を実行する際, <code>--prefix</code>オプションで任意の場所にLLVMやClangをインストールすることができますが, 手元の環境では何故かうまく動かなかったのでデフォルトでインストールした方が良さそうです.<br/>
｢sudoで入れるの嫌だなあ...｣という方はVagrantとかVirtualBoxとか, そういうのを作ってCompiler::CodeGenerator::LLVM用のVMを建てましょう!</p>

<pre><code>$ make
</code></pre>

<p>ちなみに, <code>make</code>コマンドは<code>make -jN</code>とすることで, Nコアを使って処理を進めることができます.<br/>
ビルドには時間がかかるので, <code>make -j2</code>とか<code>make -j4</code>とかで高速化しましょう.</p>

<pre><code>$ make check
$ sudo make install
</code></pre>

<p><code>make check</code>は任意ですが, とりあえずやっておきましょう. 手元の環境では100件ほどFailしますが, おそらく大丈夫... だと思います.<br/>
あとは<code>sudo make install</code>を実行すれば, LLVMとClangがインストールされます.</p>

<pre><code>$ which llvm-config
/home/username/local/llvm/bin/llvm-config
$ llvm-config --version
3.3
</code></pre>

<p>といった感じで, LLVMとClangが正常にインストールできていることが確認できれば, 準備完了です.</p>

<h2>Compiler::CodeGenerator::LLVMのインストール</h2>

<p>それではCompiler::CodeGenerator::LLVMをインストールしましょう.</p>

<p>まず依存モジュールの準備です.<br/>
Compiler::CodeGenerator::LLVMは, こちらもまたgoccy氏が開発した<a href="https://github.com/goccy/p5-Compiler-Lexer">Compiler::Lexer</a>と<a href="https://github.com/goccy/p5-Compiler-Parser">Compiler::Parser</a>に依存しているので, これを入れる必要があります.</p>

<pre><code>$ cpanm Compiler::Lexer Compiler::Parser
</code></pre>

<p>どちらもCPANizeされているので, 素直に<code>cpanm</code>でインストールしてもいいですし, GitHubからcloneしてインストールしてもよいでしょう.<br/>
ちなみにどちらのモジュールも, Minillaで開発されているので<code>minil install</code>でインストールできます.</p>

<p>依存モジュールの準備が終われば, いよいよCompiler::CodeGenerator::LLVMのインストールです.<br/>
こちらのモジュールは, まだCPANizeされていないので,</p>

<pre><code>$ git clone https://github.com/goccy/p5-Compiler-CodeGenerator-LLVM.git
</code></pre>

<p>でcloneしてきてから,</p>

<pre><code>$ cd p5-Compiler-CodeGenerator-LLVM
$ perl Makefile.PL
$ make
$ make test
$ make install
</code></pre>

<p>の手順でインストールしていきます.</p>

<h2>早速, 試す!</h2>

<p>それでは早速, Compiler::CodeGenerator::LLVMで遊んでみましょう.<br/>
まずはSynopsisのコードを動かしてみます.</p>

<pre><code>use Compiler::Lexer;
use Compiler::Parser;
use Compiler::CodeGenerator::LLVM;

my $filename = $ARGV[0];
open(my $fh, "&lt;", $filename) or die("$filename is not found.");
my $script = do { local $/; &lt;$fh&gt; };
my $lexer = Compiler::Lexer-&gt;new($filename);
my $tokens = $lexer-&gt;tokenize($script);
my $parser = Compiler::Parser-&gt;new();
my $ast = $parser-&gt;parse($tokens);
my $generator = Compiler::CodeGenerator::LLVM-&gt;new();    
my $llvm_ir = $generator-&gt;generate($ast); # generate LLVM-IR
$generator-&gt;debug_run($ast); # execute LLVM-IR with JIT
</code></pre>

<p>Synopsisのコードは, 標準入力に与えられたファイル名に書かれているコードからLLVM IRを生成して, それをJITで実行するというスゴイやつです.<br/>
テストコードを<code>synopsis.pl</code>みたいな名前で保存して,</p>

<pre><code>use strict;
use warnings;

my @arg = (0, 1, 2, 3, 4);
foreach my $i (@arg) {
    say $i;
}
</code></pre>

<p>こんな感じのファイルを<code>sample.pl</code>で保存して, <code>$ perl synopsis.pl sample.pl</code>てな感じで実行すると...</p>

<pre><code>$ perl synopsis.pl sample.pl
0
1
2
3
4
</code></pre>

<p>Wow! 実行できましたね.<br/>
個人的には, 内部で生成されたLLVM IRをダンプできれば, いろいろと遊べそうな感じがしますが, 現状そのようなメソッドはないっぽいので, 今後に期待したいと思います.<br/>
(時間があれば実装とかチャレンジしてみたい所ですが... XSだしなあ...)</p>

<h2>まとめ</h2>

<p>YAPC::Asiaにおいて, 注目の的の1つでもあったPerlMotionを支えるgoccy wareの, Compiler::CodeGenerator::LLVMの導入方法をまとめてみました.<br/>
このモジュールが完成すれば, PerlでiPhoneアプリが開発できるようになるだけでなく, PerlのコードをLLVM IR経由で各種バイナリに変換したり, C言語に変換したり, CUDAに変換したり... と, いろいろな可能性が期待できるようになります.</p>

<p>今後も, バク報告だけでなく, 出来ればコードをコミットしていく... という方法で, Compiler::CodeGenerator::LLVMやCompiler::Lexer, Compiler::Parserといったgoccy wareをサポートして行けたらいいなあ, と思っています.<br/>
これからのCompiler::CodeGenerator::LLVM, 要チェックですね!</p>

<p>なお, 今回この記事を書くにあたり, 作者の<a href="https://twitter.com/goccy54">@goccy54</a>さんに大変, ものっすごっく, アドバイスとご協力を頂きました.<br/>
この場をお借りして御礼申し上げます. 本当にありがとうございました!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-14:entry-2013-10-14-codegenerator-llvm.html</id>
<published>2013-10-14T35:35:28+0900</published>
<updated>2013-10-14T23:35:28+09:00</updated>
</entry>
<entry>
<title type="text">Perl の文字列エンコーディングの話</title>
<link href="http://hachiojipm.github.io/entry/2013-10-01-encoding.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>Perl の文字列エンコーディングの話</h1>

<p>ハァイ，先日 <a href="https://metacpan.org/module/Plack::Request::WithEncoding">Plack::Request::WithEncoding</a> というモジュールをリリースしました，<a href="https://twitter.com/moznion">@moznion</a> です．皆様いかがお過ごしでしょうか．<br/>
さて，このモジュールを書いてて Perl の文字列エンコーディングに関する知識を幾ばくか深めましたので，共有したいと思います．まあ大体の皆さんは「そんなこと知ってるぜ！！　常識だろ！」という趣だと存じ上げますが……</p>

<p>ただまあ，「文字化けしてつらい！！」みたいなのは誰しも通る道だと思いますので記しておくこととします！</p>

<h2>TL;DR</h2>

<blockquote><p>入り口で decode して，内部ではすべて flagged utf8 で扱い，出口で encode する．これがすべてです！とにかくこの基本方針をまもっていれば幸せになれます．</p>

<p>from <a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p></blockquote>

<p>ぶっちゃけ，上記のエントリ良すぎるのでそれ読めば良いです．<br/>
以下はもう蛇足ですね！</p>

<h2>注意</h2>

<p>本エントリで示すソースコードでは，紙面の都合上</p>

<pre><code>use strict;
use warnings;
</code></pre>

<p>が省略されていますが，存在するものとして読み下して下さい．<br/>
<code>use strict</code> しないと世界が滅びます．</p>

<h2>このエントリで説明しないこと</h2>

<ul>
<li>Perl とは何か</li>
<li>文字コードとは何か</li>
</ul>


<h2>Perl の処理系における文字列の扱い</h2>

<p>Perl における文字列の扱いは，大きく2つに分けると「Perl 内部表現」と「バイト列 (latin-1)」に分類出来ます．</p>

<p>Perl 内部表現はその名の通り Perl が内部的に利用・保持する文字列のことです．よく“内部表現”だとか“内部文字列”だとか“flagged utf8”だとか呼ばれていますが，本エントリではわかりやすいので“内部表現”と呼ぶことにします．<br/>
内部表現ではない文字列に関して，Perl は バイト列 (latin-1) として扱います．</p>

<h2>エンコーディング</h2>

<p>本エントリで述べる「エンコード」は内部表現を指定したエンコーディング方式によりバイト列に変換する処理，
「デコード」はバイト列を内部表現に変換する処理のことを指します．</p>

<p>Perl では文字列のエンコード及びデコード処理を行う際には <a href="https://metacpan.org/module/Encode">Encode</a> モジュールを利用します．<br/>
本エントリではエンコード処理を行うメソッドである <code>encode()</code> と デコード処理を行うメソッドである <code>decode()</code> について説明します．</p>

<h3>Encode::decode('Encoding method', 'なんらかの文字列')</h3>

<p><code>decode()</code> メソッドは 'Encoding method' で表現されているバイト列を <strong>「内部表現」に変換</strong> します．<br/>
例えば以下のような感じです．</p>

<pre><code>use Encode;
my $decoded = Encode::decode('EUC-JP', $str); # &lt;= $str には EUC-JP でエンコードされた文字列が入っている
                                              # &lt;= だから decode() の第1引数は 'EUC-JP'
</code></pre>

<p>こうすると，'EUC-JP' でエンコードされている <code>$str</code> の内容 (バイト列) が内部表現に変換され，その内部表現が <code>$decoded</code> に格納されます．</p>

<h3>Encode::encode('Encoding method', 'なんらかの文字列')</h3>

<p><code>encode()</code> メソッドは「内部表現」を <strong>'Encoding method' でエンコード</strong> し，バイト列に変換します．<br/>
例えば以下のような感じです．</p>

<pre><code>use Encode;
my $decoded = Encode::decode('EUC-JP', $str);    # &lt;= $str には EUC-JP でエンコードされた文字列が入っている
my $encoded = Encode::encode('cp932', $decoded); # &lt;= $decoded は内部表現
</code></pre>

<p>こうすると，内部表現である <code>$decoded</code> が 'cp932' でエンコードされたバイト列に変換されて <code>$encoded</code> に格納されます．</p>

<h2>use utf8</h2>

<p>Perl には <code>use utf8</code> というプラグマがあります．<br/>
これはソースコードが 'utf8' によりエンコードされていることを伝えるプラグマです．<br/>
とは言ってもこの説明だと何が起こるのかがわかりにくいので，あけすけに説明しますと，<br/>
<code>use utf8</code> してから文字列リテラルを使って文字列を作ると，その時点でその文字列は内部表現になります．<br/>
(他にも正規表現でユニコード使えるようになったり，関数名や変数名にユニコード使えるようになったりしますが
 本筋から外れるのでここでの説明は割愛します)</p>

<p>注意としては，コードが書かれているファイル自体のエンコーディング方式が utf-8 である必要があります．</p>

<p>なので，ファイルエンコーディングが utf-8 である場合，</p>

<pre><code>use Encode;

my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= あなたとJava
</code></pre>

<p>というコードと</p>

<pre><code>use utf8;
use Encode;

my $decoded = "あなたとJava";
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= あなたとJava
</code></pre>

<p>というコードは等価です．</p>

<h2>結局どーすりゃ良いのさ</h2>

<blockquote><p>入り口で decode して，内部ではすべて flagged utf8 で扱い，出口で encode する．これがすべてです！とにかくこの基本方針をまもっていれば幸せになれます．</p>

<p>from <a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p></blockquote>

<p>まさにこれに尽きます．</p>

<p>そもそも，なぜ入り口で decode して，内部ではすべて内部表現で取り扱わなければならないのかというと，
Perl の外の世界には様々なエンコーディング方式があって，混沌としており怖い世界な訳ですよ．</p>

<p>そういう多種多様様々なエンコーディング方式をそれぞれケアするのは大変なので，
Perl ではそれらを統一的に扱えるように一度「内部表現」というものに落としこんでから，
そこでゴニョゴニョ操作して，エンコードしてバイト列化してやってから外の世界に
持って行ってやるという感じですね．</p>

<p>あと，ここ最近は utf-8 以外でファイル保存する人とかいないし，面倒が減るから，
<code>use utf8</code> プラグマは常に有効にしておけば良いのではないかという意見もありますね！</p>

<h2>よくあるエラーや文字化け</h2>

<p>(以降の例ではファイルエンコーディングは utf-8 であることが前提です)</p>

<h3>内部表現をそのまま出力しようとしている</h3>

<pre><code>use Encode;
my $decoded = Encode::decode("utf-8", "あなたとJava");
print $decoded; # &lt;= Warning!
</code></pre>

<p>あるいは</p>

<pre><code>use utf8;
my $decoded = "あなたとJava";
print $decoded; # &lt;= Warning!
</code></pre>

<p>みたいにしてやると，<code>Wide character in print</code> という警告メッセージが出ます．<br/>
これは内部表現をそのまま外に出力しようとしている為に発生します．<br/>
なのでこれは以下のように encode して，内部表現ではなくしてやる必要があります．
(「内部表現ではなくすること」を，「UTF8フラグを落とす」と表現する事もあります．
 UTF8 フラグについては後述します)</p>

<pre><code>use Encode;
my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= "あなたとJava"
</code></pre>

<h3>おかしなエンコーディング方式で decode を試みている</h3>

<pre><code>use Encode;
my $decoded = Encode::decode("EUC-JP", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
print $encoded; # &lt;= 化ける！
</code></pre>

<p>こうすると文字化けします．それもそのはず，ファイルが <strong>utf-8でエンコードされている</strong> ので
"あなたとJava" は utf-8 になっています．それをこのコード例のように "EUC-JP" という違う
エンコーディングで decode しようとすると化けてしまいます．<br/>
解決策としては当然ですが，適切なエンコーディング方式で decode してやると良いです．</p>

<p>また，<strong> utf-8以外でエンコーディングされているファイル</strong> に対して <code>use utf8</code> し，
なおかつ文字列にマルチバイト文字が含まれていると例外が発生します;</p>

<pre><code>use utf8;
my $str = "あなたとJava"; # &lt;= ここで警告が出る
</code></pre>

<p><code>use utf8</code> の注意の部分にも書きましたが，<code>use utf8</code> する場合は，ソースコードのファイルエンコーディングも
utf-8 でなければなりません．</p>

<h3>内部表現と，内部表現ではない文字列を連結させている</h3>

<pre><code>use Encode;
my $raw     = "あなた";
my $decoded = Encode::decode("utf-8", "とJava");

my $concatenated = $raw . $decoded;
print Encode::encode("utf-8", $concatenated); # &lt;= 文字化けする
</code></pre>

<p>まあ化けますよね！　という感じです．説明は tokuhirom さんのブログが詳しいのでそちらを読んだほうが明らかに良いです．<br/>
<a href="http://blog.64p.org/entry/20080408/1207619640">Perl で utf8 化けしたときにどうしたらいいか - blog.64p.org</a></p>

<h2>補足的情報</h2>

<h3>UTF8フラグ</h3>

<p>“UTF8フラグ”とは，「内部表現になっているかどうか」を判断するフラグです．
UTF8フラグが立っていればそれは内部表現であり，立っていなければその文字列はバイト列 (latin-1) です．</p>

<p>ここからはあんまり知らなくても良い情報です．CPAN モジュールを記述する人は気にするべきでしょう．</p>

<p>さてちょっと分かりにくいのですが，UTF8フラグが立っている文字列 (つまり内部表現) と
我々が日常使っているutf-8バイナリは <strong>別物です</strong>．気をつけましょう．<br/>
UTF8フラグ，名前が良くなくて，本来なら「内部表現フラグ」とかそういう名前にするべきだと思うんですけど，
まあそうなっちゃってるから仕方がないので，そういうものだと諦めて下さい．</p>

<h3>Devel::Peek</h3>

<p>UTF8フラグが立っているか立っていないかは一見するとわかりませんが，Devel::Peek というモジュールを利用すると
それを確認することができます．使い方としては以下のような感じです．</p>

<pre><code>use Encode;
use Devel::Peek;
my $str = Encode::decode("utf-8", "あなたとJava");
Devel::Peek::Dump($str);
</code></pre>

<p>これを実行すると以下のような結果を得られます;</p>

<pre><code>SV = PV(0x9fe5628) at 0x9ff7788
REFCNT = 1
FLAGS = (PADMY,POK,pPOK,UTF8)
PV = 0xa045ac8 "\357\277\275\357\277\275\357\277\275\312\244\357\277\275\357\277\275\357\277\275Java"\0 [UTF8 "\x{fffd}\x{fffd}\x{fffd}\x{2a4}\x{fffd}\x{fffd}\x{fffd}Java"]
CUR = 24
LEN = 28
</code></pre>

<p>色々と情報が記されていますが，ここで注目すべきは <code>FLAGS</code> の部分です．上の例では FLAGS に UTF8 が記されており，
これは UTF8 フラグが立っている，つまり $str は内部表現になっていることを表しています．</p>

<p>一方で，</p>

<pre><code>use Encode;
use Devel::Peek;
my $decoded = Encode::decode("utf-8", "あなたとJava");
my $encoded = Encode::encode("utf-8", $decoded);
Devel::Peek::Dump($encoded);
</code></pre>

<p>というコードを実行すると以下のような結果が得られるでしょう．</p>

<pre><code>SV = PV(0x9d1e540) at 0x9d307d8
REFCNT = 1
FLAGS = (PADMY,POK,pPOK)
PV = 0x9da3a98 "\357\277\275\357\277\275\357\277\275\312\244\357\277\275\357\277\275\357\277\275Java"\0
CUR = 24
LEN = 28
</code></pre>

<p>この結果には FLAGS に UTF8 フラグが示されていない為，これは $encoded は内部表現ではないことがわかりますね．</p>

<p>※あとお気づきとは思いますが，2つの例では PV の値が違いますね．片方は内部表現 (つまり UTF8 フラグが ON) で，<br/>
もう片方は utf-8 でエンコードされた文字列 (つまり我々が普段使う utf-8 バイナリ) です．ね，別物でしょ？</p>

<h2>これが Perl のエンコーディング！！！</h2>

<p>なんだか複雑ですね！！！！！<br/>
ただまあ，慣れればどうということはないでしょう......多分．<br/>
この記事が Perl のエンコーディングの理解の一助になれば幸いです．</p>

<p>あとお気づきでしょうが，tokuhirom さんのブログをこのエントリでは3回も引用しています．<br/>
詰まった時に何を読めば良いかは，聡明な皆様だったらもうお分かりですね！</p>

<h2>それはそうと</h2>

<p>私事で申し訳ありませんが，先日わたくし退学に失敗いたしましたので，<br/>
退学に失敗したことを記念しまして，「退学失敗Night」というイベントが開催されます．<br/>
おそらく渋谷の HUB でただただ飲む会になると思いますので，お暇でしたらご参加下さい．</p>

<p><a href="http://atnd.org/events/44147">http://atnd.org/events/44147</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-01:entry-2013-10-01-encoding.html</id>
<published>2013-10-01T52:52:00+0900</published>
<updated>2013-10-05T11:13:44+09:00</updated>
</entry>
<entry>
<title type="text">Perlの警告と例外を両方握りつぶすtypesterハック</title>
<link href="http://hachiojipm.github.io/entry/2013-10-04-warn-die-hack.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>Perlの警告と例外を両方握りつぶすtypesterハック</h1>

<p>先日<a href="http://unknownplace.org/archives/start-new-company.html">独立</a>された<a href="https://twitter.com/typester">@typester</a>さんのモジュール<a href="http://search.cpan.org/~typester/GitDDL-0.02/lib/GitDDL.pm">GitDDL</a>のコードを見ていたらよくわかんところがありまして、はちぴー御用達のChatサービス<a href="http://yancha.hachiojipm.org/">yancha</a>でいろいろと教えてもらったので、そのご報告です。ちょっとマニアックな話題なので、はてぶとかでどしどし間違いだったりの突っ込みよろしくですー！</p>

<h2>hackishな問題のコード</h2>

<pre><code>    my $version = try { ## ここのコードがhackishでよくわからん！！！
        open my $fh, '&gt;', \my $stderr;
        local *STDERR = $fh;
        $self-&gt;database_version;
        close $fh;
    };
</code></pre>

<p>さてこれが問題のコードです。ここだけパッと見ると、</p>

<ul>
<li>謎にtryが始まって</li>
<li>スカラーリファレンスのファイルハンドル開いて</li>
<li>STDERRにぶち込んで</li>
</ul>


<p>なんじゃこりゃ？と思ったわけです。</p>

<h2>全体をみるとのコード</h2>

<p>一部だけに注目しているとわけがわからんことはしばしばで、yanchaで聞いたらよくよく全体を見たら少しわかります。</p>

<pre><code>sub deploy {
    my ($self) = @_;

    my $version = try { ## ここのコードがhackishでよくわからん！！！
        open my $fh, '&gt;', \my $stderr;
        local *STDERR = $fh;
        $self-&gt;database_version;
        close $fh;
    };

    if ($version) {
        croak "database already deployed, use upgrade_database instead";
    }

    croak sprintf 'invalid version_table: %s', $self-&gt;version_table
        unless $self-&gt;version_table =~ /^[a-zA-Z_]+$/;

    $self-&gt;_do_sql($self-&gt;_slurp(File::Spec-&gt;catfile($self-&gt;work_tree, $self-&gt;ddl_file)));

    $self-&gt;_do_sql(&lt;&lt;"__SQL__");
CREATE TABLE @{[ $self-&gt;version_table ]} (
    version VARCHAR(40) NOT NULL
);
__SQL__

    $self-&gt;_dbh-&gt;do(
        "INSERT INTO @{[ $self-&gt;version_table ]} (version) VALUES (?)", {}, $self-&gt;ddl_version
    ) or croak $self-&gt;_dbh-&gt;errstr;
}


sub database_version {
    my ($self) = @_;

    croak sprintf 'invalid version_table: %s', $self-&gt;version_table
        unless $self-&gt;version_table =~ /^[a-zA-Z_]+$/;

    my ($version) =
        $self-&gt;_dbh-&gt;selectrow_array('SELECT version FROM ' . $self-&gt;version_table);

    if (defined $version) {
        return $version;
    }
    else {
        croak "Failed to get database version, please deploy first";
    }
}
</code></pre>

<h2>問題を抽象化したコード</h2>

<p>一部だけに注目しているとわけがわからんことはしばしばで、yanchaで聞いたらよくよく全体を見たらよくわかりました。deployメソッドの中では、database_versionのリターンが偽が期待されているんだけど、その場合「$self->_dbh->selectrow_array('SELECT version FROM ' . $self->version_table);」でDBIの設定によって警告が出るので、それを/dev/nullに入れる的なことをしたいということなんですね。要するに、以下のコードがその状況を抽象化したもののようです。</p>

<pre><code>#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
binmode STDOUT, ":utf8";
use Try::Tiny;
use Test::More;

sub warn_and_die {
    warn "警告だよ！！";
    die "例外だよ！！";
}

my $res = try {
    open my $fh, '&gt;', \my $stderr;
    local *STDERR = $fh;
    warn_and_die();
    close $fh;
};

ok !$res;

done_testing;
</code></pre>

<h2>考察と疑問</h2>

<p>まぁそれでもよくわからないことはいくつかあるのでそれについてつらつらと。</p>

<h3>スカラーリファレンスを対象にファイルハンドル開けるんだ</h3>

<pre><code>    open my $fh, '&gt;', \my $stderr;
</code></pre>

<p>ここですが、ほとんど見慣れないですよね。</p>

<h3>STDERRにファイルハンドルを突っ込む</h3>

<pre><code>local *STDERR = $fh;
</code></pre>

<p>これですね。よく</p>

<pre><code>local $SIG{TERM} = sub { $cnt = 0 };
</code></pre>

<p>とかやってforkマネージャーみたいなやつで、シグナルハンドラをいじるのはみかけますが、STDERRをオーバーライドするのはぼくは初めてお目にかかりました。</p>

<pre><code>local *STDERR = undef;
</code></pre>

<p>こんな感じに$fhのファイルハンドルわざわざ開かずにundef突っ込んでもよいのでは？という話もありましたがSTDERRはファイルハンドルなのでファイルハンドルをつっこまなければならないようです。</p>

<h3>close $fhのリターンバリューは何か</h3>

<p>tryブロックのリターンバリュー（GitDDLのコードでいう$version、先ほどの簡易コードでいう$resに入るデータ）は、close $fhの返り値になるわけですが（なるよね？）、そんなもの普段意識しないのでちょっと疑問に思いますね。数年後にはtypesterさん並みのハッカーになっているだろう<a href="https://twitter.com/mackee_w">まこぴー</a>さんが、颯爽と<a href="http://perldoc.jp/func/close">closeのドキュメント</a>付で、</p>

<blockquote><p>操作が成功し、PerlIO 層からエラーが報告されなかった場合に真を返します。 引数が省略された場合、現在選択されているファイルハンドルをクローズします。</p></blockquote>

<p>と教えてくれました。</p>

<p>しかし、ファイルハンドルのopen,closeはよく or dieとかつけて例外処理するようなもので、close $fhて失敗したら、どうするのって思ったりもしますが、開いているファイルハンドルがスカラーリファレンスなので失敗することはないという風に解釈しました（がどうなんでしょうか？認識あっているでしょうか？）</p>

<h3>【追記：2013-10-06】close $fhは、バグっぽい</h3>

<p><a href="https://gist.github.com/tokuhirom/6851517">hackish でもなんでもなくて、バグってるだけじゃない?</a>って話をtokuhiromさんかツッコミ頂きました！！ありがとうございます！</p>

<pre><code>my $version = try {
    open my $fh, '&gt;', \my $stderr;
    local *STDERR = $fh;
    my $v = $self-&gt;database_version;
    close $fh;
    $v;
};
</code></pre>

<p>個人的には、close $fhが成功したときに引数を期待していた場合,trueを返すということが知れたのは大変勉強になりましたが、tokuhiromさんに指摘して頂いた通り、コードのわかりやすさと正しさ的には上述のコードがあるべき姿だと思います。close $fhでtrueを返すようにしてなんらかのフラグにするのは場合によってはありかもしれないですが、今回のコードではないなーという話ですね。</p>

<h3>そいういえばlocal $SIG{__WARN__} = sub {};</h3>

<p>よく考えれば、$SIG{__WARN__}をつかえばいい気もしますが、まぁ息を吸うように書いた時の気分ってやつでしょうか。むしろ、$SIG{__WARN__}で代替できない問題があれば是非教えて頂きたいところです。。。</p>

<h2>CPANモジュールのコードを読んで勉強しよう</h2>

<p>必ずしも参考になるコードばかりではないですし、見たコードを実践すべきかどうかは別として、なんかわからないコード見つければいろいろドキュメントみたりあれこれ議論したり調べたりすると、大変Perlや広い意味でのシステム基礎知識全般への理解が深まり大変うれしいですね！</p>

<p><a href="http://yancha.hachiojipm.org/quot?id=141199">typeさんのコード、hackishだから読んでたら新しい発見いろいろある</a>とまこぴーのモヒカン発言に激しく同意しつつ、いくつかのhackishなモジュールで大変お世話になっているtypesterさんの独立を激励する記事でございました！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-10-04:entry-2013-10-04-warn-die-hack.html</id>
<published>2013-10-04T44:44:53+0900</published>
<updated>2013-10-04T23:59:40+09:00</updated>
</entry>
<entry>
<title type="text">SeleniumとPerlの話</title>
<link href="http://hachiojipm.github.io/entry/2013-09-24-selenium.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>SeleniumとPerlの話</h1>

<p>どうも, YAPCが終わって文字通り燃え尽きているpapixです.<br/>
今日は, ｢SeleniumとPerlの話｣ということで, YAPC::Asiaの前夜祭であるLTソンで発表した｢Seleniumで捗る話｣の補足(?)エントリを書いてみようと思います.</p>

<h2>Selenium IDEを導入する</h2>

<p>Seleniumのテストを書く一番簡単な方法は, Selenium IDEを利用する方法です.<br/>
というわけで, まずはSelenium IDEをインストールしましょう.</p>

<p>ちなみにSelenium IDEはFirefoxのアドオンなので, Chrome派の人は仕方ないと思いますがまずはFirefoxの導入からスタートしてください.<br/>
まあ, Firefoxは艦これ用の便利なアドオンがいくつかあるので, 提督エンジニアな方は導入済みだぜ! という感じだと思います.</p>

<p>Selenium IDEは<a href="http://docs.seleniumhq.org/download/">こちら</a>のページからダウンロードすることができます.<br/>
2013年9月24日現在の最新版は2.4.0です. ページ上部にある｢Download latest relased version 2.4.0 relased on...｣の｢2.4.0｣の部分をクリックして, アドオンを導入しましょう.<br/>
導入後, 再起動すればSelenium IDEが使えるようになります.</p>

<p>Perlを利用している人は, ついでに<a href="https://addons.mozilla.org/ja/firefox/addon/selenium-ide-perl-formatter/">Selenium IDE: Perl Formatter</a>というアドオンを入れておきましょう.<br/>
このアドオンを入れることで, 後述のTest::WWW::Seleniumに対応したテストを出力することができます.</p>

<h2>Selenium IDEでテストを作る</h2>

<p>それでは, 早速Selenium IDEでテストを書いてみましょう.<br/>
今回は, LTソンで発表したような｢クッキークリッカーを自動でクリックする｣ことを試すテスト(?)を作ってみます.</p>

<p>Firefoxを起動すると, 右上に｢Se｣と書かれたアイコンがあるはずです.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-icon.png" alt="Seleniumのアイコン" /></p>

<p>これをクリックすると, 次のような画面が開きます(Ubuntu上のFirefoxで動かしているので, Mac OS XやWindowsで動かした場合と若干外観が異なるかもしれませんが, 大まかな構造は同じはずです).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-ide.png" alt="Selenium IDE" /></p>

<p>中央の, ｢テーブル｣と書かれた部分にSeleniumのテストコマンドを入力していきます.<br/>
もっとも手動で入力するのは面倒なので, 自分でブラウザを操作して, その操作に対応したテストコマンドを出力することもできます.<br/>
右上の, 赤い丸が凹んでいれば(?), 操作のテストコマンド化が有効になっています(初期状態でそうなっているはずです).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-cap.png" alt="有効な状態" /></p>

<p>このマーカーをクリックすれば, 凹んだ状態が解除されます. こうなると, Selenium IDEはいくらブラウザを操作しても, その操作を自動的にテストコマンド化しなくなります.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-no-cap.png" alt="無効な状態" /></p>

<p>まずはこの状態にしてから, [クッキークリッカー](http://orteil.dashnet.org/cookieclicker/]のページに移動して, そこからテストコマンドの自動生成を有効にするとよいでしょう.</p>

<p>では, 実際にクッキーをクリックしてみます. すると...</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-cookie-test.png" alt="無効な状態" /></p>

<p>このように, ｢クッキーをクリックする｣テストコマンドが生成されました!<br/>
上部中央の, ｢現在のテストケースを実行｣ボタンを押せば, 実際にそのテストを実行することができます.</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-exec.png" alt="｢現在のテストケースを実行｣ボタン" /></p>

<p>おそらく, クッキーが自動でクリックされ, クッキーの枚数が1枚増えるはずです.<br/>
更に, Selenium IDEの方を見ると, 成功したコマンドの部分の背景が緑色になっているはずです(ちなみに失敗だと, 背景が赤色になります).</p>

<p><img src="http://hachiojipm.github.io/static/image/selenium-success.png" alt="成功!" /></p>

<p>というわけで, 次はこのテストコマンドをTest::WWW::Seleniumに対応したコードに出力してみましょう.</p>

<h2>テストコマンドの出力と実行</h2>

<p>Selenium IDEの｢ファイル｣から｢テストケースをエクスポート｣, ｢Perl｣と選ぶと, Test::WWW::Seleniumに対応したスクリプトを出力することができます.<br/>
先程のクッキーをクリックするテストの場合, 次のようなスクリプトになります.</p>

<pre><code>use strict;
use warnings;
use Time::HiRes qw(sleep);
use Test::WWW::Selenium;
use Test::More "no_plan";
use Test::Exception;

my $sel = Test::WWW::Selenium-&gt;new( host =&gt; "localhost", 
                                    port =&gt; 4444, 
                                    browser =&gt; "*chrome", 
                                    browser_url =&gt; "http://orteil.dashnet.org/" );

$sel-&gt;open_ok("/cookieclicker/");
$sel-&gt;click_ok("id=bigCookie");
</code></pre>

<p>というわけで, これを実行する為の環境を作りましょう.</p>

<h3>Test::WWW::Seleniumの導入</h3>

<p>Test::WWW::Seleniumの導入は簡単で, cpanm等で<code>WWW::Selenium</code>を入れればOKです.</p>

<pre><code>$ cpanm WWW::Selenium
</code></pre>

<h3>Selenium Serverの用意</h3>

<p>で, もう1つ用意する必要があるのが｢Selenium Server｣.<br/>
Test::WWW::Selenium及びWWW::Seleniumは, Selenium Serverと呼ばれるサーバに処理を投げて, Selenium Serverがブラウザを起動し, 投げられた処理を実行して, その結果を返す... という流れでSeleniumを動かします.<br/>
Selenium Serverは, Selenium IDEと同じく<a href="http://docs.seleniumhq.org/download/">こちら</a>のページからダウンロードすることができます.<br/>
現時点での最新版は2.35.0なので, ページ中央部の｢Download version 2.35.0｣をクリックして, Selenium Serverをダウンロードします.</p>

<p>あとは, Javaさえ導入できていれば, <code>java -jar selenium-server-standalone-2.35.0.jar</code>でSelenium Serverを起動することができます.<br/>
あとは, 先程生成したスクリプトを実行すれば, 自動的にブラウザが開き, クッキーを叩いてくれることでしょう!</p>

<h3>WWW::Seleniumの利用</h3>

<p>Test::WWW::Seleniumを使わずに, WWW::Seleniumを使ってコマンド風に(?)使うには,</p>

<ul>
<li><code>Test::WWW::Selenium-&gt;new( ... )</code>を<code>WWW::Selenium-&gt;new( ... )</code>に書き換える</li>
<li>テストメソッドの<code>_ok</code>を取り除く</li>
<li>最初に<code>$sel-&gt;start;</code>を付加する</li>
</ul>


<p>...だけでOKのようです.<br/>
なので, クッキーを叩く部分を自動化(永遠に叩き続ける)するには,</p>

<pre><code>use strict;
use warnings;
use WWW::Selenium;

my $sel = WWW::Selenium-&gt;new(
    host =&gt; "localhost", 
    port =&gt; 4444, 
    browser =&gt; "*firefox", 
    browser_url =&gt; "http://orteil.dashnet.org/",
);

$sel-&gt;start;
$sel-&gt;open("/cookieclicker/");
while (1) {
    $sel-&gt;click("id=bigCookie");
}
</code></pre>

<p>こんな感じにしてやればOKのようです.</p>

<h2>更に極めん, Selenium道!?</h2>

<p>という訳で, クッキークリッカーを例に, Selenium IDEとSelenium Server, そしてWWW::Selenium及びTest::WWW::Seleniumの使い方を簡単になぞってみました.</p>

<p>Seleniumを使えば, ブラウザを使ったWebアプリのテストが簡単に実現できるので, ｢まずは必要な機能がちゃんと動くかだけでもテストしないと...｣という場合とかに活用できそうです.<br/>
機会があれば, このHachioji.pm 日めくりテックトークなり, 自分のブログなりでSeleniumネタを紹介していきたいと思っておりますので, 乞うご期待!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-26:entry-2013-09-24-selenium.html</id>
<published>2013-09-24T59:59:00+0900</published>
<updated>2013-09-26T00:11:51+09:00</updated>
</entry>
<entry>
<title type="text">Perl6をかいま見るためにSeisを使ってみる</title>
<link href="http://hachiojipm.github.io/entry/2013-09-25-get_started_seis.html" />
<author>
<name>mackee</name>
</author>
<content><![CDATA[<h1>Perl6をかいま見るためにSeisを使ってみる</h1>

<p><a href="http://mackee.hatenablog.com/entry/2013/09/22/211305">自分の感想ブログ</a>でFuture Perlのトーク聞いて思ったこととか書いてたんですが、<a href="https://metacpan.org/module/Seis">Seis</a>の話はそういえば全然していなかったなーって思って、じゃあ実際にどうなのかって思って、おもむろに<a href="http://metacpan.org/">metacpan</a>でSeisって打ったら上がっていたので勢いでcpanmしてみました。</p>

<p>で、どうなったかというと。</p>

<pre><code>[- o -] $ cpanm Seis
--&gt; Working on Seis
Fetching http://www.cpan.org/authors/id/T/TO/TOKUHIROM/Seis-0.12.tar.gz ... OK
Configuring Seis-0.12 ... OK
Needs perl 5.018000, you have 5.016003
! Installing the dependencies failed: Installed version (5.016003) of perl is not in range '5.018000'
! Bailing out the installation for Seis-0.12
</code></pre>

<p>マジかよ、Perl 5.18以上じゃないとダメ！　とはとんがってる。
というわけでおもむろにPerl5.18.1を入れる</p>

<pre><code>[- o -] $ plenv install 5.18.1
...
[- o -] $ plenv local 5.18.1
[- o -] $ plenv install-cpanm
...
</code></pre>

<p>で、cpanm Seis</p>

<pre><code>[- o -] $ cpanm Seis
--&gt; Working on Seis
Fetching http://www.cpan.org/authors/id/T/TO/TOKUHIROM/Seis-0.12.tar.gz ... OK
Configuring Seis-0.12 ... OK
Building and testing Seis-0.12 ... FAIL
! Installing Seis failed. See /Users/mackee/.cpanm/work/1379948870.12803/build.log for details. Retry with --force to force install it.
</code></pre>

<p>oops、build.logを見てみる</p>

<pre><code>[- o -] $ less /Users/mackee/.cpanm/work/1379948870.12803/build.log
...
t/spec/roast/S32-io/file-tests.t ................................ ok
Can't locate Path/Tiny.pm in @INC (you may need to install the Path::Tiny module) (@INC contains: CODE(0x7ff96a8386c0) /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/lib /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/arch /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/_build/lib /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1/darwin-2level /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1 /Users/mackee/.plenv/versions/5.18.1/lib/perl5/5.18.1/darwin-2level /Users/mackee/.plenv/versions/5.18.1/lib/perl5/5.18.1 .) at /Users/mackee/.cpanm/work/1379948870.12803/Seis-0.12/blib/lib/Seis/IO/Path.pm line 50.
t/spec/roast/S32-io/io-path.t ...................................
Dubious, test returned 2 (wstat 512, 0x200)
Failed 8/13 subtests
t/spec/roast/S32-io/path.t ...................................... ok
...
</code></pre>

<p>見てみると何故かPath::Tinyがないよとテストで言われていてコケているみたい。他の人も一緒なのかなと思って<a href="http://cpanstesters.org/">CPANTesters</a>見に行ったら他の人も同じ理由でコケているのでとりあえず入れる！</p>

<pre><code>[- o -] $ cpanm Path::Tiny
...
</code></pre>

<p>ちゃんと入ったのでSeisもう一度</p>

<pre><code>[- o -] $ cpanm Seis
...
Successfully installed Seis-0.12
1 distribution installed
</code></pre>

<p>よし、OK！
はい、ここまででcpanmで一発で入らなくてもくじけない編(裏タイトル)は以上です。</p>

<p>じゃあSeis使ってみる。トークではseisコマンドでREPLに入っていたので</p>

<pre><code>[- o -] $ seis
seis&gt;
</code></pre>

<p>なんか入れたっぽい。<a href="http://mackee.hatenablog.com/entry/2013/09/22/211305">僕のブログで前やった</a>Reduction operatorを使ってみる。</p>

<p><a href="http://perlcabal.org/syn/S03.html#Reduction_operators">Reduction Operators</a></p>

<pre><code>seis&gt; [+] 1..100
$VAR1 = 5050;
</code></pre>

<p>やばい、ていうかめちゃくちゃ早い。</p>

<pre><code>[- o -] $ time perl6 -e 'say [+] 1..100'
5050
perl6 -e 'say [+] 1..100'  0.61s user 0.14s system 99% cpu 0.750 total
[- o -] $ time perl -E '$a += $_ for 1..100; say $a'
5050
perl -E '$a += $_ for 1..100; say $a'  0.02s user 0.03s system 51% cpu 0.111 total
[- o -] $ time seis -e '$a = [+] 1..100; say $a'
5050
seis -e '$a = [+] 1..100; say $a'  0.15s user 0.04s system 97% cpu 0.196 total
</code></pre>

<p>上からRakudo Star + Parrot、Perl 5.16.3、Seis 0.12 + Perl 5.18.1でございます。
十分実用範囲内の速度な気がします。</p>

<p>Perl6だとこんなかんじで仮引数の型を指定してやることもOK</p>

<p><a href="http://perlcabal.org/syn/S02.html#Parameter_types">Parameter Types</a></p>

<pre><code>[- o -] $ seis -e 'sub id(Int $n) { return $n }; my $a = id("aaa"); say $a'
Can't locate object method "throw" via package "Seis::Exception::ArgumentType" (perhaps you forgot to load "Seis::Exception::ArgumentType"?) at -e line 3.
</code></pre>

<p>ちゃんとコケてくれてますね。</p>

<p>でもまだPerl6のすべての仕様が実装されているわけではなさそうで、このように返り値の型指定をするとコケたりします。</p>

<p><a href="http://perlcabal.org/syn/S02.html#Of_types">Of types</a></p>

<pre><code>[- o -] $ seis -e 'sub id(Int $n) returns Int { return $n }; my $a = id(1); say $a'
Can't parse -e:
Syntax error! Around:
sub id(Int $n) r
   at /Users/mackee/.plenv/versions/5.18.1/lib/perl5/site_perl/5.18.1/darwin-2level/Seis/Compiler.pm line 56.
</code></pre>

<p>でもXSやC、そしてPerl5で書かれているので既存の開発者でもPerl6を理解するための窓口にはなりやすそうです。Authorの<a href="https://twitter.com/tokuhirom/">@tokuhirom</a>さんが言われているようにPerl6の機能をPerl5にフィードバックしてPerl5を進化させるのにはもってこいの実験室だと思われます。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-25:entry-2013-09-25-get_started_seis.html</id>
<published>2013-09-25T19:19:27+0900</published>
<updated>2013-09-25T01:27:59+09:00</updated>
</entry>
<entry>
<title type="text">phpcon2013所見</title>
<link href="http://hachiojipm.github.io/entry/2013-09-23-phpcon2013.html" />
<author>
<name>Hiroyuki Akabane</name>
</author>
<content><![CDATA[<h1>phpcon2013所見</h1>

<p>こんにちは！！一日忘れていて遅れてしまったhirobanexです！！！YAPC::Asia2013が行われる前の週にPHPカンファレンスっていうPHPのお祭りがやっていたのはご存知かな？？今回、Perl Mongerのphper初心者として<a href="http://phpcon.php.gr.jp/w/2013/">PHPカンファレンス2013</a>に参加したので、その感想をレポートするよ！！</p>

<h2>YAPC::Asia2013 vs PHPカンファレンス2013</h2>

<p>きっと、このブログの読者はPHPカンファレンスに行ったことがある人より、YAPC::Asia2013に行ったことがある人が多いと思うので、その前提で両社を比較してみるよ！！</p>

<p>phpconはYAPC::Asiaに比べて</p>

<ul>
<li>参加人数：多い</li>
<li>参加費：無料</li>
<li>総セッション数：同じか少ない</li>
<li>開催日数：少ない（1日だけ）</li>
<li>企業の宣伝：ガン攻めできる</li>
</ul>


<p>という気がしました。セッションの傾向としては、デザイナーとかホームページ制作者からの視点が多分に入っていたり、PHPの内部実装についての話などが多い傾向にあるように感じました。またYAPC::Asiaに比べて「こういうの作ったんだぜ！みんな使ってよ！！」って感じなかった気がします。</p>

<p>あと、YAPCだと公式ページにセッションの内容を詳しく書かれていて</p>

<ul>
<li>タイトル</li>
<li>説明</li>
<li>タグ（ビギナー向け or 中級者向け、DB系 or アプリケーション、etc）</li>
<li>YouTube</li>
<li>slide</li>
</ul>


<p>結構参考になりまくりなんだけど、PHPカンファレンスはそういうことがなくて後で見返すの大変だなーと思う一方、リアルな現場に参加した感の貴重さを味わえるのかなーと思いました。</p>

<h2>2013の個別のセッションについて</h2>

<p>ぼくが参加したセッションは正直個人的に外れ感があったので、微妙だったんですが、Perlユーザーでphp初心者の観点を中心に考えると、以下のセッションのYouTubeなりスライドなりをみるのが興味深いと思いました。</p>

<ul>
<li><a href="http://www.slideshare.net/hirokawa/php-con2013ub">基調講演 PHPの今とこれから2013</a> : phpって毎年バージョンアップすることになったんですって！知ってました？</li>
<li><a href="https://speakerdeck.com/yandod/cakephpdemoshi-eru-composerwohuo-yong-sitamodannakai-fa-shou-fa">Composerを活用したモダンなCakePHPアプリの開発手法</a> : phpにもcarton的なのってあるんですよ！そして、pear後のpackagist.orgってcpan的なのあるんですよ！知ってました？</li>
<li><a href="http://www.slideshare.net/shin1x1/vagrant-php">Vagrantで作るPHP開発環境 [実践編]</a> : phpもVagrantで開発環境作るんですって！知ってました？</li>
<li><a href="http://www.slideshare.net/MiuraKatsu/ss-26186401">FuelPHPで３種のProfilerを使ってみた</a> : PHPには結構いけるプロファイラーあったりするんですよ！</li>
</ul>


<p>ちなみに公式ではなく<a href="http://unsolublesugar.com/20130915/005329/">PHPカンファレンス2013 &amp; WordCamp Tokyo 2013 講演資料まとめ</a>というのがあるので実際のところは後から見放題で大変感謝。</p>

<h2>PHPについても含めながらダラダラと</h2>

<p>なんか、LLってだいたい書き方同じだよなーとか、rubyとかpythonの超入門をみて思っていたんですが、いざphpでちょっと詳しく触りだすと、Perlでやっているいつものアレの書き方できなくて困りますね。(unlessとか、defined-orとか)</p>

<p>それでも、ComporserでCartonみたいなことできるし、開発向けビルドインサーバーも入っていちいちApacheとかいれなくても簡単な確認できるようになったし、名前空間もできたし、phpenvっていうのがよりまともになって流行りだせば1つのOSに1つのphp.iniでグローバル設定乙みたいなことなくなると思いますし、より手軽に開発できるようになっていくんじゃないでしょうかねー。</p>

<p>あと、PHPはモヒカンみたいな人、少ない気がしますねー。できる人はたくさんいるはずなんですが、あくまでツールのユーザー視点が強い気がします。上述しました「こういうの作ったんだぜ！みんな使ってよ！！」って感じなかった気がするところにも影響している気がするのですが、Perlだとモヒカンみたいな人たちがトークもしてLTもして、すげー強烈なイメージを植え付けていくんですが、そういうところの印象が今一つ弱かったですね。Packagistが普及していくと、そのあたりが強くなっていくんでしょうかねー。</p>

<p>とりあえず、カンファレンスの動員人数としては2000人規模らしいので、なんですかね、それで無料ってやっぱりすごいですよね。</p>

<h2>終わりに　～ぼっちではなくまたどこかへ～</h2>

<p>今回は、Hachioji.pmの仲間のuzullaさんやkkotaro0111さんが参加されていたので、全然ぼっちでもなかったし、やっぱり言語関係なく出会える仲間がいるとうれしいですね！！</p>

<p>後、正直高々一回では、しっかりと比較することは難しんですが、いろいろところに出向いても仲間がいるとうれしいですよね！！</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-18:entry-2013-09-23-phpcon2013.html</id>
<published>2013-09-23T23:23:00+0900</published>
<updated>2013-09-23T20:35:21+09:00</updated>
</entry>
<entry>
<title type="text">最近のPerlに足りないモノ</title>
<link href="http://hachiojipm.github.io/entry/2013-09-17-perl_shortage.html" />
<author>
<name>ichigotake</name>
</author>
<content><![CDATA[<h1>最近のPerlに足りないモノ</h1>

<p>おはこんばんちは、<a href="https://twitter.com/ichigotake">ichigotake</a> です</p>

<p>昨日までのハチピーテックブログは、困っている人を助けるような記事が連続していてとてもよい流れですね</p>

<p>今日は自分の見聞きした最近のPerlに足りないモノをいくつか書き連ねていこうと思います(といっても2,3点ほどですが</p>

<p>自分は日頃そんなにPerlをメインに活動しているわけではないですし、オープンソース周りも目立った活動はあまりしていません</p>

<p>困った時に相談しやすい人たちのいる環境がPerl中心だったり、知り合いにPerlバリバリの人だと思われたりしている中で、Perlに足りないモノに関する話題がちょくちょく出てきます</p>

<p>今日はその中で特に多い意見を書き出してみました</p>

<p>前述の通り、あまりエッジなエンジニアではない、知り合いのハイレベルなやりとりを横目に見ている、Perlハッカーと言えるレベルではないおきらくPerl Mongerからの視点である事をご容赦ください！</p>

<h2>新しい情報を手に入れる場所</h2>

<p>比較的新しめの流儀やツールを使ったPerlの事を巷では「モダンPerl」と言うらしいですが、この「モダンPerl」という単語に馴染みの無い方からはほんとに無縁な単語のようです</p>

<p>ごくたまに会う母校の先生や先輩との会話では、しばしば以下の様なやりとりが繰り返されています</p>

<ul>
<li><p>最近のPerlを調べようと思っても5年10年前の馴染みのサイトばっかり引っかかるんだよねぇ</p></li>
<li><p>PythonとかRubyはニュースでよく見かけるしPHPは仕事でやってるからなんとなくわかるけど、Perlって全然見かけないよね</p></li>
</ul>


<p>他にもいくらかあった気がしますが、だいたいこの2つに集約されている感じがあります</p>

<p>言われてみれば、自分も初めてPerlとふれあった頃に検索したようなワードで検索してみると、いわゆるモダンPerlな情報はあまり引っかからずにPerl/CGIと言われる時代のものばかりで少々目新しさに欠けます</p>

<p>しかし、最近は<a href="http://perl-entrance.org/">Perl入学式</a>,<a href="http://www.perl-beginners.org/">Perl Beginners</a>と、イベント自体も少しずつ注目されていたり、</p>

<p>検索されやすい情報サイトを作ろう、本を出そう、という活動もちらほら見かけたりします</p>

<p>このあたりの活動からライトな人でも取っ付きやすいよう情報が整理されたりするんでしょうか</p>

<p>少し期待しつつ応援しております</p>

<p>そういえば、以前にこのブログで<a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る（かもしれない）Perl 関連の情報ソース一覧</a>という記事がありましたね</p>

<p>新しい情報を求めてる人にはこのあたりをオススメするとよさそうです</p>

<h2>Perl製のモノを公開する場所</h2>

<p>PHPなら場所を選ばなければいろんなレンタルサーバー、いろんなPaaSで標準サポートされていたり、RubyはHerokuでRailsアプリケーションを公開できたりしますね</p>

<p>でもPerlでは作ったPSGIアプリケーションを公開したいけどどうしたらいいの、という質問をたまに見かけます。</p>

<p>Perl Beginners、Perl入学式等のイベントでもちょくちょく話題になっているようですが、今のところあまりいい話は聞きません</p>

<p>Perl入学式では最終的に簡単なPSGIアプリケーションを作成する事がゴールのようですが、せっかく覚えた事を気軽に公開できる場所がないのも少し寂しいですね</p>

<p>話に聞く限りだと、さくらVPS等のお手頃価格なVPSに立てて…という方が多いようですが…</p>

<p>Herokuのように自前でサーバーを用意しなくてもPSGIサーバーを立てられるようになったらどんな反響が起こるのか、気になって少しわくわくしますね</p>

<h2>おわりに</h2>

<p>今日は自分の見聞きする足りないモノの中で特に印象に残っている意見を記事にしました。他にも足りないモノはたくさんあるだろうし、ライトな目線・アンテナからの意見なので齟齬も多少あるかもしれません</p>

<p>楽しそうにしてる人を追いかけるのはとても好きなので、Perl界隈にもそういったビギナーが増えるととてもうれしいですね</p>

<p>明日からはどんなお役立ち情報が投稿されるんでしょうか</p>

<p>ではおやすみです！</p>

<h2>足りない宣伝</h2>

<p>話は変わりまして…</p>

<p>今日は火曜日、明日は水曜日、じゃぁ明後日は…?</p>

<p>一年に一度のおまつりイベント、 <strong>YAPC::Asia前夜祭です！ヾ(>ヮ&lt;*)ﾉﾞ</strong></p>

<p>前夜祭では去年大好評だったLT損が復活するようですよ！</p>

<p>LTソンは話題をPerlに絞らず、喋りたい人がみんなの前で交代しながら5分間おしゃべりする場です！</p>

<p>参加には金曜・土曜のYAPC本編のチケットが必要ですが、残念ながら完売してしまっているようです</p>

<p>噂では当日券があるか怪しいそうなので、ご縁がある方はチケットが余ってる知り合いから譲り受けるかなどして行くチャンスもあるかもしれませんね！</p>

<p>9/19 木曜日、18:00から、慶應義塾日吉キャンパスにて開催です！ご縁がある方はぜひ！</p>

<p><a href="http://ltthon-yapc2013.hachiojipm.org/">LTソン ホームページ</a></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-18:entry-2013-09-17-perl_shortage.html</id>
<published>2013-09-17T59:59:00+0900</published>
<updated>2013-09-19T00:08:02+09:00</updated>
</entry>
<entry>
<title type="text">perlでTravisCI、Coverallsを使ってみる</title>
<link href="http://hachiojipm.github.io/entry/2013-09-18-perl-travisci.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>perlでTravisCI、Coverallsを使ってみる</h1>

<p>最近東京に戻ってきた<a href="https://twitter.com/Spring_MT">Spring_MT</a>です。</p>

<p>perlで自分でモジュールを書く準備をと思って、TravisCI、Coverallsを使う方法を調べてみました。
だいぶperlからは離れていたので、perlを入れるとことから調べてます。</p>

<h2>plenvを入れる</h2>

<p>今回はplenvを使ってperlを入れました。</p>

<p><a href="https://github.com/tokuhirom/plenv">plenv</a></p>

<p>plenvでperlを入れて、cpanmも入れていきます。</p>

<pre><code>% git clone git://github.com/tokuhirom/plenv.git ~/.plenv
% echo 'export PATH="$HOME/.plenv/bin:$PATH"' &gt;&gt; % ~/.zshrc
% echo 'eval "$(plenv init -)"' &gt;&gt; ~/.zshrc
% exec $SHELL -l
% plenv install 5.18.0
% plenv local 5.18.0
% plenv rehash
% plenv install-cpanm
% plenv rehash
</code></pre>

<h2>Minillaを使ってひな形を作る</h2>

<p>最初はModule::Installを使いながら試していたのですが、TravisCIでこけて先に進めず。。。</p>

<p>で、<a href="http://lingr.com/room/perl_jp/archives/2013/08/29#message-16407055">この会話</a>で勧められた通り、Minillaを使って作ってみました。</p>

<p><a href="https://github.com/tokuhirom/Minilla">Minilla</a>
<a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></p>

<pre><code>% cpanm install Minilla
% plenv rehash
% minil new Sample
% cd Sample
% git add .
% git commit
</code></pre>

<p>Minillaはこれだけで新しいモジュールのひな形ができちゃいます！
ここまでできたら、githubでレポジトリを作って、TravisCIのサイトでリポジトリをsyncし、TravisCIの設定をonにしましょう。
TravisCI設定はこちらがめっちゃ参考になります。</p>

<p><a href="http://sue445.hatenablog.com/entry/2013/06/01/170607">GithubにあるリポジトリをTravis CI連携する手順 #junitbook</a></p>

<p>Minillaで作ったモジュールのテストを手元で走らせる場合は、minil testを実行すると思うのですが、TravisCIではデフォルトで下記コマンドでテストが実行されます。</p>

<pre><code>perl Build.PL &amp;&amp; ./Build test 
</code></pre>

<p><a href="http://about.travis-ci.org/docs/user/languages/perl/#Module%3A%3ABuild">Building a Perl Project</a></p>

<p>Minilaで作ったデフォルトのBuild.PLを使うと、TravisCIではxt/配下のテストは走らないのです。</p>

<p>ここまでできたら、pushします。
Minillaで作ったモジュールには既に .travis.yml が用意されているので、何もしなくてもtravisが動きます。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_1.jpeg" alt="image" />
<a href="https://travis-ci.org/SpringMT/Sample">TravisCI SpringMT/Sample</a></p>

<p>うまくいきました！</p>

<p>バッジも貼りましょう。
TravisCIのビルド結果ページ右上のbuild passingの画像をクリックすると、そのまま貼り付けられる状態のテキストが表示されるので、それをコピーしてREADME.mdに貼り付けます。</p>

<p>ついでに、Coverallsも追加しちゃいましょう。</p>

<p><a href="https://coveralls.io">Coveralls</a></p>

<p>まずは、TravisCIと同様に、Coverallsにリポジトリを登録してください。
perlの場合は、Devel::Cover::Report::Coverallsを使えば、Coverallsに簡単にカバレッジの情報を登録できます。</p>

<p><a href="http://memo.fushihara.net/post/48086316824/coveralls-perl-project">coverallsをperlなprojectで使えるようにしてみた</a></p>

<p>Coverallsに情報を投げるために .travis.ymlに下記を追記してください。</p>

<pre><code>before_install:                                                                                                                                 
  cpanm -n Devel::Cover::Report::Coveralls
script:
  perl Build.PL &amp;&amp; ./Build build &amp;&amp; cover -test -report coveralls
</code></pre>

<p>pushすると、こんな感じになると思います。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_2.jpeg" alt="image" /></p>

<p><a href="https://coveralls.io/r/SpringMT/Sample">Coveralls SpringMT / Sample</a></p>

<h2>最後に</h2>

<p>最終的に少しテストを追加しました。</p>

<p><a href="https://github.com/SpringMT/Sample">GitHub SpringMT/Sample</a></p>

<p>githubにページはこんな感じでバッジも出ています。</p>

<p><img src="http://hachiojipm.github.io/static/image/perl_minilla_3.jpeg" alt="image" /></p>

<p>これでモジュールを書き始める準備が出来上がったので、なんか書きます。</p>

<h2>ちょっとハマったところ</h2>

<p>新しく作ったファイルにテストを書いてminil testを実行したけど、テストがされなくてなんでだろうと思ってたら、git管理下じゃないからだった。。。。</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-19:entry-2013-09-18-perl-travisci.html</id>
<published>2013-09-18T57:57:00+0900</published>
<updated>2013-09-19T00:08:02+09:00</updated>
</entry>
</feed>
