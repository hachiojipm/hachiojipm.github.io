<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hachioji.pm 日めくりテックトーク</title>
<link rel="alternate" href="http://hachiojipm.github.io/" />
<author>Uzulla</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.10">Perl Riji</generator>
<id>tag:hachiojipm.github.io,2013-09-07:</id>
<updated>2013-09-12T21:57:41+09:00</updated>
<entry>
<title type="text">「Hachioji.pm 日めくりテックトーク」について</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-01.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>「Hachioji.pm 日めくりテックトーク」について</h1>

<p>Hachioji.pmが主催する, 日替わりで何らかのテックトークが投稿されていくカレンダーのようなものです.<br/>
書きたい人からじゃんじゃん書いていって下さい. Hachioji.pm以外の方も大歓迎です!</p>

<p>記事を書いてみたい人は, 以下の予定表に名前を書き込んでおいて下さい.</p>

<h2>おやくそく</h2>

<ul>
<li><code>git push -f</code>や<code>git commit -am</code>は厳禁. 同志ソムーリンに粛清されます.</li>
<li>ブログのネタは何でもよいのではないでしょうか. ただ炎上だけは勘弁な.</li>
<li>「Hachioji.pmメンバーによるテックブログ」というよりは「Hachioji.pmが主催するテックブログ」という雰囲気なので, Hachioji.pm以外の方もどしどし書いていきましょう.

<ul>
<li>書いてみたい! と思った方はHachioji.pmっぽい人に声をかけてみて下さい.</li>
</ul>
</li>
<li>「Hachioji.pm 日めくりテックトーク, 楽しそう!」という発言を不用意にしてしまうと, papixに強制的にアサインされる事例が多発しています.</li>
<li>楽しくやりましょう.</li>
</ul>


<h2>今後の担当(予定)</h2>

<table>
<thead>
<tr>
<th>日時           </th>
<th> 筆者       </th>
<th> タイトル</th>
</tr>
</thead>
<tbody>
<tr>
<td>2013/09/13(金) </td>
<td> ytnobody   </td>
<td> 未定</td>
</tr>
<tr>
<td>2013/09/14(土) </td>
<td> songmu     </td>
<td> 未定</td>
</tr>
<tr>
<td>2013/09/15(日) </td>
<td> papix      </td>
<td> 未定</td>
</tr>
<tr>
<td>2013/09/16(月) </td>
<td> xtetsuji   </td>
<td> 未定</td>
</tr>
<tr>
<td>2013/09/17(火) </td>
<td> ichigotake </td>
<td> 未定</td>
</tr>
<tr>
<td>2013/09/18(水) </td>
<td> Spring_MT  </td>
<td> 未定</td>
</tr>
</tbody>
</table>


<h2>これまでの記事</h2>

<table>
<thead>
<tr>
<th>日時           </th>
<th> 筆者     </th>
<th> タイトル</th>
</tr>
</thead>
<tbody>
<tr>
<td>2013/09/12(木) </td>
<td> uzulla   </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-12-01.html">PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない) </a></td>
</tr>
<tr>
<td>2013/09/11(水) </td>
<td> boolfool </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-11-01.html">購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</a></td>
</tr>
<tr>
<td>2013/09/10(火) </td>
<td> moznion  </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</a></td>
</tr>
<tr>
<td>2013/09/09(月) </td>
<td> papix    </td>
<td> <a href="http://hachiojipm.github.io/entry/2013-09-09-02.html">「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</a></td>
</tr>
</tbody>
</table>

]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-01.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-12T21:57:41+09:00</updated>
</entry>
<entry>
<title type="text">PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</title>
<link href="http://hachiojipm.github.io/entry/2013-09-12-01.html" />
<author>
<name>uzulla</name>
</author>
<content><![CDATA[<h1>PHP Builtin serverで、dot(.)が入るURLで挙動が変わってつらい(かもしれない)</h1>

<p>みなさん今日もPHP書いてますか？（挨拶）ここのブログの一番したにAuthorとかかいてあるけど、実際には初めてこのブログに触る<a href="http://twitter.com/uzulla/">uzulla</a>です。</p>

<p>まこぴーさんファンの皆様、もうしわけございません、まこぴー氏多忙につき繰り上げの代替原稿です。</p>

<p>普段は<a href="http://uzulla.hateblo.jp/">自分のブログ</a>に記事かいてるのですが、なんか寄稿しないと気まずいので寄稿します。</p>

<p>私は今日も元気にPHPをかいてます。勿論イヤイヤなどではありません、私はPHPerです！</p>

<h2>ところで</h2>

<p>来週Perlのお祭りである所の<a href="http://yapcasia.org/2013/">YAPC::Asia Tokyo 2013</a>が開催されますね、最高のイベントです、皆さん行くと思います。
私は前夜祭にて、<a href="http://hachiojipm.org/">hachioji.pm</a>の面々と、LTソン::Tinyを開催します</p>

<p><a href="http://ltthon-yapc2013.hachiojipm.org/">http://ltthon-yapc2013.hachiojipm.org/</a></p>

<p>先日からトーカーを募集しておりますが、今のところ去年同様に非常にスロースタートな感じで、人があつまらなくて主催の胃がいたいので、YAPC前夜祭に参加する方で、LTしたいかもしれない！という方は是非お待ちしております。</p>

<p>去年同様、飛び込みも（出切る範囲で）受け入れたいと思いますので、一身上や宗教上の理由などでATNDに登録できなくとも、当日は是非宜しくお願い致します。</p>

<p>あ、YAPCはPerlの祭典ですけど、LTソンはPHPでも全然いいですよ。去年もPerlまったく関係ない楽しいトーク沢山ありましたし。なにせ司会がPHPerですから、PHPなら優遇する可能性すらあります。（というか去年、PHPだけは居なかった感）</p>

<h2>さて本題もおわりましたので、余談です。</h2>

<p>PHP 5.4からはいった、PHPのBuilt-in Server，皆さん活用していることとおもわれます。してますよね？
してないし、phpなんか今後も使う気がない、という人はここまでの宣伝もよんでいただけましたでしょうし、有り難うございました、お気を付けてお帰りください。</p>

<p>さて、知らない人に説明すると、DocRootに相当するDirに移動してから</p>

<pre><code>php -S localhost:1234
</code></pre>

<p>などとすると、Httpdがたちあがって、そのままPHPや、ウェブサイトの開発ができちゃう、というもの凄い便利な憎いやつです。
世の中には「ワンライナーでHTTPを立ち上げて確認」などいうお役立ち情報に注目があつまる事がありますが、PHPならコマンド一発ですよ、まったくすごい。</p>

<p>私も最近はできるだけBSで開発するようになっています、楽なので。
もうApache+mod_phpの環境を何個もならべるのには疲れたのですよ…。</p>

<p>ただ、今現在ちょっとしたところで躓いたので、その話です。
ちなみに、わたし は今php5.5.1で作業をしています。</p>

<h2>PHP Builtin Serverの挙動</h2>

<p>PHP Builtin serverは、</p>

<pre><code>http://hachiojipm.github.io/hogehoge/test
</code></pre>

<p>などしてアクセスしたとき、内部的にindex.phpをよびだすように</p>

<pre><code>/index.php/hogehoge/test
</code></pre>

<p>等と変換してくれて、世間一般的に.htaccessとかで設定される感じの、まあ良い感じにしてくれるのですが、</p>

<p>この時、</p>

<pre><code>/hogehoge/pseudo_file_name.html
</code></pre>

<p>とかURLにドットがはいると、index.phpに渡されずに、静的ファイルを探しに行ってしまいます。当然404になってつらい</p>

<p>その場合、</p>

<pre><code>php -S localhost:1234 index.php
</code></pre>

<p>などとして、ルータのPHPファイルを強制指定してあげると良いよ〜というのが定番の解決策です。</p>

<p>でも、これやると全部がPHPの処理になっちゃうから静的ファイルどうするの？不便だ！とおもわれるかもしれません。
大丈夫です、余り細かく説明はしませんが、もし静的ファイルを送りたいときは、<code>return false</code>でおとすと
再度PHPがファイルをさがしにいってくれるので、ちょっとした追記で心配ご無用の助です（本エントリ後半に、軽いサンプルコードあります）。</p>

<p><a href="http://php.net/manual/pt_BR/features.commandline.webserver.php">http://php.net/manual/pt_BR/features.commandline.webserver.php</a></p>

<h2>しかし…</h2>

<p>そういう風に説明はされているんですけど、
.がはいってると、どうも$_SERVERまわりの変数が、.なしとくらべてかわってしまうのですよね、具体的にはPATH_INFOがおかしくなる。</p>

<p>例えば,</p>

<pre><code>&lt;?php
var_dump($_SERVER);
</code></pre>

<p>をindex.phpとしておいてある場合に、</p>

<pre><code>http://hachiojipm.github.io:3333/
-出力-
array (size=21)
（略
  'REQUEST_URI' =&gt; string '/' (length=1)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/index.php' (length=10)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PHP_SELF' =&gt; string '/index.php' (length=10)
（略
</code></pre>

<p>と</p>

<pre><code>http://hachiojipm.github.io:3333/test
-出力-
array (size=22)
（略
  'REQUEST_URI' =&gt; string '/test' (length=5)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/index.php' (length=10)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PATH_INFO' =&gt; string '/test' (length=5)
  'PHP_SELF' =&gt; string '/index.php/test' (length=15)
（略
</code></pre>

<p>以上二つは良いのですけれど、ここで<code>test.php</code>などとしてみると</p>

<pre><code>http://hachiojipm.github.io:3333/test.php
-出力-
array (size=21)
（略
  'REQUEST_URI' =&gt; string '/test.php' (length=9)
  'REQUEST_METHOD' =&gt; string 'GET' (length=3)
  'SCRIPT_NAME' =&gt; string '/test.php' (length=9)
  'SCRIPT_FILENAME' =&gt; string '/Users/uzulla/dev/mygreat_app/htdocs/index.php' (length=48)
  'PHP_SELF' =&gt; string '/test.php' (length=9)
（略
</code></pre>

<p>こうなってしまって、<code>/test</code>と<code>/test.php</code>で、<code>PATH_INFO</code>が変わってしまって辛い。</p>

<p>最近のWAFは<code>PATH_INFO</code>を積極的につかって、routingやargのキャプチャを実現していますが、そいつがコケてしまう…。つらい。</p>

<h2>惜しい</h2>

<p>まあ、解決策がないわけではなくて、BSの時だけ、処理の前段でPATH_INFOが無い場合にREQUEST_URIを加工して、PATH_INFOをねつ造するというテクもあるのですが、たとえばこういうかんじ。</p>

<pre><code>// Builtin Serverの時だけ処理する、Apacheなどでは無視される
if (php_sapi_name() == 'cli-server') {
    // PATH_INFOを捏造
    if(!isset($_SERVER['PATH_INFO'])){
            $_SERVER['PATH_INFO'] = $_SERVER['REQUEST_URI'];
    }

    // ここで、適切な正規表現で静的ファイルか、PHPへのリクエストかきりわける。
    // 静的ファイルならreturn falseさせるように、色々判定させる
    if ( !preg_match('#^/(blog|post|nom)/#', $_SERVER["PATH_INFO"])) {
        return false;
    }
    if ( !preg_match('#(jpg|png|gif|js|css|and_other)$/#', $_SERVER["PATH_INFO"])) {
        return false;
    }
}

// ここから先、通常の処理
var_dump($_SERVER);
</code></pre>

<p>まあ、あんまりやりたくないですよね。ここらへん直って欲しいなぁ〜〜。静的ファイルがなかったら、処理するという.htaccessでいうところの</p>

<pre><code>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [QSA,L]
</code></pre>

<p>このような挙動をする実装になっていてくれたほうがありがたかった。</p>

<p>PATH_INFOのリカバリが基本になったり、登録されていないrouteならreturn falseしてくれるような感じにWAF側にとりこまれてもいいのですが…。</p>

<p>PHP Builtin serverは開発にとってもイイナイスなものですが、既存環境との差もちらほらあります、これがどう今後埋まっていくのか？という感じですね！</p>

<p>この辺り、もっと良い感じになってくれるといいなーとかおもって今日の話は終わりです。</p>

<h2>非常になげやりで、謎な宣伝</h2>

<p>友人かつhachioji.pm メンバーのmoznion君（彼女募集中）が承認欲求不満なそうなので、皆さん大変お手数なのですが、ブクマ乞食にブクマをめぐんであげて下さい…。</p>

<p><a href="http://moznion.hatenadiary.com/entry/2013/09/11/163554">http://moznion.hatenadiary.com/entry/2013/09/11/163554</a></p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="承認欲求の権化" /></p>

<p>ここの所「アイドルに勝ちたい！まけられない！勝たなければセップクしかない！超えられるなら、毛髪をかけてもよい！きえええええ！！！」と大騒ぎしていて、さっさとアイドルのブクマをぬいてもらってmoznion君（彼女募集中）におかれましては精神を安定して頂きたい所です。
<a href="http://yancha.hachiojipm.org/quot?id=115773,115771,115770,115557,115552,115551,115533,115499,115492,115086,115082,115076,114745,114743,114523,114522,114517,114514,114513,114512,114511,114505,114492,114485,114483">参考</a></p>

<p>今確認したら、あとちょっとでこえられそう、あと一息、あと一息でございます！</p>

<p>一応本文についても触れておくと、マトモなことがかかれています。テック的な話は勿論参考になりますし（俺もはてなインターンで修行したい！と思った、両手で足りないほど遅い）、紋切り型の読書感想文みたいなものではなく、moznion君（彼女募集中）がインターンで得たものを彼なりに説明しているので、良エントリだと思います。moznion君（彼女募集中）の気づきはみなさんにとって既知かもしれませんが、オトク情報だけがネットではありません。</p>

<p>ただ、個人的にいわせてもらえば、ブクマ稼ぎたいならもっと煽ったりネタ画像を貼るべきだった、moznion君（彼女募集中）の実直さ、誠実さが邪魔をしたのでしょう。</p>

<p>そして、LTソンの宣伝をすべきだった。</p>

<p>さておき、「で、誰？」というブクマだけでもよろこばれると思いますので、是非。</p>

<p><a href="http://moznion.hatenadiary.com/entry/2013/09/11/163554">http://moznion.hatenadiary.com/entry/2013/09/11/163554</a></p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="承認欲求の権化" /></p>

<p>ところで、この写真ボクは<a href="http://blogimg.goo.ne.jp/user_image/56/b1/31a3dbb6d2470b712e2140a5c7b30a81.jpg">変わり兜</a>をかぶった武将にしかみえないんですけど、ボクだけですかね？</p>

<h2>さ〜て、明日のHachioji.pm日めくりテックトークは？</h2>

<p>東の東（ひがしのあずまさん）さんこと、ytnobodyさんです。</p>

<p>（期待してたまこぴーさんファンは、もうちょ〜っとまっててネ！）</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-12:entry-2013-09-12-01.html</id>
<published>2013-09-12T46:46:52+0900</published>
<updated>2013-09-12T21:57:41+09:00</updated>
</entry>
<entry>
<title type="text">購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</title>
<link href="http://hachiojipm.github.io/entry/2013-09-11-01.html" />
<author>
<name>boolfool</name>
</author>
<content><![CDATA[<h1>購読しておくと捗る (かもしれない) Vim 関連の情報ソース一覧</h1>

<p><a href="https://twitter.com/bool_fool">boolfool</a>です.<br/>
昨日は, <a href="https://twitter.com/moznion">@moznion</a>氏による<a href="http://hachiojipm.github.io/entry/2013-09-09-03.html">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</a>で, 今日はこれの Vim 版でお送りしたいと思います.</p>

<h2>ブログ編</h2>

<ul>
<li><h3><a href="http://d.hatena.ne.jp/osyo-manga/">C++でゲームプログラミング</a></h3>

<p><a href="https://twitter.com/manga_osyo">@manga_osyo</a> さんのブログ. 自作プラグインの紹介や tips など毎日更新されておられます.</p></li>
<li><h3><a href="http://cohama.hateblo.jp/">反省はしても後悔はしない</a></h3>

<p>Nagoya.vim の主催者である <a href="https://twitter.com/c0hama">@c0hama</a> さんのブログで, <a href="http://cohama.hateblo.jp/entry/2013/09/09/033028">この記事</a>にあるスライドはVimを使いはじめた人, そうでない人, どちらにもとても分かりやすいですね.</p></li>
<li><h3><a href="http://vinarian.blogspot.jp/">あるVimmerのブログ</a></h3>

<p>NeoBundle, neocomplete といったプラグインの作者の暗黒美夢王 <a href="https://twitter.com/@ShougoMatsu">@ShougoMatsu</a> さんのブログです. 最新の歌やエディタアニメについても仕入れることができます.</p></li>
<li><h3><a href="http://rhysd.hatenablog.com/">sorry, unimplemented:</a></h3>

<p>clever-f の作者 <a href="https://twitter.com/Linda_pp">@Linda_pp</a> さんのブログです. 作成されたプラグインの導入記事が分かりやすいです. また数少ない <a href="http://rhysd.hatenablog.com/entry/2013/08/08/233743">Travis CI に関する記事</a>もあります.</p></li>
<li><h3><a href="http://d.hatena.ne.jp/tyru/">Humanity</a></h3>

<p><a href="https://twitter.com/tyru">@tyru</a> さんのブログです. Vim Advent Calendar への投稿が盛り沢山ですね. 正規表現, コマンドに対するコメントが丁寧に書いてあるので, 一つ一つの記事が大変参考になります.</p></li>
<li><h3><a href="http://mattn.kaoriya.net/">Big Sky</a></h3>

<p>Vim だけでなく様々な界隈で有名な <a href="https://twitter.com/mattn_jp">@mattn_jp</a> さんのブログです.  最近は Go に関する記事が多く, <a href="http://mattn.kaoriya.net/software/vim/20130531000559.htm">Vimを使ったGo言語開発手法</a> という記事がGo入門の際に役立ちそうですね.</p></li>
<li><h3><a href="http://d.hatena.ne.jp/thinca/">永遠に未完成</a></h3>

<p><a href="https://twitter.com/thinca">@thinca</a> さんのブログです. プラグインの紹介だけでなく, 簡単な Unite ソースの作り方, tabline, quickfix など設定に関する記事も多々あります.</p></li>
</ul>


<h2>その他</h2>

<ul>
<li><h3><a href="https://twitter.com">Twiter</a></h3>

<ul>
<li>#vim 等のハッシュタグをウォッチする</li>
<li>#暗黒美夢王 のハッシュタグで暗黒美夢王の降臨を待機する</li>
<li>気になる Vimmer をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="https://github.com">Github</a></h3>

<ul>
<li>気になる vimrc, プラグインをウォッチする</li>
<li><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> は先人の知恵が詰まっています</li>
<li>気になる Vimmer をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="http://lingr.com/room/vim">vim-users-jp</a></h3>

<p>Lingr チャンネルである "vim-users-jp" をウォッチすると良いでしょう.<br/>
毎週土曜日に vimrc読書会 が開催されています</p></li>
<li><h3><a href="http://atnd.org/events/33746">Vim Advent Calendar 2012</a></h3>

<p>まだまだ継続されているので, ここを見ておけば最新の情報を入手できるでしょう.</p></li>
</ul>


<h2>まとめ</h2>

<p>Vim Advent Calendar をチェックして, vim-jp の <a href="http://vim-jp.org/vimmers/">Vimmers</a> の方々をフォローしておくのが良いと思います.<br/>
これからも Vim に感謝の気持ちと愛をもって接していきます.
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" />
<img src="http://hachiojipm.github.io/static/image/papics.jpg" alt="愛" /></p>

<p>明日は <a href="https://twitter.com/mackee_w">@mackee_w</a> さんです.</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-11:entry-2013-09-11-01.html</id>
<published>2013-09-11T45:45:06+0900</published>
<updated>2013-09-11T22:45:06+09:00</updated>
</entry>
<entry>
<title type="text">「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-02.html" />
<author>
<name>papix</name>
</author>
<content><![CDATA[<h1>「Perl入学式 第3回」の復習問題, vote.plを解いてみよう!</h1>

<p>皆様こんにちは.<br/>
「Perl入学式 in 東京 #3 補講」の待ち時間に, プロジェクターに映しながら艦これで3-2-1へ1回出撃したら, <a href="http://instagram.com/p/d8eIcioDya/">那珂ちゃんがドロップして超爆笑</a>したりした<a href="http://twitter.com/__papix__">papix</a>です.</p>

<p>...というわけで, 突如始まった「Hachioji.pm 日めくりテックトーク」の第一陣を務めさせて頂きます.<br/>
このテックトークは, Hachioji.pmらしく(?), 割と"何でもアリ"な感じでゆるふわにやって行きたいと思っています.</p>

<p>多分, 今後songmuさんがRijiの話をしたり(このブログもRijiで作られています!), ytnobodyさんがNephiaの話をしたり, mackee_wさんがヘリの話をしたり, moznionくんがXMLモジュールの話をしたり, xtetsujiさんがmod_perlの話をしたり, boolfoolがVimの話をしたり, あとはHachioji.pmは「Hachioji PHP Monster」の略なので, 総帥のuzullさんがPHPの話をしたりすると思います.</p>

<h2>今日のネタ「vote.pl」</h2>

<p>そんな「日めくりテックトーク」の記念すべき第1回ですが, 最初からガチなネタを投下してしまうと身構えられてしまうかもしれないので, 今回はゆるふわに, 以前開催した「Perl入学式 #3」の復習問題の「vote.pl」をネタとして取り上げてみたいと思います.</p>

<p>さて, 「Perl入学式 #3」では, ハッシュやリファレンスといった, Perlのキモとも言うべき部分にチャレンジしました.<br/>
復習問題の「vote.pl」も, それらの要素がゴロゴロ入ったいい問題に仕上がっています.</p>

<ol>
<li>「自分の名前 (name)」と「好きな食べ物の配列のリファレンス (favorite_foods)」を持ったハッシュリファレンスを作成しましょう (つまり, 好きな食べ物は複数個書いてください)</li>
<li>同様のハッシュリファレンスを2, 3個作ってみましょう (周りの人のリアルデータを使ってハッシュリファレンスを作ると良いかもしれません)</li>
<li>作成した複数のハッシュリファレンスを1つの配列に格納しましょう (配列を操作する関数を使っても良いですし, 直で代入しても良いです)</li>
<li>どんな方法でも良いので, 好きな食べ物のランキングを作って表示してみて下さい</li>
</ol>


<h2>解説</h2>

<p>...さあ, コードを書いていきましょう!<br/>
都合のいいことに問題が4つに分かれているので, 1つずつ消化して行くことにします.</p>

<h3>1. ハッシュリファレンスを作る</h3>

<p>まずは, 「名前」と「好きな食べ物」というデータを持つ, ハッシュリファレンスを作る所からですね.</p>

<pre><code>my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};
</code></pre>

<p>...こんな感じのデータ構造になるはずです.</p>

<p>まず, <code>my $papix</code>でスカラ変数「papix」を宣言して, そこに<code>{ ... }</code>という形で, ハッシュのリファレンスを作り出して代入しています.</p>

<p>そのハッシュには, 「name」というキーに「papix」という要素が, 「favorite_foods」というキーに, <code>[ ... ]</code>という形で生成した, 好きな食べ物が格納されている配列のリファレンスが格納されています.<br/>
配列のリファレンス内の要素は, qwショートカットを使って, シンプルに表現しています.</p>

<p>...さて, このコードは, 次のコードの省略形と言うことができます.</p>

<pre><code>my @papix_favorite_food = qw/ sushi niku ramen orinigi /;
my %papix_data = (
    name           =&gt; 'papix',
    favorite_foods =&gt; \@papix_favorite_food,
); 
my $papix = \%papix_data;
</code></pre>

<p>それぞれ, <code>{ ... }</code>と<code>[ ... ]</code>でハッシュ/配列のリファレンスを直接生成するのではなく, 一度<code>%papix_data</code>と<code>@papix_favorite_food</code>というハッシュ/配列を作っています.<br/>
ここからリファレンスを取る事で, 先ほどの例の<code>$papix</code>と同じデータ構造を生成しているわけです.</p>

<p>ただ, <code>%papix_data</code>や<code>@papix_favorite_food</code>は, <code>$papix</code>を生成してしまえば, それらのデータは<code>$papix</code>から<code>%{$papix}</code>だったり<code>@{$papix-&gt;{favorite_foods}}</code>だったりという形で参照できるので, 邪魔になってきますよね?</p>

<p>その為, <code>{ ... }</code>や<code>[ ... ]</code>といった記法で, 直接ハッシュや配列のリファレンスを生成する機能が必要になってくる訳ですね.</p>

<h3>2. ハッシュリファレンスを複数個作る</h3>

<pre><code>my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};
</code></pre>

<p><code>$papix</code>と同様に, <code>$macopy</code>と<code>$moznion</code>を用意しました.</p>

<h3>3. ハッシュリファレンスを配列に格納する</h3>

<p>ここまでに作ってきた, <code>$papix</code>, <code>$macopy</code>, <code>$moznion</code>という3つのハッシュリファレンスを, 配列に格納しましょう.<br/>
それぞれ個人のデータが格納されているので, 配列の名前は<code>@people</code>とします.</p>

<pre><code>my @people = ($papix, $macopy, $moznion);
</code></pre>

<p>リファレンスはスカラなので, このようにシンプルに, 配列に格納することができます.
もちろん,</p>

<pre><code>my @people;
push @people, $papix;
push @people, $macopy;
push @people, $moznion;
</code></pre>

<p>のように書いても問題はありませんが, ちょっとタイプ数が多くて辛くなりますね.</p>

<h3>4. 好きな食べ物のランキングを作る</h3>

<p>...の前に, ここまで書いてきたコードを確認してみましょう.</p>

<pre><code>use strict;
use warnings;

my $papix = {
    name           =&gt; 'papix',
    favorite_foods =&gt; [qw/ sushi niku ramen onigiri /],
};

my $macopy = {
    name =&gt; 'macopy',
    favorite_foods =&gt; [qw/ sushi niku /],
};

my $moznion = {
    name =&gt; 'moznion',
    favorite_foods =&gt; [qw/ sushi ramen /],
};

my @people = ($papix, $macopy, $moznion);
</code></pre>

<p>3人それぞれの個人情報が格納されたハッシュリファレンスを作り, それを<code>@people</code>という配列に格納しました.<br/>
ここから, この<code>@people</code>を使って, 好きな食べ物のランキングを作っていきます.</p>

<p>方針としては... そうですね, まず<code>%ranking</code>というハッシュを作って, そこにキーを「食べ物の名前」, 要素を「その食べ物が好きな人の数」という形で格納していきましょう.<br/>
これで, ある食べ物を好きな人は何人いるか? というのが一目でわかるようになるはずです.</p>

<p>というわけで, まずは3人の好きな食べ物が格納された配列を取り出しましょう.<br/>
ついでに, <code>%ranking</code>の宣言も忘れずに.</p>

<pre><code>my %ranking;
for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
}
</code></pre>

<p><code>@people</code>に格納されているハッシュリファレンスが<code>$person</code>に格納されながらループが回っていきます.<br/>
その為, <code>$favorite_foods</code>には, <code>$person</code>というハッシュリファレンスの「favorite_foods」というキーが格納している, 好きな食べ物が格納された配列のリファレンスが代入されるはずです.</p>

<p>確認の為, <code>Data::Dumper</code>モジュールでダンプしてみましょう.</p>

<pre><code>use Data::Dumper;

my %ranking;
for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    print Dumper $favorite_foods;
}
</code></pre>

<p>恐らく, <code>$papix</code>, <code>$macopy</code>, <code>$moznion</code>の順番で, それぞれに格納されている「好きな食べ物」の配列の中身が出力されるはずです.</p>

<pre><code>$VAR1 = [
          'sushi',
          'niku',
          'ramen',
          'onigiri'
        ];
$VAR1 = [
          'sushi',
          'niku'
        ];
$VAR1 = [
          'sushi',
          'ramen'
        ];
</code></pre>

<p>あとは, <code>$favorite_foods</code>から1つずつ食べ物の名前を取り出して, <code>%ranking</code>に格納していけばOKです.<br/>
こんな感じでしょうか.</p>

<pre><code>for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    for my $food (@{$favorite_foods}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p><code>%ranking</code>を<code>print Dumper \%raking</code>といった感じでダンプしてみると,</p>

<pre><code>$VAR1 = {
          'onigiri' =&gt; 1,
          'sushi' =&gt; 3,
          'ramen' =&gt; 2,
          'niku' =&gt; 2
        };
</code></pre>

<p>こんな感じになるはずです.<br/>
ちゃんと, 食べ物の名前がキー, その食べ物を好きな人の数が要素になったハッシュが生成されていますね!</p>

<h4>ところで...</h4>

<p>さっきあっさりと流したのですが, こう思った人はいないでしょうか?
「あれ, <code>$ranking{$food}++</code>ってやってるけど, 最初は<code>$ranking{$food} = 0</code>で初期化したり, 初期化と1票を追加する処理を合わせて<code>$ranking{$food} = 1</code>とか書かなきゃ駄目じゃないの?」...と.</p>

<p>まず, ハッシュの任意のキーに対する要素(中身)は, 初期状態だとすべて<code>undef</code>になっています.<br/>
これは, 次のようなワンライナーで確認できます(ワンライナーについては, 近日中に<a href="http://twitter.com/songmu">@songmu</a>さんがこのブログで執筆してくれるそうです!!!).</p>

<pre><code>$ perl -MData::Dumper -le 'my %hash; print Dumper($hash{hoge});'
$VAR1 = undef;
</code></pre>

<p>で, <code>undef</code>はPerlでは「未定義の値」を意味するのですが, これに1を足そうとすると, なんと「0」として扱われるんですね.</p>

<pre><code>$ perl -le 'my $hoge = undef; $hoge++; print $hoge'
1
</code></pre>

<p>なので, 先ほどのように, いきなり<code>$ranking{$food}++</code>と書いても, うまくいく! という訳です.</p>

<h4>リファクタリング</h4>

<pre><code>for my $person (@people) {
    my $favorite_foods = $person-&gt;{favorite_foods};
    for my $food (@{$favorite_foods}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p>筋のいい方はお気づきかもしれませんが, このコードでは<code>$favorite_foods</code>を省略することができます.</p>

<pre><code>for my $person (@people) {
    for my $food (@{$person-&gt;{favorite_foods}}) {
        $ranking{$food}++;
    } 
}
</code></pre>

<p>個人的にはこちらの方が好みですが, どちらが書きやすいか/読みやすいかは個人の感性なので, 好きな方を選ぶと良いでしょう.</p>

<h3>更にチャレンジ!</h3>

<p>さて, これで3人の好きな食べ物についての票数を集計することができました.<br/>
でも, どうせなら人気順(票数順)に食べ物を表示してみたいですよね.</p>

<p>というわけで, もう少し頑張ってみましょう.<br/>
方針としては, <code>%votes</code>というハッシュを用意して, 「票数」をキーとして, そのキーに対応する要素として, 「その票数を獲得した食べ物」を配列のリファレンスとして格納していく... という感じにします.</p>

<pre><code>my %votes;
for my $food (keys %{$ranking}) {
    push @{$votes{$ranking-&gt;{$food}}}, $food;
}
</code></pre>

<p><code>%vote</code>をダンプしてみると, こうなるはずです.</p>

<pre><code>$VAR1 = {
          '1' =&gt; [
                   'onigiri'
                 ],
          '3' =&gt; [
                   'sushi'
                 ],
          '2' =&gt; [
                   'ramen',
                   'niku'
                 ]
        };
</code></pre>

<p>};</p>

<p>あとは, この<code>%votes</code>のキーを数値としてソートして表示すれば...</p>

<pre><code>for my $vote (sort { $b &lt;=&gt; $a } keys %votes) {
    print "$vote:\n";
    for my $food (@{$sort-&gt;{$vote}}) {
        print "  $food\n";
    }
} 
</code></pre>

<p>このように, 獲得した票数順に食べ物の名前が出てくるはずです!</p>

<pre><code>3:
  sushi
2:
  ramen
  niku
1:
  onigiri
</code></pre>

<h1>まとめ</h1>

<p>...それにしてもvote.pl, なかなか手応えのある問題ですね!      <br/>
ハッシュやリファレンスという道具は, Perlでコードを書く時に必ず必要になるモノなので, 2回, 3回と反復して解いて, 是非自分ものにして下さい.</p>

<p>「どれだけ考えても解けない...」という人は, 一歩ずつ解いていくことを意識すると, 解けるようになるかもしれません.<br/>
極端な話, コードを1行書くごとに実行して, 構文(シンタックス)に問題がないか, 出力が正しいかどうかを確かめていけば, 時間はかかりますが, いつか確実に完成するはずです.<br/>
一気に40行, 50行とコードを書くのは楽しいですが, そこでバグが出てきた場合, それまでに書いてきた50行を虱潰しにチェックして, どこにバグがあるかを探さなくてはなりません.</p>

<p>なので最初は, バグを取る為に調べる必要がある行数を減らす為に, 1行1行(...は, さすがに細かいので, 5行とか10行くらいとかの単位で...)確認しながらコーディングを進めていくことをおすすめします.
ある程度慣れてくると, エラーの出力から問題のあるコードが見えてくるようになるので, そうなれば一気に20行, 30行と書いていっても, 多少困らなくなると思います.</p>

<p>Perlという言語は, #2や#3でもお話した通り, 同じ問題を解いたとしても, ある程度いろいろな解き方が出てきます.<br/>
実行結果が同じであっても, やはり自分や他人が理解しやすいコードの方が後々助かるので, 自分の解答と他人の解答を見比べて, いいところを吸収して行くといいと思います.</p>

<p>「papixのコード, よくないと思う. 自分のコードが最高だ!」という方は, 是非gistやブログに掲載して頂けると嬉しいです. こちらの記事でも紹介させて頂きます.</p>

<h1>次回予告</h1>

<p>というわけで, 「Perl入学式 #3」の復習問題, vote.plの解答とその解説をお送りしました.<br/>
2013年のPerl入学式はあと3回, 大阪と東京で開催しますので, 皆さんと一緒にPerlを楽しめればいいな, と思っています(Perl入学式 in YAPC::Asiaもよろしくおねがいします!).</p>

<p>明日は, 「はてなインターン2013 第六天魔王将軍 ツールチェインギャング(反社会的ではない)見習い」こと, moznionくんに担当して頂く予定です.<br/>
お楽しみに!!!</p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-09:entry-2013-09-09-02.html</id>
<published>2013-09-09T47:47:09+0900</published>
<updated>2013-09-11T12:42:20+09:00</updated>
</entry>
<entry>
<title type="text">購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</title>
<link href="http://hachiojipm.github.io/entry/2013-09-09-03.html" />
<author>
<name>moznion</name>
</author>
<content><![CDATA[<h1>購読しておくと捗る (かもしれない) Perl 関連の情報ソース一覧</h1>

<p>先日まで“<a href="http://www.hatena.ne.jp/company/staff/intern">はてなインターン2013</a>”に参加しておりました，<a href="https://twitter.com/moznion">@moznion</a>です．はてなインターンの感想エントリすら書いてないのにこのブログで記事を書くのかよ！！　という非難が各方面から聞こえる思いがしますが，書けって脅された……失敬，言われたので書きます．</p>

<p>はてなインターンの感想記事は近いうちに書くので，その際は皆様ここぞとばかりにバカスカはてブしてくださいませね！！　承認欲求！！！！！！！　ｷｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪｪ！！！！！！！！</p>

<p>さて，先日催されました <a href="http://www.zusaar.com/event/996003">Perl入学式in東京 #3 補講</a> にて，「Perl の情報をどこから得ているのか？」というような話題になった (らしい) ので，僕が普段活用している情報ソースに就いて記します．</p>

<h2>ブログ編</h2>

<ul>
<li><h3><a href="http://weblog.bulknews.net/">Tatsuhiko Miyagawa's blog</a></h3>

<p>言わずと知れた世界の Perl Hacker，<a href="http://twitter.com/miyagawa">@miyagawa</a> さんのブログです．大半の記事が英語なので敷居が高いように感じてしまうかもしれませんが，国内国外を問わない新鮮な情報が得られるので非常に有益です．最高！！！</p></li>
<li><h3><a href="http://blog.64p.org/">tokuhirom's blog</a></h3>

<p>こちらも言わずと知れた Perl Hacker である<a href="http://twitter.com/tokuhirom">@tokuhirom</a> さんのブログです．更新頻度が高く，常に新鮮な情報が得られるので最高です．時折掲載される Tips に何度救われたことかわかりません．</p></li>
<li><h3><a href="http://d.hatena.ne.jp/gfx/">Islands in the byte stream</a></h3>

<p>Mouse や Text::Xslate の作者で有名な <a href="http://twitter.com/__gfx__">@gfx</a> さんのブログです．大変有益な情報が多く重宝しております．それにしても<a href="http://d.hatena.ne.jp/gfx/20130909/1378741015">この記事</a>非常に良いですね！</p></li>
<li><h3><a href="http://d.hatena.ne.jp/charsbar/">Charsbar::Note</a></h3>

<p><a href="https://twitter.com/charsbar">@charsbar</a> さんのブログです．Perl の Toolchain にまつわる話題などが多く，また「ランカスターコンセンサス」等といった海外での議論をわかりやすく日本語で解説されており非常に参考になります．</p></li>
<li><h3><a href="http://www.songmu.jp/riji/">おそらくはそれさえも平凡な日々</a></h3>

<p><a href="https://twitter.com/songmu">@songmu</a> さんのブログです．内容も多岐にわたっていて非常に勉強になります．ところでこのブログのエンジンである Riji は @songmu さんお手製なんですよ．すごいですね！</p></li>
<li><h3><a href="http://blog.yappo.jp/yappo/">YappoLogs</a></h3>

<p><a href="https://twitter.com/yappo">@yappo</a> さんのブログです．こちらのブログも内容が多岐にわたっていて大変参考になります．</p></li>
<li><h3><a href="http://blog.livedoor.jp/xaicron/">にひりずむ::しんぷる</a></h3>

<p><a href="https://twitter.com/xaicron">@xaicron</a> さんのブログです．便利情報が多くて最高です．背景のせいで読みにくい，という話を良く耳にしますが僕はそこまで気になりません．</p></li>
<li><h3><a href="http://yusukebe.com/">ゆーすけべー日記</a></h3>

<p>日本の誇るエロギークこと <a href="https://twitter.com/yusukebe">@yusukebe</a> さんのブログです．ムフフな記事が多めかと思いきや真面目な記事が多く大変有益です．Mojolicious の記事が多い印象があります．</p></li>
<li><h3><a href="http://lestrrat.ldblog.jp/">D-7 <altijd in beweging></a></h3>

<p>JPA 代表理事の<a href="https://twitter.com/lestrrat">@lestrrat</a> さんのブログです．お役立ち Tips や時折入ってくるお子さんの情報が最高です．あと，YAPC の話題ならここ！！　って感じですね．</p></li>
<li><h3><a href="http://blog.papix.net/">Masteries</a></h3>

<p><a href="https://twitter.com/__papix__">@papix</a> さんのブログです．チュートリアル的な記事が多く，またその解説も丁寧なので大変参考になります．</p></li>
<li><h3><a href="http://www.dagolden.com/">dagolden</a></h3>

<p>世界的 Perl Hacker である David Golden さんのブログです．全編に渡って英語ですが，Toolchain や Perl 運用関連のシステムの解説が多く，参考になります．</p></li>
<li><h3><a href="http://blog.nomadscafe.jp/">blog.nomadscafe.jp</a></h3>

<p>インフラの巨頭であられる <a href="https://twitter.com/kazeburo">@kazeburo</a> さんのブログです．サーバー周りだとこのブログを超えてくる情報はなかなか無いでしょう．普段参考にしまくっているはずなのに，なぜか載せ忘れていましたが他意はありません．本当に申し訳ない気持ちでいっぱいです！ あばばばば</p></li>
</ul>


<p>他にも色々と最高のブログがあると思うので，そこら辺はみなさん探してみてください！　そして教えてください！！</p>

<h2>その他</h2>

<ul>
<li><h3><a href="https://twitter.com">Twitter</a></h3>

<ul>
<li>#perl 等のハッシュタグで 検索・監視する</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="https://github.com">Github</a></h3>

<ul>
<li>気になるモジュールをウォッチする</li>
<li>気になる Perl Hacker をフォローしてウォッチする</li>
</ul>
</li>
<li><h3><a href="http://lingr.com/room/perl_jp/">Perlの話題を日本語で</a></h3>

<p>Lingr チャンネルである “Perlの話題を日本語で” をウォッチすると良いでしょう．</p></li>
<li><h3><a href="http://www.cpan.org/modules/01modules.mtime.html">CPAN's 150 most recent uploads</a></h3>

<p>ここ最近で新たにアップロードされたモジュールの一覧が見れるので便利．RSS リーダとかに突っ込んでおくと良いかもしれません．</p></li>
<li><h3><a href="http://rebuild.fm/">Rebuild</a></h3>

<p><a href="http://twitter.com/miyagawa">@miyagawa</a> さんが配信されている Podcast です．毎回面白い放送が配信されているので購読すると良いでしょう．</p></li>
</ul>


<p>だいたいこんな感じかと思います！！　参考になれば幸いです！！！
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /><br/>
<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/c/cocodrips/20130906/20130906225609.png" alt="こんな感じ" /></p>
]]></content>
<id>tag:hachiojipm.github.io,2013-09-10:entry-2013-09-09-03.html</id>
<published>2013-09-10T17:17:22+0900</published>
<updated>2013-09-10T16:55:49+09:00</updated>
</entry>
</feed>
